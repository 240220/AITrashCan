
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000050a4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08005234  08005234  00015234  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052ac  080052ac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080052ac  080052ac  000152ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052b4  080052b4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052b4  080052b4  000152b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052b8  080052b8  000152b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080052bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          0000026c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200002e0  200002e0  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e7b0  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000020db  00000000  00000000  0002e854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000cd8  00000000  00000000  00030930  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000bf0  00000000  00000000  00031608  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000023cf  00000000  00000000  000321f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000fbbc  00000000  00000000  000345c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cb40c  00000000  00000000  00044183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010f58f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000038c4  00000000  00000000  0010f5e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800521c 	.word	0x0800521c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800521c 	.word	0x0800521c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <MX_DMA_Init+0x68>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	4a16      	ldr	r2, [pc, #88]	; (80005ec <MX_DMA_Init+0x68>)
 8000594:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000598:	6313      	str	r3, [r2, #48]	; 0x30
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <MX_DMA_Init+0x68>)
 800059c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800059e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005a6:	2300      	movs	r3, #0
 80005a8:	603b      	str	r3, [r7, #0]
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <MX_DMA_Init+0x68>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	4a0f      	ldr	r2, [pc, #60]	; (80005ec <MX_DMA_Init+0x68>)
 80005b0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005b4:	6313      	str	r3, [r2, #48]	; 0x30
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <MX_DMA_Init+0x68>)
 80005b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005be:	603b      	str	r3, [r7, #0]
 80005c0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 80005c2:	2200      	movs	r2, #0
 80005c4:	2100      	movs	r1, #0
 80005c6:	200c      	movs	r0, #12
 80005c8:	f000 fe93 	bl	80012f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80005cc:	200c      	movs	r0, #12
 80005ce:	f000 feac 	bl	800132a <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2100      	movs	r1, #0
 80005d6:	203a      	movs	r0, #58	; 0x3a
 80005d8:	f000 fe8b 	bl	80012f2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80005dc:	203a      	movs	r0, #58	; 0x3a
 80005de:	f000 fea4 	bl	800132a <HAL_NVIC_EnableIRQ>

}
 80005e2:	bf00      	nop
 80005e4:	3708      	adds	r7, #8
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40023800 	.word	0x40023800

080005f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005f0:	b480      	push	{r7}
 80005f2:	b085      	sub	sp, #20
 80005f4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	4b17      	ldr	r3, [pc, #92]	; (8000658 <MX_GPIO_Init+0x68>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a16      	ldr	r2, [pc, #88]	; (8000658 <MX_GPIO_Init+0x68>)
 8000600:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b14      	ldr	r3, [pc, #80]	; (8000658 <MX_GPIO_Init+0x68>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800060e:	60fb      	str	r3, [r7, #12]
 8000610:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60bb      	str	r3, [r7, #8]
 8000616:	4b10      	ldr	r3, [pc, #64]	; (8000658 <MX_GPIO_Init+0x68>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a0f      	ldr	r2, [pc, #60]	; (8000658 <MX_GPIO_Init+0x68>)
 800061c:	f043 0301 	orr.w	r3, r3, #1
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <MX_GPIO_Init+0x68>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	60bb      	str	r3, [r7, #8]
 800062c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	607b      	str	r3, [r7, #4]
 8000632:	4b09      	ldr	r3, [pc, #36]	; (8000658 <MX_GPIO_Init+0x68>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a08      	ldr	r2, [pc, #32]	; (8000658 <MX_GPIO_Init+0x68>)
 8000638:	f043 0302 	orr.w	r3, r3, #2
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <MX_GPIO_Init+0x68>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

}
 800064a:	bf00      	nop
 800064c:	3714      	adds	r7, #20
 800064e:	46bd      	mov	sp, r7
 8000650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000654:	4770      	bx	lr
 8000656:	bf00      	nop
 8000658:	40023800 	.word	0x40023800

0800065c <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
	if (huart == &huart1) {
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a16      	ldr	r2, [pc, #88]	; (80006c0 <HAL_UART_RxCpltCallback+0x64>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d107      	bne.n	800067c <HAL_UART_RxCpltCallback+0x20>
		u1_printf("copy\n");
 800066c:	4815      	ldr	r0, [pc, #84]	; (80006c4 <HAL_UART_RxCpltCallback+0x68>)
 800066e:	f000 fc7d 	bl	8000f6c <u1_printf>
		HAL_UART_Receive_DMA(&huart1, u1_Receive, 6);
 8000672:	2206      	movs	r2, #6
 8000674:	4914      	ldr	r1, [pc, #80]	; (80006c8 <HAL_UART_RxCpltCallback+0x6c>)
 8000676:	4812      	ldr	r0, [pc, #72]	; (80006c0 <HAL_UART_RxCpltCallback+0x64>)
 8000678:	f003 f80d 	bl	8003696 <HAL_UART_Receive_DMA>
	}
	if (huart == &huart3) {
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a13      	ldr	r2, [pc, #76]	; (80006cc <HAL_UART_RxCpltCallback+0x70>)
 8000680:	4293      	cmp	r3, r2
 8000682:	d118      	bne.n	80006b6 <HAL_UART_RxCpltCallback+0x5a>
		u1_printf("\nreceive from huart3: ");
 8000684:	4812      	ldr	r0, [pc, #72]	; (80006d0 <HAL_UART_RxCpltCallback+0x74>)
 8000686:	f000 fc71 	bl	8000f6c <u1_printf>
		for(int i =0;i<8;i++){
 800068a:	2300      	movs	r3, #0
 800068c:	60fb      	str	r3, [r7, #12]
 800068e:	e00a      	b.n	80006a6 <HAL_UART_RxCpltCallback+0x4a>
			u1_printf("%d ", u3_Receive[i]);
 8000690:	4a10      	ldr	r2, [pc, #64]	; (80006d4 <HAL_UART_RxCpltCallback+0x78>)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	4413      	add	r3, r2
 8000696:	781b      	ldrb	r3, [r3, #0]
 8000698:	4619      	mov	r1, r3
 800069a:	480f      	ldr	r0, [pc, #60]	; (80006d8 <HAL_UART_RxCpltCallback+0x7c>)
 800069c:	f000 fc66 	bl	8000f6c <u1_printf>
		for(int i =0;i<8;i++){
 80006a0:	68fb      	ldr	r3, [r7, #12]
 80006a2:	3301      	adds	r3, #1
 80006a4:	60fb      	str	r3, [r7, #12]
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	2b07      	cmp	r3, #7
 80006aa:	ddf1      	ble.n	8000690 <HAL_UART_RxCpltCallback+0x34>
		}
		HAL_UART_Receive_DMA(&huart3, u3_Receive, 5);
 80006ac:	2205      	movs	r2, #5
 80006ae:	4909      	ldr	r1, [pc, #36]	; (80006d4 <HAL_UART_RxCpltCallback+0x78>)
 80006b0:	4806      	ldr	r0, [pc, #24]	; (80006cc <HAL_UART_RxCpltCallback+0x70>)
 80006b2:	f002 fff0 	bl	8003696 <HAL_UART_Receive_DMA>
	}
}
 80006b6:	bf00      	nop
 80006b8:	3710      	adds	r7, #16
 80006ba:	46bd      	mov	sp, r7
 80006bc:	bd80      	pop	{r7, pc}
 80006be:	bf00      	nop
 80006c0:	20000140 	.word	0x20000140
 80006c4:	08005234 	.word	0x08005234
 80006c8:	20000090 	.word	0x20000090
 80006cc:	200001c8 	.word	0x200001c8
 80006d0:	0800523c 	.word	0x0800523c
 80006d4:	200000a4 	.word	0x200000a4
 80006d8:	08005254 	.word	0x08005254

080006dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006e0:	f000 fc96 	bl	8001010 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006e4:	f000 f838 	bl	8000758 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006e8:	f7ff ff82 	bl	80005f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80006ec:	f7ff ff4a 	bl	8000584 <MX_DMA_Init>
  MX_USART1_UART_Init();
 80006f0:	f000 fa96 	bl	8000c20 <MX_USART1_UART_Init>
  MX_TIM1_Init();
 80006f4:	f000 f956 	bl	80009a4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80006f8:	f000 f9a4 	bl	8000a44 <MX_TIM2_Init>
  MX_USART2_UART_Init();
 80006fc:	f000 faba 	bl	8000c74 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000700:	f000 fae2 	bl	8000cc8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_DMA(&huart1, u1_Receive, 1);
 8000704:	2201      	movs	r2, #1
 8000706:	490e      	ldr	r1, [pc, #56]	; (8000740 <main+0x64>)
 8000708:	480e      	ldr	r0, [pc, #56]	; (8000744 <main+0x68>)
 800070a:	f002 ffc4 	bl	8003696 <HAL_UART_Receive_DMA>
  HAL_UART_Receive_DMA(&huart3, u3_Receive, 5);
 800070e:	2205      	movs	r2, #5
 8000710:	490d      	ldr	r1, [pc, #52]	; (8000748 <main+0x6c>)
 8000712:	480e      	ldr	r0, [pc, #56]	; (800074c <main+0x70>)
 8000714:	f002 ffbf 	bl	8003696 <HAL_UART_Receive_DMA>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000718:	2100      	movs	r1, #0
 800071a:	480d      	ldr	r0, [pc, #52]	; (8000750 <main+0x74>)
 800071c:	f002 f8fe 	bl	800291c <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 8000720:	2104      	movs	r1, #4
 8000722:	480b      	ldr	r0, [pc, #44]	; (8000750 <main+0x74>)
 8000724:	f002 f8fa 	bl	800291c <HAL_TIM_PWM_Start>
    /* USER CODE BEGIN 3 */
//	  Emm_V5_Pos_Control(1, 1, 500, 0, 3200, 1, 0);//addr,dir,v,a,maichong,juedui,tongbu
//	  HAL_Delay(3000);
//	  Emm_V5_Pos_Control(1, 0, 500, 0, 3200, 1, 0);
//	  HAL_Delay(3000);
	  HAL_UART_Transmit(&huart3, u3_Transmit, 3, HAL_MAX_DELAY);
 8000728:	f04f 33ff 	mov.w	r3, #4294967295
 800072c:	2203      	movs	r2, #3
 800072e:	4909      	ldr	r1, [pc, #36]	; (8000754 <main+0x78>)
 8000730:	4806      	ldr	r0, [pc, #24]	; (800074c <main+0x70>)
 8000732:	f002 ff1e 	bl	8003572 <HAL_UART_Transmit>
	  HAL_Delay(2000);
 8000736:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800073a:	f000 fcdb 	bl	80010f4 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, u3_Transmit, 3, HAL_MAX_DELAY);
 800073e:	e7f3      	b.n	8000728 <main+0x4c>
 8000740:	20000090 	.word	0x20000090
 8000744:	20000140 	.word	0x20000140
 8000748:	200000a4 	.word	0x200000a4
 800074c:	200001c8 	.word	0x200001c8
 8000750:	200000f8 	.word	0x200000f8
 8000754:	20000000 	.word	0x20000000

08000758 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b094      	sub	sp, #80	; 0x50
 800075c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800075e:	f107 0320 	add.w	r3, r7, #32
 8000762:	2230      	movs	r2, #48	; 0x30
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f004 f8e2 	bl	8004930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800076c:	f107 030c 	add.w	r3, r7, #12
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800077c:	2300      	movs	r3, #0
 800077e:	60bb      	str	r3, [r7, #8]
 8000780:	4b22      	ldr	r3, [pc, #136]	; (800080c <SystemClock_Config+0xb4>)
 8000782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000784:	4a21      	ldr	r2, [pc, #132]	; (800080c <SystemClock_Config+0xb4>)
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	6413      	str	r3, [r2, #64]	; 0x40
 800078c:	4b1f      	ldr	r3, [pc, #124]	; (800080c <SystemClock_Config+0xb4>)
 800078e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000790:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000794:	60bb      	str	r3, [r7, #8]
 8000796:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000798:	2300      	movs	r3, #0
 800079a:	607b      	str	r3, [r7, #4]
 800079c:	4b1c      	ldr	r3, [pc, #112]	; (8000810 <SystemClock_Config+0xb8>)
 800079e:	681b      	ldr	r3, [r3, #0]
 80007a0:	4a1b      	ldr	r2, [pc, #108]	; (8000810 <SystemClock_Config+0xb8>)
 80007a2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007a6:	6013      	str	r3, [r2, #0]
 80007a8:	4b19      	ldr	r3, [pc, #100]	; (8000810 <SystemClock_Config+0xb8>)
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007b0:	607b      	str	r3, [r7, #4]
 80007b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007b4:	2302      	movs	r3, #2
 80007b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007b8:	2301      	movs	r3, #1
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007bc:	2310      	movs	r3, #16
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c0:	2300      	movs	r3, #0
 80007c2:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c4:	f107 0320 	add.w	r3, r7, #32
 80007c8:	4618      	mov	r0, r3
 80007ca:	f001 fb67 	bl	8001e9c <HAL_RCC_OscConfig>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d001      	beq.n	80007d8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80007d4:	f000 f81e 	bl	8000814 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d8:	230f      	movs	r3, #15
 80007da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80007dc:	2300      	movs	r3, #0
 80007de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e0:	2300      	movs	r3, #0
 80007e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007e4:	2300      	movs	r3, #0
 80007e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e8:	2300      	movs	r3, #0
 80007ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007ec:	f107 030c 	add.w	r3, r7, #12
 80007f0:	2100      	movs	r1, #0
 80007f2:	4618      	mov	r0, r3
 80007f4:	f001 fdca 	bl	800238c <HAL_RCC_ClockConfig>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 80007fe:	f000 f809 	bl	8000814 <Error_Handler>
  }
}
 8000802:	bf00      	nop
 8000804:	3750      	adds	r7, #80	; 0x50
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40023800 	.word	0x40023800
 8000810:	40007000 	.word	0x40007000

08000814 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000814:	b480      	push	{r7}
 8000816:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000818:	b672      	cpsid	i
}
 800081a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800081c:	e7fe      	b.n	800081c <Error_Handler+0x8>
	...

08000820 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000820:	b480      	push	{r7}
 8000822:	b083      	sub	sp, #12
 8000824:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000826:	2300      	movs	r3, #0
 8000828:	607b      	str	r3, [r7, #4]
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <HAL_MspInit+0x4c>)
 800082c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800082e:	4a0f      	ldr	r2, [pc, #60]	; (800086c <HAL_MspInit+0x4c>)
 8000830:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000834:	6453      	str	r3, [r2, #68]	; 0x44
 8000836:	4b0d      	ldr	r3, [pc, #52]	; (800086c <HAL_MspInit+0x4c>)
 8000838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800083a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000842:	2300      	movs	r3, #0
 8000844:	603b      	str	r3, [r7, #0]
 8000846:	4b09      	ldr	r3, [pc, #36]	; (800086c <HAL_MspInit+0x4c>)
 8000848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084a:	4a08      	ldr	r2, [pc, #32]	; (800086c <HAL_MspInit+0x4c>)
 800084c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000850:	6413      	str	r3, [r2, #64]	; 0x40
 8000852:	4b06      	ldr	r3, [pc, #24]	; (800086c <HAL_MspInit+0x4c>)
 8000854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000856:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800085a:	603b      	str	r3, [r7, #0]
 800085c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085e:	bf00      	nop
 8000860:	370c      	adds	r7, #12
 8000862:	46bd      	mov	sp, r7
 8000864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop
 800086c:	40023800 	.word	0x40023800

08000870 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <NMI_Handler+0x4>

08000876 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087a:	e7fe      	b.n	800087a <HardFault_Handler+0x4>

0800087c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800087c:	b480      	push	{r7}
 800087e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000880:	e7fe      	b.n	8000880 <MemManage_Handler+0x4>

08000882 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000882:	b480      	push	{r7}
 8000884:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000886:	e7fe      	b.n	8000886 <BusFault_Handler+0x4>

08000888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000888:	b480      	push	{r7}
 800088a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800088c:	e7fe      	b.n	800088c <UsageFault_Handler+0x4>

0800088e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800088e:	b480      	push	{r7}
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000892:	bf00      	nop
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800089c:	b480      	push	{r7}
 800089e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008a0:	bf00      	nop
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr

080008aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008aa:	b480      	push	{r7}
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ae:	bf00      	nop
 80008b0:	46bd      	mov	sp, r7
 80008b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b6:	4770      	bx	lr

080008b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008bc:	f000 fbfa 	bl	80010b4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008c0:	bf00      	nop
 80008c2:	bd80      	pop	{r7, pc}

080008c4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80008c8:	4802      	ldr	r0, [pc, #8]	; (80008d4 <DMA1_Stream1_IRQHandler+0x10>)
 80008ca:	f000 fee1 	bl	8001690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80008ce:	bf00      	nop
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	2000026c 	.word	0x2000026c

080008d8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80008dc:	4802      	ldr	r0, [pc, #8]	; (80008e8 <USART1_IRQHandler+0x10>)
 80008de:	f002 ff0b 	bl	80036f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80008e2:	bf00      	nop
 80008e4:	bd80      	pop	{r7, pc}
 80008e6:	bf00      	nop
 80008e8:	20000140 	.word	0x20000140

080008ec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80008f0:	4802      	ldr	r0, [pc, #8]	; (80008fc <USART3_IRQHandler+0x10>)
 80008f2:	f002 ff01 	bl	80036f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80008f6:	bf00      	nop
 80008f8:	bd80      	pop	{r7, pc}
 80008fa:	bf00      	nop
 80008fc:	200001c8 	.word	0x200001c8

08000900 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000904:	4802      	ldr	r0, [pc, #8]	; (8000910 <DMA2_Stream2_IRQHandler+0x10>)
 8000906:	f000 fec3 	bl	8001690 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 800090a:	bf00      	nop
 800090c:	bd80      	pop	{r7, pc}
 800090e:	bf00      	nop
 8000910:	2000020c 	.word	0x2000020c

08000914 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000914:	b580      	push	{r7, lr}
 8000916:	b086      	sub	sp, #24
 8000918:	af00      	add	r7, sp, #0
 800091a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800091c:	4a14      	ldr	r2, [pc, #80]	; (8000970 <_sbrk+0x5c>)
 800091e:	4b15      	ldr	r3, [pc, #84]	; (8000974 <_sbrk+0x60>)
 8000920:	1ad3      	subs	r3, r2, r3
 8000922:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000924:	697b      	ldr	r3, [r7, #20]
 8000926:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000928:	4b13      	ldr	r3, [pc, #76]	; (8000978 <_sbrk+0x64>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	2b00      	cmp	r3, #0
 800092e:	d102      	bne.n	8000936 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000930:	4b11      	ldr	r3, [pc, #68]	; (8000978 <_sbrk+0x64>)
 8000932:	4a12      	ldr	r2, [pc, #72]	; (800097c <_sbrk+0x68>)
 8000934:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000936:	4b10      	ldr	r3, [pc, #64]	; (8000978 <_sbrk+0x64>)
 8000938:	681a      	ldr	r2, [r3, #0]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	4413      	add	r3, r2
 800093e:	693a      	ldr	r2, [r7, #16]
 8000940:	429a      	cmp	r2, r3
 8000942:	d207      	bcs.n	8000954 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000944:	f003 ffca 	bl	80048dc <__errno>
 8000948:	4603      	mov	r3, r0
 800094a:	220c      	movs	r2, #12
 800094c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800094e:	f04f 33ff 	mov.w	r3, #4294967295
 8000952:	e009      	b.n	8000968 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000954:	4b08      	ldr	r3, [pc, #32]	; (8000978 <_sbrk+0x64>)
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800095a:	4b07      	ldr	r3, [pc, #28]	; (8000978 <_sbrk+0x64>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	4413      	add	r3, r2
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <_sbrk+0x64>)
 8000964:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000966:	68fb      	ldr	r3, [r7, #12]
}
 8000968:	4618      	mov	r0, r3
 800096a:	3718      	adds	r7, #24
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20020000 	.word	0x20020000
 8000974:	00000400 	.word	0x00000400
 8000978:	200000ac 	.word	0x200000ac
 800097c:	200002e0 	.word	0x200002e0

08000980 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000984:	4b06      	ldr	r3, [pc, #24]	; (80009a0 <SystemInit+0x20>)
 8000986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800098a:	4a05      	ldr	r2, [pc, #20]	; (80009a0 <SystemInit+0x20>)
 800098c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000990:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000994:	bf00      	nop
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
 800099e:	bf00      	nop
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b086      	sub	sp, #24
 80009a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80009aa:	f107 0308 	add.w	r3, r7, #8
 80009ae:	2200      	movs	r2, #0
 80009b0:	601a      	str	r2, [r3, #0]
 80009b2:	605a      	str	r2, [r3, #4]
 80009b4:	609a      	str	r2, [r3, #8]
 80009b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80009b8:	463b      	mov	r3, r7
 80009ba:	2200      	movs	r2, #0
 80009bc:	601a      	str	r2, [r3, #0]
 80009be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009c0:	4b1e      	ldr	r3, [pc, #120]	; (8000a3c <MX_TIM1_Init+0x98>)
 80009c2:	4a1f      	ldr	r2, [pc, #124]	; (8000a40 <MX_TIM1_Init+0x9c>)
 80009c4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16-1;
 80009c6:	4b1d      	ldr	r3, [pc, #116]	; (8000a3c <MX_TIM1_Init+0x98>)
 80009c8:	220f      	movs	r2, #15
 80009ca:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009cc:	4b1b      	ldr	r3, [pc, #108]	; (8000a3c <MX_TIM1_Init+0x98>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000-1;
 80009d2:	4b1a      	ldr	r3, [pc, #104]	; (8000a3c <MX_TIM1_Init+0x98>)
 80009d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009d8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009da:	4b18      	ldr	r3, [pc, #96]	; (8000a3c <MX_TIM1_Init+0x98>)
 80009dc:	2200      	movs	r2, #0
 80009de:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009e0:	4b16      	ldr	r3, [pc, #88]	; (8000a3c <MX_TIM1_Init+0x98>)
 80009e2:	2200      	movs	r2, #0
 80009e4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009e6:	4b15      	ldr	r3, [pc, #84]	; (8000a3c <MX_TIM1_Init+0x98>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009ec:	4813      	ldr	r0, [pc, #76]	; (8000a3c <MX_TIM1_Init+0x98>)
 80009ee:	f001 feed 	bl	80027cc <HAL_TIM_Base_Init>
 80009f2:	4603      	mov	r3, r0
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80009f8:	f7ff ff0c 	bl	8000814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a00:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a02:	f107 0308 	add.w	r3, r7, #8
 8000a06:	4619      	mov	r1, r3
 8000a08:	480c      	ldr	r0, [pc, #48]	; (8000a3c <MX_TIM1_Init+0x98>)
 8000a0a:	f002 f911 	bl	8002c30 <HAL_TIM_ConfigClockSource>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d001      	beq.n	8000a18 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000a14:	f7ff fefe 	bl	8000814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a20:	463b      	mov	r3, r7
 8000a22:	4619      	mov	r1, r3
 8000a24:	4805      	ldr	r0, [pc, #20]	; (8000a3c <MX_TIM1_Init+0x98>)
 8000a26:	f002 fcdb 	bl	80033e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d001      	beq.n	8000a34 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000a30:	f7ff fef0 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000a34:	bf00      	nop
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	200000b0 	.word	0x200000b0
 8000a40:	40010000 	.word	0x40010000

08000a44 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b08e      	sub	sp, #56	; 0x38
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
 8000a54:	609a      	str	r2, [r3, #8]
 8000a56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a58:	f107 0320 	add.w	r3, r7, #32
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	601a      	str	r2, [r3, #0]
 8000a60:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a62:	1d3b      	adds	r3, r7, #4
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
 8000a68:	605a      	str	r2, [r3, #4]
 8000a6a:	609a      	str	r2, [r3, #8]
 8000a6c:	60da      	str	r2, [r3, #12]
 8000a6e:	611a      	str	r2, [r3, #16]
 8000a70:	615a      	str	r2, [r3, #20]
 8000a72:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a74:	4b32      	ldr	r3, [pc, #200]	; (8000b40 <MX_TIM2_Init+0xfc>)
 8000a76:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a7a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16-1;
 8000a7c:	4b30      	ldr	r3, [pc, #192]	; (8000b40 <MX_TIM2_Init+0xfc>)
 8000a7e:	220f      	movs	r2, #15
 8000a80:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a82:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <MX_TIM2_Init+0xfc>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 20000-1;
 8000a88:	4b2d      	ldr	r3, [pc, #180]	; (8000b40 <MX_TIM2_Init+0xfc>)
 8000a8a:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000a8e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a90:	4b2b      	ldr	r3, [pc, #172]	; (8000b40 <MX_TIM2_Init+0xfc>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a96:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <MX_TIM2_Init+0xfc>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a9c:	4828      	ldr	r0, [pc, #160]	; (8000b40 <MX_TIM2_Init+0xfc>)
 8000a9e:	f001 fe95 	bl	80027cc <HAL_TIM_Base_Init>
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	2b00      	cmp	r3, #0
 8000aa6:	d001      	beq.n	8000aac <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000aa8:	f7ff feb4 	bl	8000814 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ab0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ab2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ab6:	4619      	mov	r1, r3
 8000ab8:	4821      	ldr	r0, [pc, #132]	; (8000b40 <MX_TIM2_Init+0xfc>)
 8000aba:	f002 f8b9 	bl	8002c30 <HAL_TIM_ConfigClockSource>
 8000abe:	4603      	mov	r3, r0
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d001      	beq.n	8000ac8 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ac4:	f7ff fea6 	bl	8000814 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ac8:	481d      	ldr	r0, [pc, #116]	; (8000b40 <MX_TIM2_Init+0xfc>)
 8000aca:	f001 fece 	bl	800286a <HAL_TIM_PWM_Init>
 8000ace:	4603      	mov	r3, r0
 8000ad0:	2b00      	cmp	r3, #0
 8000ad2:	d001      	beq.n	8000ad8 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ad4:	f7ff fe9e 	bl	8000814 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000adc:	2300      	movs	r3, #0
 8000ade:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000ae0:	f107 0320 	add.w	r3, r7, #32
 8000ae4:	4619      	mov	r1, r3
 8000ae6:	4816      	ldr	r0, [pc, #88]	; (8000b40 <MX_TIM2_Init+0xfc>)
 8000ae8:	f002 fc7a 	bl	80033e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000af2:	f7ff fe8f 	bl	8000814 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000af6:	2360      	movs	r3, #96	; 0x60
 8000af8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000afa:	2300      	movs	r3, #0
 8000afc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000afe:	2300      	movs	r3, #0
 8000b00:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	480c      	ldr	r0, [pc, #48]	; (8000b40 <MX_TIM2_Init+0xfc>)
 8000b0e:	f001 ffcd 	bl	8002aac <HAL_TIM_PWM_ConfigChannel>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000b18:	f7ff fe7c 	bl	8000814 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000b1c:	1d3b      	adds	r3, r7, #4
 8000b1e:	2204      	movs	r2, #4
 8000b20:	4619      	mov	r1, r3
 8000b22:	4807      	ldr	r0, [pc, #28]	; (8000b40 <MX_TIM2_Init+0xfc>)
 8000b24:	f001 ffc2 	bl	8002aac <HAL_TIM_PWM_ConfigChannel>
 8000b28:	4603      	mov	r3, r0
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d001      	beq.n	8000b32 <MX_TIM2_Init+0xee>
  {
    Error_Handler();
 8000b2e:	f7ff fe71 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b32:	4803      	ldr	r0, [pc, #12]	; (8000b40 <MX_TIM2_Init+0xfc>)
 8000b34:	f000 f83c 	bl	8000bb0 <HAL_TIM_MspPostInit>

}
 8000b38:	bf00      	nop
 8000b3a:	3738      	adds	r7, #56	; 0x38
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	200000f8 	.word	0x200000f8

08000b44 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b085      	sub	sp, #20
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a15      	ldr	r2, [pc, #84]	; (8000ba8 <HAL_TIM_Base_MspInit+0x64>)
 8000b52:	4293      	cmp	r3, r2
 8000b54:	d10e      	bne.n	8000b74 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000b56:	2300      	movs	r3, #0
 8000b58:	60fb      	str	r3, [r7, #12]
 8000b5a:	4b14      	ldr	r3, [pc, #80]	; (8000bac <HAL_TIM_Base_MspInit+0x68>)
 8000b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b5e:	4a13      	ldr	r2, [pc, #76]	; (8000bac <HAL_TIM_Base_MspInit+0x68>)
 8000b60:	f043 0301 	orr.w	r3, r3, #1
 8000b64:	6453      	str	r3, [r2, #68]	; 0x44
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <HAL_TIM_Base_MspInit+0x68>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	f003 0301 	and.w	r3, r3, #1
 8000b6e:	60fb      	str	r3, [r7, #12]
 8000b70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000b72:	e012      	b.n	8000b9a <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b7c:	d10d      	bne.n	8000b9a <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b7e:	2300      	movs	r3, #0
 8000b80:	60bb      	str	r3, [r7, #8]
 8000b82:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <HAL_TIM_Base_MspInit+0x68>)
 8000b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b86:	4a09      	ldr	r2, [pc, #36]	; (8000bac <HAL_TIM_Base_MspInit+0x68>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8e:	4b07      	ldr	r3, [pc, #28]	; (8000bac <HAL_TIM_Base_MspInit+0x68>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	f003 0301 	and.w	r3, r3, #1
 8000b96:	60bb      	str	r3, [r7, #8]
 8000b98:	68bb      	ldr	r3, [r7, #8]
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40010000 	.word	0x40010000
 8000bac:	40023800 	.word	0x40023800

08000bb0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b088      	sub	sp, #32
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb8:	f107 030c 	add.w	r3, r7, #12
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	601a      	str	r2, [r3, #0]
 8000bc0:	605a      	str	r2, [r3, #4]
 8000bc2:	609a      	str	r2, [r3, #8]
 8000bc4:	60da      	str	r2, [r3, #12]
 8000bc6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	681b      	ldr	r3, [r3, #0]
 8000bcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bd0:	d11d      	bne.n	8000c0e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60bb      	str	r3, [r7, #8]
 8000bd6:	4b10      	ldr	r3, [pc, #64]	; (8000c18 <HAL_TIM_MspPostInit+0x68>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a0f      	ldr	r2, [pc, #60]	; (8000c18 <HAL_TIM_MspPostInit+0x68>)
 8000bdc:	f043 0301 	orr.w	r3, r3, #1
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b0d      	ldr	r3, [pc, #52]	; (8000c18 <HAL_TIM_MspPostInit+0x68>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0301 	and.w	r3, r3, #1
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bee:	2303      	movs	r3, #3
 8000bf0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf2:	2302      	movs	r3, #2
 8000bf4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000bfe:	2301      	movs	r3, #1
 8000c00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c02:	f107 030c 	add.w	r3, r7, #12
 8000c06:	4619      	mov	r1, r3
 8000c08:	4804      	ldr	r0, [pc, #16]	; (8000c1c <HAL_TIM_MspPostInit+0x6c>)
 8000c0a:	f000 ffab 	bl	8001b64 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c0e:	bf00      	nop
 8000c10:	3720      	adds	r7, #32
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40023800 	.word	0x40023800
 8000c1c:	40020000 	.word	0x40020000

08000c20 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart3_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c24:	4b11      	ldr	r3, [pc, #68]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c26:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <MX_USART1_UART_Init+0x50>)
 8000c28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000c2a:	4b10      	ldr	r3, [pc, #64]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c32:	4b0e      	ldr	r3, [pc, #56]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c3e:	4b0b      	ldr	r3, [pc, #44]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c44:	4b09      	ldr	r3, [pc, #36]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c46:	220c      	movs	r2, #12
 8000c48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c4a:	4b08      	ldr	r3, [pc, #32]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c52:	2200      	movs	r2, #0
 8000c54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c56:	4805      	ldr	r0, [pc, #20]	; (8000c6c <MX_USART1_UART_Init+0x4c>)
 8000c58:	f002 fc3e 	bl	80034d8 <HAL_UART_Init>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c62:	f7ff fdd7 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	bf00      	nop
 8000c6c:	20000140 	.word	0x20000140
 8000c70:	40011000 	.word	0x40011000

08000c74 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c78:	4b11      	ldr	r3, [pc, #68]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c7a:	4a12      	ldr	r2, [pc, #72]	; (8000cc4 <MX_USART2_UART_Init+0x50>)
 8000c7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c7e:	4b10      	ldr	r3, [pc, #64]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c86:	4b0e      	ldr	r3, [pc, #56]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c8c:	4b0c      	ldr	r3, [pc, #48]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c92:	4b0b      	ldr	r3, [pc, #44]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c98:	4b09      	ldr	r3, [pc, #36]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000c9a:	220c      	movs	r2, #12
 8000c9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c9e:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ca4:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000caa:	4805      	ldr	r0, [pc, #20]	; (8000cc0 <MX_USART2_UART_Init+0x4c>)
 8000cac:	f002 fc14 	bl	80034d8 <HAL_UART_Init>
 8000cb0:	4603      	mov	r3, r0
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d001      	beq.n	8000cba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000cb6:	f7ff fdad 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000cba:	bf00      	nop
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000184 	.word	0x20000184
 8000cc4:	40004400 	.word	0x40004400

08000cc8 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	; (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000cce:	4a12      	ldr	r2, [pc, #72]	; (8000d18 <MX_USART3_UART_Init+0x50>)
 8000cd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000cd2:	4b10      	ldr	r3, [pc, #64]	; (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000cd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000cd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000cda:	4b0e      	ldr	r3, [pc, #56]	; (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ce0:	4b0c      	ldr	r3, [pc, #48]	; (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ce6:	4b0b      	ldr	r3, [pc, #44]	; (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000cec:	4b09      	ldr	r3, [pc, #36]	; (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000cee:	220c      	movs	r2, #12
 8000cf0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000cf2:	4b08      	ldr	r3, [pc, #32]	; (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000cf8:	4b06      	ldr	r3, [pc, #24]	; (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000cfe:	4805      	ldr	r0, [pc, #20]	; (8000d14 <MX_USART3_UART_Init+0x4c>)
 8000d00:	f002 fbea 	bl	80034d8 <HAL_UART_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000d0a:	f7ff fd83 	bl	8000814 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000d0e:	bf00      	nop
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200001c8 	.word	0x200001c8
 8000d18:	40004800 	.word	0x40004800

08000d1c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b08e      	sub	sp, #56	; 0x38
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d24:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]
 8000d2c:	605a      	str	r2, [r3, #4]
 8000d2e:	609a      	str	r2, [r3, #8]
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	4a82      	ldr	r2, [pc, #520]	; (8000f44 <HAL_UART_MspInit+0x228>)
 8000d3a:	4293      	cmp	r3, r2
 8000d3c:	d163      	bne.n	8000e06 <HAL_UART_MspInit+0xea>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d3e:	2300      	movs	r3, #0
 8000d40:	623b      	str	r3, [r7, #32]
 8000d42:	4b81      	ldr	r3, [pc, #516]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d46:	4a80      	ldr	r2, [pc, #512]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000d48:	f043 0310 	orr.w	r3, r3, #16
 8000d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d4e:	4b7e      	ldr	r3, [pc, #504]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d52:	f003 0310 	and.w	r3, r3, #16
 8000d56:	623b      	str	r3, [r7, #32]
 8000d58:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	61fb      	str	r3, [r7, #28]
 8000d5e:	4b7a      	ldr	r3, [pc, #488]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d62:	4a79      	ldr	r2, [pc, #484]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	; 0x30
 8000d6a:	4b77      	ldr	r3, [pc, #476]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	61fb      	str	r3, [r7, #28]
 8000d74:	69fb      	ldr	r3, [r7, #28]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d76:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d80:	2300      	movs	r3, #0
 8000d82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d84:	2303      	movs	r3, #3
 8000d86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d90:	4619      	mov	r1, r3
 8000d92:	486e      	ldr	r0, [pc, #440]	; (8000f4c <HAL_UART_MspInit+0x230>)
 8000d94:	f000 fee6 	bl	8001b64 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8000d98:	4b6d      	ldr	r3, [pc, #436]	; (8000f50 <HAL_UART_MspInit+0x234>)
 8000d9a:	4a6e      	ldr	r2, [pc, #440]	; (8000f54 <HAL_UART_MspInit+0x238>)
 8000d9c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8000d9e:	4b6c      	ldr	r3, [pc, #432]	; (8000f50 <HAL_UART_MspInit+0x234>)
 8000da0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000da4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000da6:	4b6a      	ldr	r3, [pc, #424]	; (8000f50 <HAL_UART_MspInit+0x234>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dac:	4b68      	ldr	r3, [pc, #416]	; (8000f50 <HAL_UART_MspInit+0x234>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000db2:	4b67      	ldr	r3, [pc, #412]	; (8000f50 <HAL_UART_MspInit+0x234>)
 8000db4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000db8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000dba:	4b65      	ldr	r3, [pc, #404]	; (8000f50 <HAL_UART_MspInit+0x234>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000dc0:	4b63      	ldr	r3, [pc, #396]	; (8000f50 <HAL_UART_MspInit+0x234>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8000dc6:	4b62      	ldr	r3, [pc, #392]	; (8000f50 <HAL_UART_MspInit+0x234>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000dcc:	4b60      	ldr	r3, [pc, #384]	; (8000f50 <HAL_UART_MspInit+0x234>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000dd2:	4b5f      	ldr	r3, [pc, #380]	; (8000f50 <HAL_UART_MspInit+0x234>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8000dd8:	485d      	ldr	r0, [pc, #372]	; (8000f50 <HAL_UART_MspInit+0x234>)
 8000dda:	f000 fac1 	bl	8001360 <HAL_DMA_Init>
 8000dde:	4603      	mov	r3, r0
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d001      	beq.n	8000de8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000de4:	f7ff fd16 	bl	8000814 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	4a59      	ldr	r2, [pc, #356]	; (8000f50 <HAL_UART_MspInit+0x234>)
 8000dec:	639a      	str	r2, [r3, #56]	; 0x38
 8000dee:	4a58      	ldr	r2, [pc, #352]	; (8000f50 <HAL_UART_MspInit+0x234>)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000df4:	2200      	movs	r2, #0
 8000df6:	2100      	movs	r1, #0
 8000df8:	2025      	movs	r0, #37	; 0x25
 8000dfa:	f000 fa7a 	bl	80012f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000dfe:	2025      	movs	r0, #37	; 0x25
 8000e00:	f000 fa93 	bl	800132a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000e04:	e099      	b.n	8000f3a <HAL_UART_MspInit+0x21e>
  else if(uartHandle->Instance==USART2)
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	4a53      	ldr	r2, [pc, #332]	; (8000f58 <HAL_UART_MspInit+0x23c>)
 8000e0c:	4293      	cmp	r3, r2
 8000e0e:	d12c      	bne.n	8000e6a <HAL_UART_MspInit+0x14e>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	4b4c      	ldr	r3, [pc, #304]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000e16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e18:	4a4b      	ldr	r2, [pc, #300]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e20:	4b49      	ldr	r3, [pc, #292]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e28:	61bb      	str	r3, [r7, #24]
 8000e2a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	4b45      	ldr	r3, [pc, #276]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000e32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e34:	4a44      	ldr	r2, [pc, #272]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000e36:	f043 0301 	orr.w	r3, r3, #1
 8000e3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000e3c:	4b42      	ldr	r3, [pc, #264]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e40:	f003 0301 	and.w	r3, r3, #1
 8000e44:	617b      	str	r3, [r7, #20]
 8000e46:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000e48:	230c      	movs	r3, #12
 8000e4a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e50:	2300      	movs	r3, #0
 8000e52:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e54:	2303      	movs	r3, #3
 8000e56:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e60:	4619      	mov	r1, r3
 8000e62:	483a      	ldr	r0, [pc, #232]	; (8000f4c <HAL_UART_MspInit+0x230>)
 8000e64:	f000 fe7e 	bl	8001b64 <HAL_GPIO_Init>
}
 8000e68:	e067      	b.n	8000f3a <HAL_UART_MspInit+0x21e>
  else if(uartHandle->Instance==USART3)
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a3b      	ldr	r2, [pc, #236]	; (8000f5c <HAL_UART_MspInit+0x240>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d162      	bne.n	8000f3a <HAL_UART_MspInit+0x21e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
 8000e78:	4b33      	ldr	r3, [pc, #204]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000e7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7c:	4a32      	ldr	r2, [pc, #200]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000e7e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e82:	6413      	str	r3, [r2, #64]	; 0x40
 8000e84:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000e86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e88:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000e8c:	613b      	str	r3, [r7, #16]
 8000e8e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
 8000e94:	4b2c      	ldr	r3, [pc, #176]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e98:	4a2b      	ldr	r2, [pc, #172]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000e9a:	f043 0302 	orr.w	r3, r3, #2
 8000e9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea0:	4b29      	ldr	r3, [pc, #164]	; (8000f48 <HAL_UART_MspInit+0x22c>)
 8000ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea4:	f003 0302 	and.w	r3, r3, #2
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000eac:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000eb0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000ebe:	2307      	movs	r3, #7
 8000ec0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ec2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	4825      	ldr	r0, [pc, #148]	; (8000f60 <HAL_UART_MspInit+0x244>)
 8000eca:	f000 fe4b 	bl	8001b64 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8000ece:	4b25      	ldr	r3, [pc, #148]	; (8000f64 <HAL_UART_MspInit+0x248>)
 8000ed0:	4a25      	ldr	r2, [pc, #148]	; (8000f68 <HAL_UART_MspInit+0x24c>)
 8000ed2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8000ed4:	4b23      	ldr	r3, [pc, #140]	; (8000f64 <HAL_UART_MspInit+0x248>)
 8000ed6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000eda:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000edc:	4b21      	ldr	r3, [pc, #132]	; (8000f64 <HAL_UART_MspInit+0x248>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee2:	4b20      	ldr	r3, [pc, #128]	; (8000f64 <HAL_UART_MspInit+0x248>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000ee8:	4b1e      	ldr	r3, [pc, #120]	; (8000f64 <HAL_UART_MspInit+0x248>)
 8000eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eee:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ef0:	4b1c      	ldr	r3, [pc, #112]	; (8000f64 <HAL_UART_MspInit+0x248>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ef6:	4b1b      	ldr	r3, [pc, #108]	; (8000f64 <HAL_UART_MspInit+0x248>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 8000efc:	4b19      	ldr	r3, [pc, #100]	; (8000f64 <HAL_UART_MspInit+0x248>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f02:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <HAL_UART_MspInit+0x248>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f08:	4b16      	ldr	r3, [pc, #88]	; (8000f64 <HAL_UART_MspInit+0x248>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8000f0e:	4815      	ldr	r0, [pc, #84]	; (8000f64 <HAL_UART_MspInit+0x248>)
 8000f10:	f000 fa26 	bl	8001360 <HAL_DMA_Init>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d001      	beq.n	8000f1e <HAL_UART_MspInit+0x202>
      Error_Handler();
 8000f1a:	f7ff fc7b 	bl	8000814 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart3_rx);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	4a10      	ldr	r2, [pc, #64]	; (8000f64 <HAL_UART_MspInit+0x248>)
 8000f22:	639a      	str	r2, [r3, #56]	; 0x38
 8000f24:	4a0f      	ldr	r2, [pc, #60]	; (8000f64 <HAL_UART_MspInit+0x248>)
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	2027      	movs	r0, #39	; 0x27
 8000f30:	f000 f9df 	bl	80012f2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000f34:	2027      	movs	r0, #39	; 0x27
 8000f36:	f000 f9f8 	bl	800132a <HAL_NVIC_EnableIRQ>
}
 8000f3a:	bf00      	nop
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40011000 	.word	0x40011000
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40020000 	.word	0x40020000
 8000f50:	2000020c 	.word	0x2000020c
 8000f54:	40026440 	.word	0x40026440
 8000f58:	40004400 	.word	0x40004400
 8000f5c:	40004800 	.word	0x40004800
 8000f60:	40020400 	.word	0x40020400
 8000f64:	2000026c 	.word	0x2000026c
 8000f68:	40026028 	.word	0x40026028

08000f6c <u1_printf>:
  /* USER CODE END USART3_MspDeInit 1 */
  }
}

/* USER CODE BEGIN 1 */
void u1_printf(char *fmt, ...) {
 8000f6c:	b40f      	push	{r0, r1, r2, r3}
 8000f6e:	b580      	push	{r7, lr}
 8000f70:	b0b4      	sub	sp, #208	; 0xd0
 8000f72:	af00      	add	r7, sp, #0
	uint16_t len;
	va_list ap;
	va_start(ap, fmt);
 8000f74:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f78:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	uint8_t buf[200];
	vsprintf((char*) buf, fmt, ap);
 8000f7c:	463b      	mov	r3, r7
 8000f7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8000f82:	f8d7 10d8 	ldr.w	r1, [r7, #216]	; 0xd8
 8000f86:	4618      	mov	r0, r3
 8000f88:	f003 fcf0 	bl	800496c <vsiprintf>
	va_end(ap);
	len = strlen((char*) buf);
 8000f8c:	463b      	mov	r3, r7
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff f91e 	bl	80001d0 <strlen>
 8000f94:	4603      	mov	r3, r0
 8000f96:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
	HAL_UART_Transmit(&huart1, buf, len, HAL_MAX_DELAY); //若使用了其他UART通道，将对应通道（参�????1）修改即可�?�该函数在（6.补充）中会进行说明�??
 8000f9a:	f8b7 20ce 	ldrh.w	r2, [r7, #206]	; 0xce
 8000f9e:	4639      	mov	r1, r7
 8000fa0:	f04f 33ff 	mov.w	r3, #4294967295
 8000fa4:	4804      	ldr	r0, [pc, #16]	; (8000fb8 <u1_printf+0x4c>)
 8000fa6:	f002 fae4 	bl	8003572 <HAL_UART_Transmit>
}
 8000faa:	bf00      	nop
 8000fac:	37d0      	adds	r7, #208	; 0xd0
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000fb4:	b004      	add	sp, #16
 8000fb6:	4770      	bx	lr
 8000fb8:	20000140 	.word	0x20000140

08000fbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000fbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ff4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fc0:	480d      	ldr	r0, [pc, #52]	; (8000ff8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fc2:	490e      	ldr	r1, [pc, #56]	; (8000ffc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fc4:	4a0e      	ldr	r2, [pc, #56]	; (8001000 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000fd8:	4c0b      	ldr	r4, [pc, #44]	; (8001008 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000fe6:	f7ff fccb 	bl	8000980 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fea:	f003 fc7d 	bl	80048e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fee:	f7ff fb75 	bl	80006dc <main>
  bx  lr    
 8000ff2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000ff4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ff8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ffc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001000:	080052bc 	.word	0x080052bc
  ldr r2, =_sbss
 8001004:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001008:	200002e0 	.word	0x200002e0

0800100c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800100c:	e7fe      	b.n	800100c <ADC_IRQHandler>
	...

08001010 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001014:	4b0e      	ldr	r3, [pc, #56]	; (8001050 <HAL_Init+0x40>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a0d      	ldr	r2, [pc, #52]	; (8001050 <HAL_Init+0x40>)
 800101a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800101e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001020:	4b0b      	ldr	r3, [pc, #44]	; (8001050 <HAL_Init+0x40>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a0a      	ldr	r2, [pc, #40]	; (8001050 <HAL_Init+0x40>)
 8001026:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800102a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800102c:	4b08      	ldr	r3, [pc, #32]	; (8001050 <HAL_Init+0x40>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a07      	ldr	r2, [pc, #28]	; (8001050 <HAL_Init+0x40>)
 8001032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001036:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001038:	2003      	movs	r0, #3
 800103a:	f000 f94f 	bl	80012dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800103e:	200f      	movs	r0, #15
 8001040:	f000 f808 	bl	8001054 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001044:	f7ff fbec 	bl	8000820 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001048:	2300      	movs	r3, #0
}
 800104a:	4618      	mov	r0, r3
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	40023c00 	.word	0x40023c00

08001054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800105c:	4b12      	ldr	r3, [pc, #72]	; (80010a8 <HAL_InitTick+0x54>)
 800105e:	681a      	ldr	r2, [r3, #0]
 8001060:	4b12      	ldr	r3, [pc, #72]	; (80010ac <HAL_InitTick+0x58>)
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	4619      	mov	r1, r3
 8001066:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106a:	fbb3 f3f1 	udiv	r3, r3, r1
 800106e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001072:	4618      	mov	r0, r3
 8001074:	f000 f967 	bl	8001346 <HAL_SYSTICK_Config>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800107e:	2301      	movs	r3, #1
 8001080:	e00e      	b.n	80010a0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2b0f      	cmp	r3, #15
 8001086:	d80a      	bhi.n	800109e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001088:	2200      	movs	r2, #0
 800108a:	6879      	ldr	r1, [r7, #4]
 800108c:	f04f 30ff 	mov.w	r0, #4294967295
 8001090:	f000 f92f 	bl	80012f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001094:	4a06      	ldr	r2, [pc, #24]	; (80010b0 <HAL_InitTick+0x5c>)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800109a:	2300      	movs	r3, #0
 800109c:	e000      	b.n	80010a0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800109e:	2301      	movs	r3, #1
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3708      	adds	r7, #8
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	20000004 	.word	0x20000004
 80010ac:	2000000c 	.word	0x2000000c
 80010b0:	20000008 	.word	0x20000008

080010b4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010b8:	4b06      	ldr	r3, [pc, #24]	; (80010d4 <HAL_IncTick+0x20>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	461a      	mov	r2, r3
 80010be:	4b06      	ldr	r3, [pc, #24]	; (80010d8 <HAL_IncTick+0x24>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	4413      	add	r3, r2
 80010c4:	4a04      	ldr	r2, [pc, #16]	; (80010d8 <HAL_IncTick+0x24>)
 80010c6:	6013      	str	r3, [r2, #0]
}
 80010c8:	bf00      	nop
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	2000000c 	.word	0x2000000c
 80010d8:	200002cc 	.word	0x200002cc

080010dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  return uwTick;
 80010e0:	4b03      	ldr	r3, [pc, #12]	; (80010f0 <HAL_GetTick+0x14>)
 80010e2:	681b      	ldr	r3, [r3, #0]
}
 80010e4:	4618      	mov	r0, r3
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	200002cc 	.word	0x200002cc

080010f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010fc:	f7ff ffee 	bl	80010dc <HAL_GetTick>
 8001100:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800110c:	d005      	beq.n	800111a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800110e:	4b0a      	ldr	r3, [pc, #40]	; (8001138 <HAL_Delay+0x44>)
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	4413      	add	r3, r2
 8001118:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800111a:	bf00      	nop
 800111c:	f7ff ffde 	bl	80010dc <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	68fa      	ldr	r2, [r7, #12]
 8001128:	429a      	cmp	r2, r3
 800112a:	d8f7      	bhi.n	800111c <HAL_Delay+0x28>
  {
  }
}
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	3710      	adds	r7, #16
 8001132:	46bd      	mov	sp, r7
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	2000000c 	.word	0x2000000c

0800113c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800113c:	b480      	push	{r7}
 800113e:	b085      	sub	sp, #20
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f003 0307 	and.w	r3, r3, #7
 800114a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800114c:	4b0c      	ldr	r3, [pc, #48]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 800114e:	68db      	ldr	r3, [r3, #12]
 8001150:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001152:	68ba      	ldr	r2, [r7, #8]
 8001154:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001158:	4013      	ands	r3, r2
 800115a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001160:	68bb      	ldr	r3, [r7, #8]
 8001162:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001164:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001168:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800116c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800116e:	4a04      	ldr	r2, [pc, #16]	; (8001180 <__NVIC_SetPriorityGrouping+0x44>)
 8001170:	68bb      	ldr	r3, [r7, #8]
 8001172:	60d3      	str	r3, [r2, #12]
}
 8001174:	bf00      	nop
 8001176:	3714      	adds	r7, #20
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001184:	b480      	push	{r7}
 8001186:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001188:	4b04      	ldr	r3, [pc, #16]	; (800119c <__NVIC_GetPriorityGrouping+0x18>)
 800118a:	68db      	ldr	r3, [r3, #12]
 800118c:	0a1b      	lsrs	r3, r3, #8
 800118e:	f003 0307 	and.w	r3, r3, #7
}
 8001192:	4618      	mov	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119a:	4770      	bx	lr
 800119c:	e000ed00 	.word	0xe000ed00

080011a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	db0b      	blt.n	80011ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	f003 021f 	and.w	r2, r3, #31
 80011b8:	4907      	ldr	r1, [pc, #28]	; (80011d8 <__NVIC_EnableIRQ+0x38>)
 80011ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011be:	095b      	lsrs	r3, r3, #5
 80011c0:	2001      	movs	r0, #1
 80011c2:	fa00 f202 	lsl.w	r2, r0, r2
 80011c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011ca:	bf00      	nop
 80011cc:	370c      	adds	r7, #12
 80011ce:	46bd      	mov	sp, r7
 80011d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d4:	4770      	bx	lr
 80011d6:	bf00      	nop
 80011d8:	e000e100 	.word	0xe000e100

080011dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011dc:	b480      	push	{r7}
 80011de:	b083      	sub	sp, #12
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	4603      	mov	r3, r0
 80011e4:	6039      	str	r1, [r7, #0]
 80011e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011ec:	2b00      	cmp	r3, #0
 80011ee:	db0a      	blt.n	8001206 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	b2da      	uxtb	r2, r3
 80011f4:	490c      	ldr	r1, [pc, #48]	; (8001228 <__NVIC_SetPriority+0x4c>)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	0112      	lsls	r2, r2, #4
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	440b      	add	r3, r1
 8001200:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001204:	e00a      	b.n	800121c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001206:	683b      	ldr	r3, [r7, #0]
 8001208:	b2da      	uxtb	r2, r3
 800120a:	4908      	ldr	r1, [pc, #32]	; (800122c <__NVIC_SetPriority+0x50>)
 800120c:	79fb      	ldrb	r3, [r7, #7]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	3b04      	subs	r3, #4
 8001214:	0112      	lsls	r2, r2, #4
 8001216:	b2d2      	uxtb	r2, r2
 8001218:	440b      	add	r3, r1
 800121a:	761a      	strb	r2, [r3, #24]
}
 800121c:	bf00      	nop
 800121e:	370c      	adds	r7, #12
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	e000e100 	.word	0xe000e100
 800122c:	e000ed00 	.word	0xe000ed00

08001230 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b480      	push	{r7}
 8001232:	b089      	sub	sp, #36	; 0x24
 8001234:	af00      	add	r7, sp, #0
 8001236:	60f8      	str	r0, [r7, #12]
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f003 0307 	and.w	r3, r3, #7
 8001242:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001244:	69fb      	ldr	r3, [r7, #28]
 8001246:	f1c3 0307 	rsb	r3, r3, #7
 800124a:	2b04      	cmp	r3, #4
 800124c:	bf28      	it	cs
 800124e:	2304      	movcs	r3, #4
 8001250:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	3304      	adds	r3, #4
 8001256:	2b06      	cmp	r3, #6
 8001258:	d902      	bls.n	8001260 <NVIC_EncodePriority+0x30>
 800125a:	69fb      	ldr	r3, [r7, #28]
 800125c:	3b03      	subs	r3, #3
 800125e:	e000      	b.n	8001262 <NVIC_EncodePriority+0x32>
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	f04f 32ff 	mov.w	r2, #4294967295
 8001268:	69bb      	ldr	r3, [r7, #24]
 800126a:	fa02 f303 	lsl.w	r3, r2, r3
 800126e:	43da      	mvns	r2, r3
 8001270:	68bb      	ldr	r3, [r7, #8]
 8001272:	401a      	ands	r2, r3
 8001274:	697b      	ldr	r3, [r7, #20]
 8001276:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001278:	f04f 31ff 	mov.w	r1, #4294967295
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	fa01 f303 	lsl.w	r3, r1, r3
 8001282:	43d9      	mvns	r1, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	4313      	orrs	r3, r2
         );
}
 800128a:	4618      	mov	r0, r3
 800128c:	3724      	adds	r7, #36	; 0x24
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
	...

08001298 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	3b01      	subs	r3, #1
 80012a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012a8:	d301      	bcc.n	80012ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012aa:	2301      	movs	r3, #1
 80012ac:	e00f      	b.n	80012ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <SysTick_Config+0x40>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	3b01      	subs	r3, #1
 80012b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012b6:	210f      	movs	r1, #15
 80012b8:	f04f 30ff 	mov.w	r0, #4294967295
 80012bc:	f7ff ff8e 	bl	80011dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012c0:	4b05      	ldr	r3, [pc, #20]	; (80012d8 <SysTick_Config+0x40>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012c6:	4b04      	ldr	r3, [pc, #16]	; (80012d8 <SysTick_Config+0x40>)
 80012c8:	2207      	movs	r2, #7
 80012ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3708      	adds	r7, #8
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}
 80012d6:	bf00      	nop
 80012d8:	e000e010 	.word	0xe000e010

080012dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b082      	sub	sp, #8
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f7ff ff29 	bl	800113c <__NVIC_SetPriorityGrouping>
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012f2:	b580      	push	{r7, lr}
 80012f4:	b086      	sub	sp, #24
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	4603      	mov	r3, r0
 80012fa:	60b9      	str	r1, [r7, #8]
 80012fc:	607a      	str	r2, [r7, #4]
 80012fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001300:	2300      	movs	r3, #0
 8001302:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001304:	f7ff ff3e 	bl	8001184 <__NVIC_GetPriorityGrouping>
 8001308:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800130a:	687a      	ldr	r2, [r7, #4]
 800130c:	68b9      	ldr	r1, [r7, #8]
 800130e:	6978      	ldr	r0, [r7, #20]
 8001310:	f7ff ff8e 	bl	8001230 <NVIC_EncodePriority>
 8001314:	4602      	mov	r2, r0
 8001316:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800131a:	4611      	mov	r1, r2
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff ff5d 	bl	80011dc <__NVIC_SetPriority>
}
 8001322:	bf00      	nop
 8001324:	3718      	adds	r7, #24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd80      	pop	{r7, pc}

0800132a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800132a:	b580      	push	{r7, lr}
 800132c:	b082      	sub	sp, #8
 800132e:	af00      	add	r7, sp, #0
 8001330:	4603      	mov	r3, r0
 8001332:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001334:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001338:	4618      	mov	r0, r3
 800133a:	f7ff ff31 	bl	80011a0 <__NVIC_EnableIRQ>
}
 800133e:	bf00      	nop
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}

08001346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001346:	b580      	push	{r7, lr}
 8001348:	b082      	sub	sp, #8
 800134a:	af00      	add	r7, sp, #0
 800134c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800134e:	6878      	ldr	r0, [r7, #4]
 8001350:	f7ff ffa2 	bl	8001298 <SysTick_Config>
 8001354:	4603      	mov	r3, r0
}
 8001356:	4618      	mov	r0, r3
 8001358:	3708      	adds	r7, #8
 800135a:	46bd      	mov	sp, r7
 800135c:	bd80      	pop	{r7, pc}
	...

08001360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b086      	sub	sp, #24
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001368:	2300      	movs	r3, #0
 800136a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800136c:	f7ff feb6 	bl	80010dc <HAL_GetTick>
 8001370:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d101      	bne.n	800137c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001378:	2301      	movs	r3, #1
 800137a:	e099      	b.n	80014b0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2202      	movs	r2, #2
 8001380:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	2200      	movs	r2, #0
 8001388:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	681a      	ldr	r2, [r3, #0]
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f022 0201 	bic.w	r2, r2, #1
 800139a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800139c:	e00f      	b.n	80013be <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800139e:	f7ff fe9d 	bl	80010dc <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	2b05      	cmp	r3, #5
 80013aa:	d908      	bls.n	80013be <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2220      	movs	r2, #32
 80013b0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2203      	movs	r2, #3
 80013b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80013ba:	2303      	movs	r3, #3
 80013bc:	e078      	b.n	80014b0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d1e8      	bne.n	800139e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013d4:	697a      	ldr	r2, [r7, #20]
 80013d6:	4b38      	ldr	r3, [pc, #224]	; (80014b8 <HAL_DMA_Init+0x158>)
 80013d8:	4013      	ands	r3, r2
 80013da:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	685a      	ldr	r2, [r3, #4]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	691b      	ldr	r3, [r3, #16]
 80013f0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	699b      	ldr	r3, [r3, #24]
 80013fc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001402:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	6a1b      	ldr	r3, [r3, #32]
 8001408:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	4313      	orrs	r3, r2
 800140e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001414:	2b04      	cmp	r3, #4
 8001416:	d107      	bne.n	8001428 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	4313      	orrs	r3, r2
 8001422:	697a      	ldr	r2, [r7, #20]
 8001424:	4313      	orrs	r3, r2
 8001426:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	697a      	ldr	r2, [r7, #20]
 800142e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	695b      	ldr	r3, [r3, #20]
 8001436:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	f023 0307 	bic.w	r3, r3, #7
 800143e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001444:	697a      	ldr	r2, [r7, #20]
 8001446:	4313      	orrs	r3, r2
 8001448:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144e:	2b04      	cmp	r3, #4
 8001450:	d117      	bne.n	8001482 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001456:	697a      	ldr	r2, [r7, #20]
 8001458:	4313      	orrs	r3, r2
 800145a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	2b00      	cmp	r3, #0
 8001462:	d00e      	beq.n	8001482 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 fb01 	bl	8001a6c <DMA_CheckFifoParam>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d008      	beq.n	8001482 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	2240      	movs	r2, #64	; 0x40
 8001474:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2201      	movs	r2, #1
 800147a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800147e:	2301      	movs	r3, #1
 8001480:	e016      	b.n	80014b0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	697a      	ldr	r2, [r7, #20]
 8001488:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	f000 fab8 	bl	8001a00 <DMA_CalcBaseAndBitshift>
 8001490:	4603      	mov	r3, r0
 8001492:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001498:	223f      	movs	r2, #63	; 0x3f
 800149a:	409a      	lsls	r2, r3
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2200      	movs	r2, #0
 80014a4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	2201      	movs	r2, #1
 80014aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80014ae:	2300      	movs	r3, #0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	f010803f 	.word	0xf010803f

080014bc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
 80014c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80014ca:	2300      	movs	r3, #0
 80014cc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80014da:	2b01      	cmp	r3, #1
 80014dc:	d101      	bne.n	80014e2 <HAL_DMA_Start_IT+0x26>
 80014de:	2302      	movs	r3, #2
 80014e0:	e040      	b.n	8001564 <HAL_DMA_Start_IT+0xa8>
 80014e2:	68fb      	ldr	r3, [r7, #12]
 80014e4:	2201      	movs	r2, #1
 80014e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d12f      	bne.n	8001556 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	2202      	movs	r2, #2
 80014fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2200      	movs	r2, #0
 8001502:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001504:	683b      	ldr	r3, [r7, #0]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	68b9      	ldr	r1, [r7, #8]
 800150a:	68f8      	ldr	r0, [r7, #12]
 800150c:	f000 fa4a 	bl	80019a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001514:	223f      	movs	r2, #63	; 0x3f
 8001516:	409a      	lsls	r2, r3
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f042 0216 	orr.w	r2, r2, #22
 800152a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001530:	2b00      	cmp	r3, #0
 8001532:	d007      	beq.n	8001544 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f042 0208 	orr.w	r2, r2, #8
 8001542:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681a      	ldr	r2, [r3, #0]
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f042 0201 	orr.w	r2, r2, #1
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	e005      	b.n	8001562 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2200      	movs	r2, #0
 800155a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800155e:	2302      	movs	r3, #2
 8001560:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001562:	7dfb      	ldrb	r3, [r7, #23]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}

0800156c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001578:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800157a:	f7ff fdaf 	bl	80010dc <HAL_GetTick>
 800157e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001586:	b2db      	uxtb	r3, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d008      	beq.n	800159e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	2280      	movs	r2, #128	; 0x80
 8001590:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2200      	movs	r2, #0
 8001596:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e052      	b.n	8001644 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0216 	bic.w	r2, r2, #22
 80015ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	695a      	ldr	r2, [r3, #20]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80015bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d103      	bne.n	80015ce <HAL_DMA_Abort+0x62>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d007      	beq.n	80015de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	681a      	ldr	r2, [r3, #0]
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f022 0208 	bic.w	r2, r2, #8
 80015dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	681a      	ldr	r2, [r3, #0]
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f022 0201 	bic.w	r2, r2, #1
 80015ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80015ee:	e013      	b.n	8001618 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80015f0:	f7ff fd74 	bl	80010dc <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68bb      	ldr	r3, [r7, #8]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b05      	cmp	r3, #5
 80015fc:	d90c      	bls.n	8001618 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2220      	movs	r2, #32
 8001602:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2203      	movs	r2, #3
 8001608:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	2200      	movs	r2, #0
 8001610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001614:	2303      	movs	r3, #3
 8001616:	e015      	b.n	8001644 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f003 0301 	and.w	r3, r3, #1
 8001622:	2b00      	cmp	r3, #0
 8001624:	d1e4      	bne.n	80015f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162a:	223f      	movs	r2, #63	; 0x3f
 800162c:	409a      	lsls	r2, r3
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2201      	movs	r2, #1
 8001636:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2200      	movs	r2, #0
 800163e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001642:	2300      	movs	r3, #0
}
 8001644:	4618      	mov	r0, r3
 8001646:	3710      	adds	r7, #16
 8001648:	46bd      	mov	sp, r7
 800164a:	bd80      	pop	{r7, pc}

0800164c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800164c:	b480      	push	{r7}
 800164e:	b083      	sub	sp, #12
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b02      	cmp	r3, #2
 800165e:	d004      	beq.n	800166a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2280      	movs	r2, #128	; 0x80
 8001664:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001666:	2301      	movs	r3, #1
 8001668:	e00c      	b.n	8001684 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	2205      	movs	r2, #5
 800166e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0201 	bic.w	r2, r2, #1
 8001680:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr

08001690 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b086      	sub	sp, #24
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001698:	2300      	movs	r3, #0
 800169a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800169c:	4b8e      	ldr	r3, [pc, #568]	; (80018d8 <HAL_DMA_IRQHandler+0x248>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a8e      	ldr	r2, [pc, #568]	; (80018dc <HAL_DMA_IRQHandler+0x24c>)
 80016a2:	fba2 2303 	umull	r2, r3, r2, r3
 80016a6:	0a9b      	lsrs	r3, r3, #10
 80016a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016ba:	2208      	movs	r2, #8
 80016bc:	409a      	lsls	r2, r3
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	4013      	ands	r3, r2
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d01a      	beq.n	80016fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f003 0304 	and.w	r3, r3, #4
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d013      	beq.n	80016fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	681a      	ldr	r2, [r3, #0]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f022 0204 	bic.w	r2, r2, #4
 80016e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016e8:	2208      	movs	r2, #8
 80016ea:	409a      	lsls	r2, r3
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016f4:	f043 0201 	orr.w	r2, r3, #1
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001700:	2201      	movs	r2, #1
 8001702:	409a      	lsls	r2, r3
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	4013      	ands	r3, r2
 8001708:	2b00      	cmp	r3, #0
 800170a:	d012      	beq.n	8001732 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	695b      	ldr	r3, [r3, #20]
 8001712:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00b      	beq.n	8001732 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800171e:	2201      	movs	r2, #1
 8001720:	409a      	lsls	r2, r3
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800172a:	f043 0202 	orr.w	r2, r3, #2
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001736:	2204      	movs	r2, #4
 8001738:	409a      	lsls	r2, r3
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	4013      	ands	r3, r2
 800173e:	2b00      	cmp	r3, #0
 8001740:	d012      	beq.n	8001768 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f003 0302 	and.w	r3, r3, #2
 800174c:	2b00      	cmp	r3, #0
 800174e:	d00b      	beq.n	8001768 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001754:	2204      	movs	r2, #4
 8001756:	409a      	lsls	r2, r3
 8001758:	693b      	ldr	r3, [r7, #16]
 800175a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001760:	f043 0204 	orr.w	r2, r3, #4
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800176c:	2210      	movs	r2, #16
 800176e:	409a      	lsls	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4013      	ands	r3, r2
 8001774:	2b00      	cmp	r3, #0
 8001776:	d043      	beq.n	8001800 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f003 0308 	and.w	r3, r3, #8
 8001782:	2b00      	cmp	r3, #0
 8001784:	d03c      	beq.n	8001800 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800178a:	2210      	movs	r2, #16
 800178c:	409a      	lsls	r2, r3
 800178e:	693b      	ldr	r3, [r7, #16]
 8001790:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800179c:	2b00      	cmp	r3, #0
 800179e:	d018      	beq.n	80017d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d108      	bne.n	80017c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d024      	beq.n	8001800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	4798      	blx	r3
 80017be:	e01f      	b.n	8001800 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d01b      	beq.n	8001800 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	4798      	blx	r3
 80017d0:	e016      	b.n	8001800 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d107      	bne.n	80017f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	681a      	ldr	r2, [r3, #0]
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f022 0208 	bic.w	r2, r2, #8
 80017ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d003      	beq.n	8001800 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fc:	6878      	ldr	r0, [r7, #4]
 80017fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001804:	2220      	movs	r2, #32
 8001806:	409a      	lsls	r2, r3
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	4013      	ands	r3, r2
 800180c:	2b00      	cmp	r3, #0
 800180e:	f000 808f 	beq.w	8001930 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0310 	and.w	r3, r3, #16
 800181c:	2b00      	cmp	r3, #0
 800181e:	f000 8087 	beq.w	8001930 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001826:	2220      	movs	r2, #32
 8001828:	409a      	lsls	r2, r3
 800182a:	693b      	ldr	r3, [r7, #16]
 800182c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001834:	b2db      	uxtb	r3, r3
 8001836:	2b05      	cmp	r3, #5
 8001838:	d136      	bne.n	80018a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	681a      	ldr	r2, [r3, #0]
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f022 0216 	bic.w	r2, r2, #22
 8001848:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	695a      	ldr	r2, [r3, #20]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001858:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185e:	2b00      	cmp	r3, #0
 8001860:	d103      	bne.n	800186a <HAL_DMA_IRQHandler+0x1da>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001866:	2b00      	cmp	r3, #0
 8001868:	d007      	beq.n	800187a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	681a      	ldr	r2, [r3, #0]
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	f022 0208 	bic.w	r2, r2, #8
 8001878:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800187e:	223f      	movs	r2, #63	; 0x3f
 8001880:	409a      	lsls	r2, r3
 8001882:	693b      	ldr	r3, [r7, #16]
 8001884:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2201      	movs	r2, #1
 800188a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800189a:	2b00      	cmp	r3, #0
 800189c:	d07e      	beq.n	800199c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	4798      	blx	r3
        }
        return;
 80018a6:	e079      	b.n	800199c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d01d      	beq.n	80018f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d10d      	bne.n	80018e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d031      	beq.n	8001930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d0:	6878      	ldr	r0, [r7, #4]
 80018d2:	4798      	blx	r3
 80018d4:	e02c      	b.n	8001930 <HAL_DMA_IRQHandler+0x2a0>
 80018d6:	bf00      	nop
 80018d8:	20000004 	.word	0x20000004
 80018dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d023      	beq.n	8001930 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ec:	6878      	ldr	r0, [r7, #4]
 80018ee:	4798      	blx	r3
 80018f0:	e01e      	b.n	8001930 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d10f      	bne.n	8001920 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	681a      	ldr	r2, [r3, #0]
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f022 0210 	bic.w	r2, r2, #16
 800190e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	2201      	movs	r2, #1
 8001914:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800192c:	6878      	ldr	r0, [r7, #4]
 800192e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001934:	2b00      	cmp	r3, #0
 8001936:	d032      	beq.n	800199e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d022      	beq.n	800198a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2205      	movs	r2, #5
 8001948:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	681a      	ldr	r2, [r3, #0]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f022 0201 	bic.w	r2, r2, #1
 800195a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800195c:	68bb      	ldr	r3, [r7, #8]
 800195e:	3301      	adds	r3, #1
 8001960:	60bb      	str	r3, [r7, #8]
 8001962:	697a      	ldr	r2, [r7, #20]
 8001964:	429a      	cmp	r2, r3
 8001966:	d307      	bcc.n	8001978 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f003 0301 	and.w	r3, r3, #1
 8001972:	2b00      	cmp	r3, #0
 8001974:	d1f2      	bne.n	800195c <HAL_DMA_IRQHandler+0x2cc>
 8001976:	e000      	b.n	800197a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001978:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2201      	movs	r2, #1
 800197e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	2b00      	cmp	r3, #0
 8001990:	d005      	beq.n	800199e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	4798      	blx	r3
 800199a:	e000      	b.n	800199e <HAL_DMA_IRQHandler+0x30e>
        return;
 800199c:	bf00      	nop
    }
  }
}
 800199e:	3718      	adds	r7, #24
 80019a0:	46bd      	mov	sp, r7
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	60f8      	str	r0, [r7, #12]
 80019ac:	60b9      	str	r1, [r7, #8]
 80019ae:	607a      	str	r2, [r7, #4]
 80019b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80019c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	683a      	ldr	r2, [r7, #0]
 80019c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	689b      	ldr	r3, [r3, #8]
 80019ce:	2b40      	cmp	r3, #64	; 0x40
 80019d0:	d108      	bne.n	80019e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	687a      	ldr	r2, [r7, #4]
 80019d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	68ba      	ldr	r2, [r7, #8]
 80019e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80019e2:	e007      	b.n	80019f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	68ba      	ldr	r2, [r7, #8]
 80019ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	687a      	ldr	r2, [r7, #4]
 80019f2:	60da      	str	r2, [r3, #12]
}
 80019f4:	bf00      	nop
 80019f6:	3714      	adds	r7, #20
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr

08001a00 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b085      	sub	sp, #20
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	3b10      	subs	r3, #16
 8001a10:	4a14      	ldr	r2, [pc, #80]	; (8001a64 <DMA_CalcBaseAndBitshift+0x64>)
 8001a12:	fba2 2303 	umull	r2, r3, r2, r3
 8001a16:	091b      	lsrs	r3, r3, #4
 8001a18:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a1a:	4a13      	ldr	r2, [pc, #76]	; (8001a68 <DMA_CalcBaseAndBitshift+0x68>)
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	4413      	add	r3, r2
 8001a20:	781b      	ldrb	r3, [r3, #0]
 8001a22:	461a      	mov	r2, r3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d909      	bls.n	8001a42 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a36:	f023 0303 	bic.w	r3, r3, #3
 8001a3a:	1d1a      	adds	r2, r3, #4
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	659a      	str	r2, [r3, #88]	; 0x58
 8001a40:	e007      	b.n	8001a52 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001a4a:	f023 0303 	bic.w	r3, r3, #3
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3714      	adds	r7, #20
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr
 8001a62:	bf00      	nop
 8001a64:	aaaaaaab 	.word	0xaaaaaaab
 8001a68:	08005270 	.word	0x08005270

08001a6c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a74:	2300      	movs	r3, #0
 8001a76:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a7c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	699b      	ldr	r3, [r3, #24]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d11f      	bne.n	8001ac6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	2b03      	cmp	r3, #3
 8001a8a:	d856      	bhi.n	8001b3a <DMA_CheckFifoParam+0xce>
 8001a8c:	a201      	add	r2, pc, #4	; (adr r2, 8001a94 <DMA_CheckFifoParam+0x28>)
 8001a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a92:	bf00      	nop
 8001a94:	08001aa5 	.word	0x08001aa5
 8001a98:	08001ab7 	.word	0x08001ab7
 8001a9c:	08001aa5 	.word	0x08001aa5
 8001aa0:	08001b3b 	.word	0x08001b3b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d046      	beq.n	8001b3e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ab4:	e043      	b.n	8001b3e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001abe:	d140      	bne.n	8001b42 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001ac4:	e03d      	b.n	8001b42 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001ace:	d121      	bne.n	8001b14 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001ad0:	68bb      	ldr	r3, [r7, #8]
 8001ad2:	2b03      	cmp	r3, #3
 8001ad4:	d837      	bhi.n	8001b46 <DMA_CheckFifoParam+0xda>
 8001ad6:	a201      	add	r2, pc, #4	; (adr r2, 8001adc <DMA_CheckFifoParam+0x70>)
 8001ad8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001adc:	08001aed 	.word	0x08001aed
 8001ae0:	08001af3 	.word	0x08001af3
 8001ae4:	08001aed 	.word	0x08001aed
 8001ae8:	08001b05 	.word	0x08001b05
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	73fb      	strb	r3, [r7, #15]
      break;
 8001af0:	e030      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d025      	beq.n	8001b4a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b02:	e022      	b.n	8001b4a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b08:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b0c:	d11f      	bne.n	8001b4e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b12:	e01c      	b.n	8001b4e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b14:	68bb      	ldr	r3, [r7, #8]
 8001b16:	2b02      	cmp	r3, #2
 8001b18:	d903      	bls.n	8001b22 <DMA_CheckFifoParam+0xb6>
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	2b03      	cmp	r3, #3
 8001b1e:	d003      	beq.n	8001b28 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b20:	e018      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	73fb      	strb	r3, [r7, #15]
      break;
 8001b26:	e015      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b2c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d00e      	beq.n	8001b52 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b34:	2301      	movs	r3, #1
 8001b36:	73fb      	strb	r3, [r7, #15]
      break;
 8001b38:	e00b      	b.n	8001b52 <DMA_CheckFifoParam+0xe6>
      break;
 8001b3a:	bf00      	nop
 8001b3c:	e00a      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
      break;
 8001b3e:	bf00      	nop
 8001b40:	e008      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
      break;
 8001b42:	bf00      	nop
 8001b44:	e006      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
      break;
 8001b46:	bf00      	nop
 8001b48:	e004      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
      break;
 8001b4a:	bf00      	nop
 8001b4c:	e002      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
      break;   
 8001b4e:	bf00      	nop
 8001b50:	e000      	b.n	8001b54 <DMA_CheckFifoParam+0xe8>
      break;
 8001b52:	bf00      	nop
    }
  } 
  
  return status; 
 8001b54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3714      	adds	r7, #20
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop

08001b64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b089      	sub	sp, #36	; 0x24
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	6078      	str	r0, [r7, #4]
 8001b6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b76:	2300      	movs	r3, #0
 8001b78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	61fb      	str	r3, [r7, #28]
 8001b7e:	e16b      	b.n	8001e58 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b80:	2201      	movs	r2, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	697a      	ldr	r2, [r7, #20]
 8001b90:	4013      	ands	r3, r2
 8001b92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b94:	693a      	ldr	r2, [r7, #16]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	429a      	cmp	r2, r3
 8001b9a:	f040 815a 	bne.w	8001e52 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b9e:	683b      	ldr	r3, [r7, #0]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d005      	beq.n	8001bb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d130      	bne.n	8001c18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	69ba      	ldr	r2, [r7, #24]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	68da      	ldr	r2, [r3, #12]
 8001bd2:	69fb      	ldr	r3, [r7, #28]
 8001bd4:	005b      	lsls	r3, r3, #1
 8001bd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bda:	69ba      	ldr	r2, [r7, #24]
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	69ba      	ldr	r2, [r7, #24]
 8001be4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bec:	2201      	movs	r2, #1
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	091b      	lsrs	r3, r3, #4
 8001c02:	f003 0201 	and.w	r2, r3, #1
 8001c06:	69fb      	ldr	r3, [r7, #28]
 8001c08:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4313      	orrs	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	69ba      	ldr	r2, [r7, #24]
 8001c16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	f003 0303 	and.w	r3, r3, #3
 8001c20:	2b03      	cmp	r3, #3
 8001c22:	d017      	beq.n	8001c54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	689a      	ldr	r2, [r3, #8]
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	005b      	lsls	r3, r3, #1
 8001c44:	fa02 f303 	lsl.w	r3, r2, r3
 8001c48:	69ba      	ldr	r2, [r7, #24]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	f003 0303 	and.w	r3, r3, #3
 8001c5c:	2b02      	cmp	r3, #2
 8001c5e:	d123      	bne.n	8001ca8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	08da      	lsrs	r2, r3, #3
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	3208      	adds	r2, #8
 8001c68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	220f      	movs	r2, #15
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	4013      	ands	r3, r2
 8001c82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	691a      	ldr	r2, [r3, #16]
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	009b      	lsls	r3, r3, #2
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	08da      	lsrs	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	3208      	adds	r2, #8
 8001ca2:	69b9      	ldr	r1, [r7, #24]
 8001ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	69ba      	ldr	r2, [r7, #24]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f003 0203 	and.w	r2, r3, #3
 8001cc8:	69fb      	ldr	r3, [r7, #28]
 8001cca:	005b      	lsls	r3, r3, #1
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	69ba      	ldr	r2, [r7, #24]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cdc:	683b      	ldr	r3, [r7, #0]
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	f000 80b4 	beq.w	8001e52 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
 8001cee:	4b60      	ldr	r3, [pc, #384]	; (8001e70 <HAL_GPIO_Init+0x30c>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4a5f      	ldr	r2, [pc, #380]	; (8001e70 <HAL_GPIO_Init+0x30c>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfa:	4b5d      	ldr	r3, [pc, #372]	; (8001e70 <HAL_GPIO_Init+0x30c>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d02:	60fb      	str	r3, [r7, #12]
 8001d04:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d06:	4a5b      	ldr	r2, [pc, #364]	; (8001e74 <HAL_GPIO_Init+0x310>)
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	089b      	lsrs	r3, r3, #2
 8001d0c:	3302      	adds	r3, #2
 8001d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	f003 0303 	and.w	r3, r3, #3
 8001d1a:	009b      	lsls	r3, r3, #2
 8001d1c:	220f      	movs	r2, #15
 8001d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d22:	43db      	mvns	r3, r3
 8001d24:	69ba      	ldr	r2, [r7, #24]
 8001d26:	4013      	ands	r3, r2
 8001d28:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a52      	ldr	r2, [pc, #328]	; (8001e78 <HAL_GPIO_Init+0x314>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d02b      	beq.n	8001d8a <HAL_GPIO_Init+0x226>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a51      	ldr	r2, [pc, #324]	; (8001e7c <HAL_GPIO_Init+0x318>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d025      	beq.n	8001d86 <HAL_GPIO_Init+0x222>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a50      	ldr	r2, [pc, #320]	; (8001e80 <HAL_GPIO_Init+0x31c>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d01f      	beq.n	8001d82 <HAL_GPIO_Init+0x21e>
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	4a4f      	ldr	r2, [pc, #316]	; (8001e84 <HAL_GPIO_Init+0x320>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d019      	beq.n	8001d7e <HAL_GPIO_Init+0x21a>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	4a4e      	ldr	r2, [pc, #312]	; (8001e88 <HAL_GPIO_Init+0x324>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d013      	beq.n	8001d7a <HAL_GPIO_Init+0x216>
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4d      	ldr	r2, [pc, #308]	; (8001e8c <HAL_GPIO_Init+0x328>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d00d      	beq.n	8001d76 <HAL_GPIO_Init+0x212>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4c      	ldr	r2, [pc, #304]	; (8001e90 <HAL_GPIO_Init+0x32c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d007      	beq.n	8001d72 <HAL_GPIO_Init+0x20e>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4b      	ldr	r2, [pc, #300]	; (8001e94 <HAL_GPIO_Init+0x330>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d101      	bne.n	8001d6e <HAL_GPIO_Init+0x20a>
 8001d6a:	2307      	movs	r3, #7
 8001d6c:	e00e      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d6e:	2308      	movs	r3, #8
 8001d70:	e00c      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d72:	2306      	movs	r3, #6
 8001d74:	e00a      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d76:	2305      	movs	r3, #5
 8001d78:	e008      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d7a:	2304      	movs	r3, #4
 8001d7c:	e006      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d7e:	2303      	movs	r3, #3
 8001d80:	e004      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d82:	2302      	movs	r3, #2
 8001d84:	e002      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d86:	2301      	movs	r3, #1
 8001d88:	e000      	b.n	8001d8c <HAL_GPIO_Init+0x228>
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	69fa      	ldr	r2, [r7, #28]
 8001d8e:	f002 0203 	and.w	r2, r2, #3
 8001d92:	0092      	lsls	r2, r2, #2
 8001d94:	4093      	lsls	r3, r2
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d9c:	4935      	ldr	r1, [pc, #212]	; (8001e74 <HAL_GPIO_Init+0x310>)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	089b      	lsrs	r3, r3, #2
 8001da2:	3302      	adds	r3, #2
 8001da4:	69ba      	ldr	r2, [r7, #24]
 8001da6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001daa:	4b3b      	ldr	r3, [pc, #236]	; (8001e98 <HAL_GPIO_Init+0x334>)
 8001dac:	689b      	ldr	r3, [r3, #8]
 8001dae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	69ba      	ldr	r2, [r7, #24]
 8001db6:	4013      	ands	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d003      	beq.n	8001dce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001dc6:	69ba      	ldr	r2, [r7, #24]
 8001dc8:	693b      	ldr	r3, [r7, #16]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dce:	4a32      	ldr	r2, [pc, #200]	; (8001e98 <HAL_GPIO_Init+0x334>)
 8001dd0:	69bb      	ldr	r3, [r7, #24]
 8001dd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001dd4:	4b30      	ldr	r3, [pc, #192]	; (8001e98 <HAL_GPIO_Init+0x334>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dda:	693b      	ldr	r3, [r7, #16]
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	69ba      	ldr	r2, [r7, #24]
 8001de0:	4013      	ands	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d003      	beq.n	8001df8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	693b      	ldr	r3, [r7, #16]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001df8:	4a27      	ldr	r2, [pc, #156]	; (8001e98 <HAL_GPIO_Init+0x334>)
 8001dfa:	69bb      	ldr	r3, [r7, #24]
 8001dfc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dfe:	4b26      	ldr	r3, [pc, #152]	; (8001e98 <HAL_GPIO_Init+0x334>)
 8001e00:	685b      	ldr	r3, [r3, #4]
 8001e02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e04:	693b      	ldr	r3, [r7, #16]
 8001e06:	43db      	mvns	r3, r3
 8001e08:	69ba      	ldr	r2, [r7, #24]
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d003      	beq.n	8001e22 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e22:	4a1d      	ldr	r2, [pc, #116]	; (8001e98 <HAL_GPIO_Init+0x334>)
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e28:	4b1b      	ldr	r3, [pc, #108]	; (8001e98 <HAL_GPIO_Init+0x334>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	43db      	mvns	r3, r3
 8001e32:	69ba      	ldr	r2, [r7, #24]
 8001e34:	4013      	ands	r3, r2
 8001e36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d003      	beq.n	8001e4c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e4c:	4a12      	ldr	r2, [pc, #72]	; (8001e98 <HAL_GPIO_Init+0x334>)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	3301      	adds	r3, #1
 8001e56:	61fb      	str	r3, [r7, #28]
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	2b0f      	cmp	r3, #15
 8001e5c:	f67f ae90 	bls.w	8001b80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e60:	bf00      	nop
 8001e62:	bf00      	nop
 8001e64:	3724      	adds	r7, #36	; 0x24
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr
 8001e6e:	bf00      	nop
 8001e70:	40023800 	.word	0x40023800
 8001e74:	40013800 	.word	0x40013800
 8001e78:	40020000 	.word	0x40020000
 8001e7c:	40020400 	.word	0x40020400
 8001e80:	40020800 	.word	0x40020800
 8001e84:	40020c00 	.word	0x40020c00
 8001e88:	40021000 	.word	0x40021000
 8001e8c:	40021400 	.word	0x40021400
 8001e90:	40021800 	.word	0x40021800
 8001e94:	40021c00 	.word	0x40021c00
 8001e98:	40013c00 	.word	0x40013c00

08001e9c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e9c:	b580      	push	{r7, lr}
 8001e9e:	b086      	sub	sp, #24
 8001ea0:	af00      	add	r7, sp, #0
 8001ea2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d101      	bne.n	8001eae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e267      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 0301 	and.w	r3, r3, #1
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d075      	beq.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eba:	4b88      	ldr	r3, [pc, #544]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	f003 030c 	and.w	r3, r3, #12
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d00c      	beq.n	8001ee0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ec6:	4b85      	ldr	r3, [pc, #532]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001ece:	2b08      	cmp	r3, #8
 8001ed0:	d112      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001ed2:	4b82      	ldr	r3, [pc, #520]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ed4:	685b      	ldr	r3, [r3, #4]
 8001ed6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001eda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ede:	d10b      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee0:	4b7e      	ldr	r3, [pc, #504]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d05b      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x108>
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d157      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	e242      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f00:	d106      	bne.n	8001f10 <HAL_RCC_OscConfig+0x74>
 8001f02:	4b76      	ldr	r3, [pc, #472]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4a75      	ldr	r2, [pc, #468]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f0c:	6013      	str	r3, [r2, #0]
 8001f0e:	e01d      	b.n	8001f4c <HAL_RCC_OscConfig+0xb0>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001f18:	d10c      	bne.n	8001f34 <HAL_RCC_OscConfig+0x98>
 8001f1a:	4b70      	ldr	r3, [pc, #448]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a6f      	ldr	r2, [pc, #444]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f24:	6013      	str	r3, [r2, #0]
 8001f26:	4b6d      	ldr	r3, [pc, #436]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a6c      	ldr	r2, [pc, #432]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f30:	6013      	str	r3, [r2, #0]
 8001f32:	e00b      	b.n	8001f4c <HAL_RCC_OscConfig+0xb0>
 8001f34:	4b69      	ldr	r3, [pc, #420]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a68      	ldr	r2, [pc, #416]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f3e:	6013      	str	r3, [r2, #0]
 8001f40:	4b66      	ldr	r3, [pc, #408]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	4a65      	ldr	r2, [pc, #404]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d013      	beq.n	8001f7c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f54:	f7ff f8c2 	bl	80010dc <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f5c:	f7ff f8be 	bl	80010dc <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b64      	cmp	r3, #100	; 0x64
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e207      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f6e:	4b5b      	ldr	r3, [pc, #364]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0xc0>
 8001f7a:	e014      	b.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f7c:	f7ff f8ae 	bl	80010dc <HAL_GetTick>
 8001f80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f82:	e008      	b.n	8001f96 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f84:	f7ff f8aa 	bl	80010dc <HAL_GetTick>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	2b64      	cmp	r3, #100	; 0x64
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e1f3      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f96:	4b51      	ldr	r3, [pc, #324]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d1f0      	bne.n	8001f84 <HAL_RCC_OscConfig+0xe8>
 8001fa2:	e000      	b.n	8001fa6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fa4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d063      	beq.n	800207a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fb2:	4b4a      	ldr	r3, [pc, #296]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fb4:	689b      	ldr	r3, [r3, #8]
 8001fb6:	f003 030c 	and.w	r3, r3, #12
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d00b      	beq.n	8001fd6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fbe:	4b47      	ldr	r3, [pc, #284]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001fc6:	2b08      	cmp	r3, #8
 8001fc8:	d11c      	bne.n	8002004 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fca:	4b44      	ldr	r3, [pc, #272]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d116      	bne.n	8002004 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fd6:	4b41      	ldr	r3, [pc, #260]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0302 	and.w	r3, r3, #2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d005      	beq.n	8001fee <HAL_RCC_OscConfig+0x152>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	68db      	ldr	r3, [r3, #12]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d001      	beq.n	8001fee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fea:	2301      	movs	r3, #1
 8001fec:	e1c7      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fee:	4b3b      	ldr	r3, [pc, #236]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4937      	ldr	r1, [pc, #220]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002002:	e03a      	b.n	800207a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800200c:	4b34      	ldr	r3, [pc, #208]	; (80020e0 <HAL_RCC_OscConfig+0x244>)
 800200e:	2201      	movs	r2, #1
 8002010:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002012:	f7ff f863 	bl	80010dc <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800201a:	f7ff f85f 	bl	80010dc <HAL_GetTick>
 800201e:	4602      	mov	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e1a8      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800202c:	4b2b      	ldr	r3, [pc, #172]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 0302 	and.w	r3, r3, #2
 8002034:	2b00      	cmp	r3, #0
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	4b28      	ldr	r3, [pc, #160]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	691b      	ldr	r3, [r3, #16]
 8002044:	00db      	lsls	r3, r3, #3
 8002046:	4925      	ldr	r1, [pc, #148]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8002048:	4313      	orrs	r3, r2
 800204a:	600b      	str	r3, [r1, #0]
 800204c:	e015      	b.n	800207a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800204e:	4b24      	ldr	r3, [pc, #144]	; (80020e0 <HAL_RCC_OscConfig+0x244>)
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002054:	f7ff f842 	bl	80010dc <HAL_GetTick>
 8002058:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	e008      	b.n	800206e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205c:	f7ff f83e 	bl	80010dc <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	693b      	ldr	r3, [r7, #16]
 8002064:	1ad3      	subs	r3, r2, r3
 8002066:	2b02      	cmp	r3, #2
 8002068:	d901      	bls.n	800206e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	e187      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800206e:	4b1b      	ldr	r3, [pc, #108]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f003 0302 	and.w	r3, r3, #2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d1f0      	bne.n	800205c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	2b00      	cmp	r3, #0
 8002084:	d036      	beq.n	80020f4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	695b      	ldr	r3, [r3, #20]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d016      	beq.n	80020bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800208e:	4b15      	ldr	r3, [pc, #84]	; (80020e4 <HAL_RCC_OscConfig+0x248>)
 8002090:	2201      	movs	r2, #1
 8002092:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002094:	f7ff f822 	bl	80010dc <HAL_GetTick>
 8002098:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800209a:	e008      	b.n	80020ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800209c:	f7ff f81e 	bl	80010dc <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	693b      	ldr	r3, [r7, #16]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b02      	cmp	r3, #2
 80020a8:	d901      	bls.n	80020ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e167      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020ae:	4b0b      	ldr	r3, [pc, #44]	; (80020dc <HAL_RCC_OscConfig+0x240>)
 80020b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020b2:	f003 0302 	and.w	r3, r3, #2
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d0f0      	beq.n	800209c <HAL_RCC_OscConfig+0x200>
 80020ba:	e01b      	b.n	80020f4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020bc:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <HAL_RCC_OscConfig+0x248>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020c2:	f7ff f80b 	bl	80010dc <HAL_GetTick>
 80020c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c8:	e00e      	b.n	80020e8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ca:	f7ff f807 	bl	80010dc <HAL_GetTick>
 80020ce:	4602      	mov	r2, r0
 80020d0:	693b      	ldr	r3, [r7, #16]
 80020d2:	1ad3      	subs	r3, r2, r3
 80020d4:	2b02      	cmp	r3, #2
 80020d6:	d907      	bls.n	80020e8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e150      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
 80020dc:	40023800 	.word	0x40023800
 80020e0:	42470000 	.word	0x42470000
 80020e4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020e8:	4b88      	ldr	r3, [pc, #544]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80020ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020ec:	f003 0302 	and.w	r3, r3, #2
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d1ea      	bne.n	80020ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	f000 8097 	beq.w	8002230 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002102:	2300      	movs	r3, #0
 8002104:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002106:	4b81      	ldr	r3, [pc, #516]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800210e:	2b00      	cmp	r3, #0
 8002110:	d10f      	bne.n	8002132 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b7d      	ldr	r3, [pc, #500]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002118:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800211a:	4a7c      	ldr	r2, [pc, #496]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800211c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002120:	6413      	str	r3, [r2, #64]	; 0x40
 8002122:	4b7a      	ldr	r3, [pc, #488]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002126:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800212e:	2301      	movs	r3, #1
 8002130:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002132:	4b77      	ldr	r3, [pc, #476]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800213a:	2b00      	cmp	r3, #0
 800213c:	d118      	bne.n	8002170 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800213e:	4b74      	ldr	r3, [pc, #464]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4a73      	ldr	r2, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002144:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002148:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800214a:	f7fe ffc7 	bl	80010dc <HAL_GetTick>
 800214e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002150:	e008      	b.n	8002164 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002152:	f7fe ffc3 	bl	80010dc <HAL_GetTick>
 8002156:	4602      	mov	r2, r0
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	1ad3      	subs	r3, r2, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d901      	bls.n	8002164 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002160:	2303      	movs	r3, #3
 8002162:	e10c      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002164:	4b6a      	ldr	r3, [pc, #424]	; (8002310 <HAL_RCC_OscConfig+0x474>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800216c:	2b00      	cmp	r3, #0
 800216e:	d0f0      	beq.n	8002152 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d106      	bne.n	8002186 <HAL_RCC_OscConfig+0x2ea>
 8002178:	4b64      	ldr	r3, [pc, #400]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	4a63      	ldr	r2, [pc, #396]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800217e:	f043 0301 	orr.w	r3, r3, #1
 8002182:	6713      	str	r3, [r2, #112]	; 0x70
 8002184:	e01c      	b.n	80021c0 <HAL_RCC_OscConfig+0x324>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	2b05      	cmp	r3, #5
 800218c:	d10c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x30c>
 800218e:	4b5f      	ldr	r3, [pc, #380]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002190:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002192:	4a5e      	ldr	r2, [pc, #376]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002194:	f043 0304 	orr.w	r3, r3, #4
 8002198:	6713      	str	r3, [r2, #112]	; 0x70
 800219a:	4b5c      	ldr	r3, [pc, #368]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800219c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800219e:	4a5b      	ldr	r2, [pc, #364]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021a0:	f043 0301 	orr.w	r3, r3, #1
 80021a4:	6713      	str	r3, [r2, #112]	; 0x70
 80021a6:	e00b      	b.n	80021c0 <HAL_RCC_OscConfig+0x324>
 80021a8:	4b58      	ldr	r3, [pc, #352]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ac:	4a57      	ldr	r2, [pc, #348]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021ae:	f023 0301 	bic.w	r3, r3, #1
 80021b2:	6713      	str	r3, [r2, #112]	; 0x70
 80021b4:	4b55      	ldr	r3, [pc, #340]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021b8:	4a54      	ldr	r2, [pc, #336]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021ba:	f023 0304 	bic.w	r3, r3, #4
 80021be:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d015      	beq.n	80021f4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021c8:	f7fe ff88 	bl	80010dc <HAL_GetTick>
 80021cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ce:	e00a      	b.n	80021e6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021d0:	f7fe ff84 	bl	80010dc <HAL_GetTick>
 80021d4:	4602      	mov	r2, r0
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	1ad3      	subs	r3, r2, r3
 80021da:	f241 3288 	movw	r2, #5000	; 0x1388
 80021de:	4293      	cmp	r3, r2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e0cb      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021e6:	4b49      	ldr	r3, [pc, #292]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80021e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d0ee      	beq.n	80021d0 <HAL_RCC_OscConfig+0x334>
 80021f2:	e014      	b.n	800221e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021f4:	f7fe ff72 	bl	80010dc <HAL_GetTick>
 80021f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fa:	e00a      	b.n	8002212 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021fc:	f7fe ff6e 	bl	80010dc <HAL_GetTick>
 8002200:	4602      	mov	r2, r0
 8002202:	693b      	ldr	r3, [r7, #16]
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	f241 3288 	movw	r2, #5000	; 0x1388
 800220a:	4293      	cmp	r3, r2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e0b5      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002212:	4b3e      	ldr	r3, [pc, #248]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002214:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1ee      	bne.n	80021fc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800221e:	7dfb      	ldrb	r3, [r7, #23]
 8002220:	2b01      	cmp	r3, #1
 8002222:	d105      	bne.n	8002230 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002224:	4b39      	ldr	r3, [pc, #228]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002228:	4a38      	ldr	r2, [pc, #224]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800222a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800222e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b00      	cmp	r3, #0
 8002236:	f000 80a1 	beq.w	800237c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800223a:	4b34      	ldr	r3, [pc, #208]	; (800230c <HAL_RCC_OscConfig+0x470>)
 800223c:	689b      	ldr	r3, [r3, #8]
 800223e:	f003 030c 	and.w	r3, r3, #12
 8002242:	2b08      	cmp	r3, #8
 8002244:	d05c      	beq.n	8002300 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	699b      	ldr	r3, [r3, #24]
 800224a:	2b02      	cmp	r3, #2
 800224c:	d141      	bne.n	80022d2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800224e:	4b31      	ldr	r3, [pc, #196]	; (8002314 <HAL_RCC_OscConfig+0x478>)
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002254:	f7fe ff42 	bl	80010dc <HAL_GetTick>
 8002258:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800225a:	e008      	b.n	800226e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800225c:	f7fe ff3e 	bl	80010dc <HAL_GetTick>
 8002260:	4602      	mov	r2, r0
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	1ad3      	subs	r3, r2, r3
 8002266:	2b02      	cmp	r3, #2
 8002268:	d901      	bls.n	800226e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800226a:	2303      	movs	r3, #3
 800226c:	e087      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800226e:	4b27      	ldr	r3, [pc, #156]	; (800230c <HAL_RCC_OscConfig+0x470>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d1f0      	bne.n	800225c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69da      	ldr	r2, [r3, #28]
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	431a      	orrs	r2, r3
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002288:	019b      	lsls	r3, r3, #6
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002290:	085b      	lsrs	r3, r3, #1
 8002292:	3b01      	subs	r3, #1
 8002294:	041b      	lsls	r3, r3, #16
 8002296:	431a      	orrs	r2, r3
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800229c:	061b      	lsls	r3, r3, #24
 800229e:	491b      	ldr	r1, [pc, #108]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80022a0:	4313      	orrs	r3, r2
 80022a2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80022a4:	4b1b      	ldr	r3, [pc, #108]	; (8002314 <HAL_RCC_OscConfig+0x478>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022aa:	f7fe ff17 	bl	80010dc <HAL_GetTick>
 80022ae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022b0:	e008      	b.n	80022c4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022b2:	f7fe ff13 	bl	80010dc <HAL_GetTick>
 80022b6:	4602      	mov	r2, r0
 80022b8:	693b      	ldr	r3, [r7, #16]
 80022ba:	1ad3      	subs	r3, r2, r3
 80022bc:	2b02      	cmp	r3, #2
 80022be:	d901      	bls.n	80022c4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80022c0:	2303      	movs	r3, #3
 80022c2:	e05c      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022c4:	4b11      	ldr	r3, [pc, #68]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d0f0      	beq.n	80022b2 <HAL_RCC_OscConfig+0x416>
 80022d0:	e054      	b.n	800237c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022d2:	4b10      	ldr	r3, [pc, #64]	; (8002314 <HAL_RCC_OscConfig+0x478>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022d8:	f7fe ff00 	bl	80010dc <HAL_GetTick>
 80022dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022de:	e008      	b.n	80022f2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022e0:	f7fe fefc 	bl	80010dc <HAL_GetTick>
 80022e4:	4602      	mov	r2, r0
 80022e6:	693b      	ldr	r3, [r7, #16]
 80022e8:	1ad3      	subs	r3, r2, r3
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d901      	bls.n	80022f2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80022ee:	2303      	movs	r3, #3
 80022f0:	e045      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <HAL_RCC_OscConfig+0x470>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1f0      	bne.n	80022e0 <HAL_RCC_OscConfig+0x444>
 80022fe:	e03d      	b.n	800237c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	2b01      	cmp	r3, #1
 8002306:	d107      	bne.n	8002318 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002308:	2301      	movs	r3, #1
 800230a:	e038      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
 800230c:	40023800 	.word	0x40023800
 8002310:	40007000 	.word	0x40007000
 8002314:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002318:	4b1b      	ldr	r3, [pc, #108]	; (8002388 <HAL_RCC_OscConfig+0x4ec>)
 800231a:	685b      	ldr	r3, [r3, #4]
 800231c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	699b      	ldr	r3, [r3, #24]
 8002322:	2b01      	cmp	r3, #1
 8002324:	d028      	beq.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002330:	429a      	cmp	r2, r3
 8002332:	d121      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d11a      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002342:	68fa      	ldr	r2, [r7, #12]
 8002344:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002348:	4013      	ands	r3, r2
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800234e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002350:	4293      	cmp	r3, r2
 8002352:	d111      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800235e:	085b      	lsrs	r3, r3, #1
 8002360:	3b01      	subs	r3, #1
 8002362:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002364:	429a      	cmp	r2, r3
 8002366:	d107      	bne.n	8002378 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002372:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002374:	429a      	cmp	r2, r3
 8002376:	d001      	beq.n	800237c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e000      	b.n	800237e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800237c:	2300      	movs	r3, #0
}
 800237e:	4618      	mov	r0, r3
 8002380:	3718      	adds	r7, #24
 8002382:	46bd      	mov	sp, r7
 8002384:	bd80      	pop	{r7, pc}
 8002386:	bf00      	nop
 8002388:	40023800 	.word	0x40023800

0800238c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
 8002394:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d101      	bne.n	80023a0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e0cc      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80023a0:	4b68      	ldr	r3, [pc, #416]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0307 	and.w	r3, r3, #7
 80023a8:	683a      	ldr	r2, [r7, #0]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	d90c      	bls.n	80023c8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ae:	4b65      	ldr	r3, [pc, #404]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80023b6:	4b63      	ldr	r3, [pc, #396]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	f003 0307 	and.w	r3, r3, #7
 80023be:	683a      	ldr	r2, [r7, #0]
 80023c0:	429a      	cmp	r2, r3
 80023c2:	d001      	beq.n	80023c8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0b8      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d020      	beq.n	8002416 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f003 0304 	and.w	r3, r3, #4
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d005      	beq.n	80023ec <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023e0:	4b59      	ldr	r3, [pc, #356]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	689b      	ldr	r3, [r3, #8]
 80023e4:	4a58      	ldr	r2, [pc, #352]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023e6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ea:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0308 	and.w	r3, r3, #8
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d005      	beq.n	8002404 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023f8:	4b53      	ldr	r3, [pc, #332]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	4a52      	ldr	r2, [pc, #328]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80023fe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002402:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002404:	4b50      	ldr	r3, [pc, #320]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	494d      	ldr	r1, [pc, #308]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002412:	4313      	orrs	r3, r2
 8002414:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f003 0301 	and.w	r3, r3, #1
 800241e:	2b00      	cmp	r3, #0
 8002420:	d044      	beq.n	80024ac <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d107      	bne.n	800243a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800242a:	4b47      	ldr	r3, [pc, #284]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002432:	2b00      	cmp	r3, #0
 8002434:	d119      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e07f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	2b02      	cmp	r3, #2
 8002440:	d003      	beq.n	800244a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002446:	2b03      	cmp	r3, #3
 8002448:	d107      	bne.n	800245a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800244a:	4b3f      	ldr	r3, [pc, #252]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e06f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800245a:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0302 	and.w	r3, r3, #2
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e067      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800246a:	4b37      	ldr	r3, [pc, #220]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800246c:	689b      	ldr	r3, [r3, #8]
 800246e:	f023 0203 	bic.w	r2, r3, #3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	685b      	ldr	r3, [r3, #4]
 8002476:	4934      	ldr	r1, [pc, #208]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002478:	4313      	orrs	r3, r2
 800247a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800247c:	f7fe fe2e 	bl	80010dc <HAL_GetTick>
 8002480:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002482:	e00a      	b.n	800249a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002484:	f7fe fe2a 	bl	80010dc <HAL_GetTick>
 8002488:	4602      	mov	r2, r0
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	1ad3      	subs	r3, r2, r3
 800248e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002492:	4293      	cmp	r3, r2
 8002494:	d901      	bls.n	800249a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002496:	2303      	movs	r3, #3
 8002498:	e04f      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800249a:	4b2b      	ldr	r3, [pc, #172]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800249c:	689b      	ldr	r3, [r3, #8]
 800249e:	f003 020c 	and.w	r2, r3, #12
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	009b      	lsls	r3, r3, #2
 80024a8:	429a      	cmp	r2, r3
 80024aa:	d1eb      	bne.n	8002484 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80024ac:	4b25      	ldr	r3, [pc, #148]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0307 	and.w	r3, r3, #7
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d20c      	bcs.n	80024d4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024ba:	4b22      	ldr	r3, [pc, #136]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024bc:	683a      	ldr	r2, [r7, #0]
 80024be:	b2d2      	uxtb	r2, r2
 80024c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024c2:	4b20      	ldr	r3, [pc, #128]	; (8002544 <HAL_RCC_ClockConfig+0x1b8>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0307 	and.w	r3, r3, #7
 80024ca:	683a      	ldr	r2, [r7, #0]
 80024cc:	429a      	cmp	r2, r3
 80024ce:	d001      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024d0:	2301      	movs	r3, #1
 80024d2:	e032      	b.n	800253a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0304 	and.w	r3, r3, #4
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d008      	beq.n	80024f2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024e0:	4b19      	ldr	r3, [pc, #100]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	4916      	ldr	r1, [pc, #88]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 80024ee:	4313      	orrs	r3, r2
 80024f0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0308 	and.w	r3, r3, #8
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d009      	beq.n	8002512 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024fe:	4b12      	ldr	r3, [pc, #72]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 8002500:	689b      	ldr	r3, [r3, #8]
 8002502:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	691b      	ldr	r3, [r3, #16]
 800250a:	00db      	lsls	r3, r3, #3
 800250c:	490e      	ldr	r1, [pc, #56]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800250e:	4313      	orrs	r3, r2
 8002510:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002512:	f000 f821 	bl	8002558 <HAL_RCC_GetSysClockFreq>
 8002516:	4602      	mov	r2, r0
 8002518:	4b0b      	ldr	r3, [pc, #44]	; (8002548 <HAL_RCC_ClockConfig+0x1bc>)
 800251a:	689b      	ldr	r3, [r3, #8]
 800251c:	091b      	lsrs	r3, r3, #4
 800251e:	f003 030f 	and.w	r3, r3, #15
 8002522:	490a      	ldr	r1, [pc, #40]	; (800254c <HAL_RCC_ClockConfig+0x1c0>)
 8002524:	5ccb      	ldrb	r3, [r1, r3]
 8002526:	fa22 f303 	lsr.w	r3, r2, r3
 800252a:	4a09      	ldr	r2, [pc, #36]	; (8002550 <HAL_RCC_ClockConfig+0x1c4>)
 800252c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800252e:	4b09      	ldr	r3, [pc, #36]	; (8002554 <HAL_RCC_ClockConfig+0x1c8>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fd8e 	bl	8001054 <HAL_InitTick>

  return HAL_OK;
 8002538:	2300      	movs	r3, #0
}
 800253a:	4618      	mov	r0, r3
 800253c:	3710      	adds	r7, #16
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	40023c00 	.word	0x40023c00
 8002548:	40023800 	.word	0x40023800
 800254c:	08005258 	.word	0x08005258
 8002550:	20000004 	.word	0x20000004
 8002554:	20000008 	.word	0x20000008

08002558 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800255c:	b094      	sub	sp, #80	; 0x50
 800255e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	647b      	str	r3, [r7, #68]	; 0x44
 8002564:	2300      	movs	r3, #0
 8002566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002568:	2300      	movs	r3, #0
 800256a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800256c:	2300      	movs	r3, #0
 800256e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002570:	4b79      	ldr	r3, [pc, #484]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 8002572:	689b      	ldr	r3, [r3, #8]
 8002574:	f003 030c 	and.w	r3, r3, #12
 8002578:	2b08      	cmp	r3, #8
 800257a:	d00d      	beq.n	8002598 <HAL_RCC_GetSysClockFreq+0x40>
 800257c:	2b08      	cmp	r3, #8
 800257e:	f200 80e1 	bhi.w	8002744 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002582:	2b00      	cmp	r3, #0
 8002584:	d002      	beq.n	800258c <HAL_RCC_GetSysClockFreq+0x34>
 8002586:	2b04      	cmp	r3, #4
 8002588:	d003      	beq.n	8002592 <HAL_RCC_GetSysClockFreq+0x3a>
 800258a:	e0db      	b.n	8002744 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800258c:	4b73      	ldr	r3, [pc, #460]	; (800275c <HAL_RCC_GetSysClockFreq+0x204>)
 800258e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002590:	e0db      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002592:	4b73      	ldr	r3, [pc, #460]	; (8002760 <HAL_RCC_GetSysClockFreq+0x208>)
 8002594:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002596:	e0d8      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002598:	4b6f      	ldr	r3, [pc, #444]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80025a0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80025a2:	4b6d      	ldr	r3, [pc, #436]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d063      	beq.n	8002676 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025ae:	4b6a      	ldr	r3, [pc, #424]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	099b      	lsrs	r3, r3, #6
 80025b4:	2200      	movs	r2, #0
 80025b6:	63bb      	str	r3, [r7, #56]	; 0x38
 80025b8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80025ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025c0:	633b      	str	r3, [r7, #48]	; 0x30
 80025c2:	2300      	movs	r3, #0
 80025c4:	637b      	str	r3, [r7, #52]	; 0x34
 80025c6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80025ca:	4622      	mov	r2, r4
 80025cc:	462b      	mov	r3, r5
 80025ce:	f04f 0000 	mov.w	r0, #0
 80025d2:	f04f 0100 	mov.w	r1, #0
 80025d6:	0159      	lsls	r1, r3, #5
 80025d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80025dc:	0150      	lsls	r0, r2, #5
 80025de:	4602      	mov	r2, r0
 80025e0:	460b      	mov	r3, r1
 80025e2:	4621      	mov	r1, r4
 80025e4:	1a51      	subs	r1, r2, r1
 80025e6:	6139      	str	r1, [r7, #16]
 80025e8:	4629      	mov	r1, r5
 80025ea:	eb63 0301 	sbc.w	r3, r3, r1
 80025ee:	617b      	str	r3, [r7, #20]
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	f04f 0300 	mov.w	r3, #0
 80025f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80025fc:	4659      	mov	r1, fp
 80025fe:	018b      	lsls	r3, r1, #6
 8002600:	4651      	mov	r1, sl
 8002602:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002606:	4651      	mov	r1, sl
 8002608:	018a      	lsls	r2, r1, #6
 800260a:	4651      	mov	r1, sl
 800260c:	ebb2 0801 	subs.w	r8, r2, r1
 8002610:	4659      	mov	r1, fp
 8002612:	eb63 0901 	sbc.w	r9, r3, r1
 8002616:	f04f 0200 	mov.w	r2, #0
 800261a:	f04f 0300 	mov.w	r3, #0
 800261e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800262a:	4690      	mov	r8, r2
 800262c:	4699      	mov	r9, r3
 800262e:	4623      	mov	r3, r4
 8002630:	eb18 0303 	adds.w	r3, r8, r3
 8002634:	60bb      	str	r3, [r7, #8]
 8002636:	462b      	mov	r3, r5
 8002638:	eb49 0303 	adc.w	r3, r9, r3
 800263c:	60fb      	str	r3, [r7, #12]
 800263e:	f04f 0200 	mov.w	r2, #0
 8002642:	f04f 0300 	mov.w	r3, #0
 8002646:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800264a:	4629      	mov	r1, r5
 800264c:	024b      	lsls	r3, r1, #9
 800264e:	4621      	mov	r1, r4
 8002650:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002654:	4621      	mov	r1, r4
 8002656:	024a      	lsls	r2, r1, #9
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800265e:	2200      	movs	r2, #0
 8002660:	62bb      	str	r3, [r7, #40]	; 0x28
 8002662:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002664:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002668:	f7fd fe0a 	bl	8000280 <__aeabi_uldivmod>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4613      	mov	r3, r2
 8002672:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002674:	e058      	b.n	8002728 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002676:	4b38      	ldr	r3, [pc, #224]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 8002678:	685b      	ldr	r3, [r3, #4]
 800267a:	099b      	lsrs	r3, r3, #6
 800267c:	2200      	movs	r2, #0
 800267e:	4618      	mov	r0, r3
 8002680:	4611      	mov	r1, r2
 8002682:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002686:	623b      	str	r3, [r7, #32]
 8002688:	2300      	movs	r3, #0
 800268a:	627b      	str	r3, [r7, #36]	; 0x24
 800268c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002690:	4642      	mov	r2, r8
 8002692:	464b      	mov	r3, r9
 8002694:	f04f 0000 	mov.w	r0, #0
 8002698:	f04f 0100 	mov.w	r1, #0
 800269c:	0159      	lsls	r1, r3, #5
 800269e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a2:	0150      	lsls	r0, r2, #5
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4641      	mov	r1, r8
 80026aa:	ebb2 0a01 	subs.w	sl, r2, r1
 80026ae:	4649      	mov	r1, r9
 80026b0:	eb63 0b01 	sbc.w	fp, r3, r1
 80026b4:	f04f 0200 	mov.w	r2, #0
 80026b8:	f04f 0300 	mov.w	r3, #0
 80026bc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80026c0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80026c4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80026c8:	ebb2 040a 	subs.w	r4, r2, sl
 80026cc:	eb63 050b 	sbc.w	r5, r3, fp
 80026d0:	f04f 0200 	mov.w	r2, #0
 80026d4:	f04f 0300 	mov.w	r3, #0
 80026d8:	00eb      	lsls	r3, r5, #3
 80026da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80026de:	00e2      	lsls	r2, r4, #3
 80026e0:	4614      	mov	r4, r2
 80026e2:	461d      	mov	r5, r3
 80026e4:	4643      	mov	r3, r8
 80026e6:	18e3      	adds	r3, r4, r3
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	464b      	mov	r3, r9
 80026ec:	eb45 0303 	adc.w	r3, r5, r3
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	f04f 0200 	mov.w	r2, #0
 80026f6:	f04f 0300 	mov.w	r3, #0
 80026fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80026fe:	4629      	mov	r1, r5
 8002700:	028b      	lsls	r3, r1, #10
 8002702:	4621      	mov	r1, r4
 8002704:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002708:	4621      	mov	r1, r4
 800270a:	028a      	lsls	r2, r1, #10
 800270c:	4610      	mov	r0, r2
 800270e:	4619      	mov	r1, r3
 8002710:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002712:	2200      	movs	r2, #0
 8002714:	61bb      	str	r3, [r7, #24]
 8002716:	61fa      	str	r2, [r7, #28]
 8002718:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800271c:	f7fd fdb0 	bl	8000280 <__aeabi_uldivmod>
 8002720:	4602      	mov	r2, r0
 8002722:	460b      	mov	r3, r1
 8002724:	4613      	mov	r3, r2
 8002726:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002728:	4b0b      	ldr	r3, [pc, #44]	; (8002758 <HAL_RCC_GetSysClockFreq+0x200>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	0c1b      	lsrs	r3, r3, #16
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	3301      	adds	r3, #1
 8002734:	005b      	lsls	r3, r3, #1
 8002736:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002738:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800273a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800273c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002740:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002742:	e002      	b.n	800274a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002744:	4b05      	ldr	r3, [pc, #20]	; (800275c <HAL_RCC_GetSysClockFreq+0x204>)
 8002746:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002748:	bf00      	nop
    }
  }
  return sysclockfreq;
 800274a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800274c:	4618      	mov	r0, r3
 800274e:	3750      	adds	r7, #80	; 0x50
 8002750:	46bd      	mov	sp, r7
 8002752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002756:	bf00      	nop
 8002758:	40023800 	.word	0x40023800
 800275c:	00f42400 	.word	0x00f42400
 8002760:	007a1200 	.word	0x007a1200

08002764 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <HAL_RCC_GetHCLKFreq+0x14>)
 800276a:	681b      	ldr	r3, [r3, #0]
}
 800276c:	4618      	mov	r0, r3
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr
 8002776:	bf00      	nop
 8002778:	20000004 	.word	0x20000004

0800277c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002780:	f7ff fff0 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 8002784:	4602      	mov	r2, r0
 8002786:	4b05      	ldr	r3, [pc, #20]	; (800279c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	0a9b      	lsrs	r3, r3, #10
 800278c:	f003 0307 	and.w	r3, r3, #7
 8002790:	4903      	ldr	r1, [pc, #12]	; (80027a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002792:	5ccb      	ldrb	r3, [r1, r3]
 8002794:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002798:	4618      	mov	r0, r3
 800279a:	bd80      	pop	{r7, pc}
 800279c:	40023800 	.word	0x40023800
 80027a0:	08005268 	.word	0x08005268

080027a4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80027a8:	f7ff ffdc 	bl	8002764 <HAL_RCC_GetHCLKFreq>
 80027ac:	4602      	mov	r2, r0
 80027ae:	4b05      	ldr	r3, [pc, #20]	; (80027c4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	0b5b      	lsrs	r3, r3, #13
 80027b4:	f003 0307 	and.w	r3, r3, #7
 80027b8:	4903      	ldr	r1, [pc, #12]	; (80027c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80027ba:	5ccb      	ldrb	r3, [r1, r3]
 80027bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40023800 	.word	0x40023800
 80027c8:	08005268 	.word	0x08005268

080027cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b082      	sub	sp, #8
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d101      	bne.n	80027de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80027da:	2301      	movs	r3, #1
 80027dc:	e041      	b.n	8002862 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027e4:	b2db      	uxtb	r3, r3
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2200      	movs	r2, #0
 80027ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80027f2:	6878      	ldr	r0, [r7, #4]
 80027f4:	f7fe f9a6 	bl	8000b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2202      	movs	r2, #2
 80027fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	3304      	adds	r3, #4
 8002808:	4619      	mov	r1, r3
 800280a:	4610      	mov	r0, r2
 800280c:	f000 fad8 	bl	8002dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2201      	movs	r2, #1
 8002814:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2201      	movs	r2, #1
 800281c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2201      	movs	r2, #1
 8002834:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2201      	movs	r2, #1
 8002844:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	2201      	movs	r2, #1
 800284c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	2201      	movs	r2, #1
 8002854:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002860:	2300      	movs	r3, #0
}
 8002862:	4618      	mov	r0, r3
 8002864:	3708      	adds	r7, #8
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}

0800286a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800286a:	b580      	push	{r7, lr}
 800286c:	b082      	sub	sp, #8
 800286e:	af00      	add	r7, sp, #0
 8002870:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d101      	bne.n	800287c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002878:	2301      	movs	r3, #1
 800287a:	e041      	b.n	8002900 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002882:	b2db      	uxtb	r3, r3
 8002884:	2b00      	cmp	r3, #0
 8002886:	d106      	bne.n	8002896 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2200      	movs	r2, #0
 800288c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002890:	6878      	ldr	r0, [r7, #4]
 8002892:	f000 f839 	bl	8002908 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2202      	movs	r2, #2
 800289a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3304      	adds	r3, #4
 80028a6:	4619      	mov	r1, r3
 80028a8:	4610      	mov	r0, r2
 80028aa:	f000 fa89 	bl	8002dc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2201      	movs	r2, #1
 80028b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2201      	movs	r2, #1
 80028ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2201      	movs	r2, #1
 80028c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	2201      	movs	r2, #1
 80028ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2201      	movs	r2, #1
 80028da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	2201      	movs	r2, #1
 80028ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	2201      	movs	r2, #1
 80028f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	3708      	adds	r7, #8
 8002904:	46bd      	mov	sp, r7
 8002906:	bd80      	pop	{r7, pc}

08002908 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002908:	b480      	push	{r7}
 800290a:	b083      	sub	sp, #12
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr

0800291c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b084      	sub	sp, #16
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
 8002924:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d109      	bne.n	8002940 <HAL_TIM_PWM_Start+0x24>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002932:	b2db      	uxtb	r3, r3
 8002934:	2b01      	cmp	r3, #1
 8002936:	bf14      	ite	ne
 8002938:	2301      	movne	r3, #1
 800293a:	2300      	moveq	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	e022      	b.n	8002986 <HAL_TIM_PWM_Start+0x6a>
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	2b04      	cmp	r3, #4
 8002944:	d109      	bne.n	800295a <HAL_TIM_PWM_Start+0x3e>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800294c:	b2db      	uxtb	r3, r3
 800294e:	2b01      	cmp	r3, #1
 8002950:	bf14      	ite	ne
 8002952:	2301      	movne	r3, #1
 8002954:	2300      	moveq	r3, #0
 8002956:	b2db      	uxtb	r3, r3
 8002958:	e015      	b.n	8002986 <HAL_TIM_PWM_Start+0x6a>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	2b08      	cmp	r3, #8
 800295e:	d109      	bne.n	8002974 <HAL_TIM_PWM_Start+0x58>
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002966:	b2db      	uxtb	r3, r3
 8002968:	2b01      	cmp	r3, #1
 800296a:	bf14      	ite	ne
 800296c:	2301      	movne	r3, #1
 800296e:	2300      	moveq	r3, #0
 8002970:	b2db      	uxtb	r3, r3
 8002972:	e008      	b.n	8002986 <HAL_TIM_PWM_Start+0x6a>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	2b00      	cmp	r3, #0
 8002988:	d001      	beq.n	800298e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
 800298c:	e07c      	b.n	8002a88 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d104      	bne.n	800299e <HAL_TIM_PWM_Start+0x82>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2202      	movs	r2, #2
 8002998:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800299c:	e013      	b.n	80029c6 <HAL_TIM_PWM_Start+0xaa>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b04      	cmp	r3, #4
 80029a2:	d104      	bne.n	80029ae <HAL_TIM_PWM_Start+0x92>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2202      	movs	r2, #2
 80029a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029ac:	e00b      	b.n	80029c6 <HAL_TIM_PWM_Start+0xaa>
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d104      	bne.n	80029be <HAL_TIM_PWM_Start+0xa2>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2202      	movs	r2, #2
 80029b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80029bc:	e003      	b.n	80029c6 <HAL_TIM_PWM_Start+0xaa>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	2202      	movs	r2, #2
 80029c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	2201      	movs	r2, #1
 80029cc:	6839      	ldr	r1, [r7, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f000 fce0 	bl	8003394 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	4a2d      	ldr	r2, [pc, #180]	; (8002a90 <HAL_TIM_PWM_Start+0x174>)
 80029da:	4293      	cmp	r3, r2
 80029dc:	d004      	beq.n	80029e8 <HAL_TIM_PWM_Start+0xcc>
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	4a2c      	ldr	r2, [pc, #176]	; (8002a94 <HAL_TIM_PWM_Start+0x178>)
 80029e4:	4293      	cmp	r3, r2
 80029e6:	d101      	bne.n	80029ec <HAL_TIM_PWM_Start+0xd0>
 80029e8:	2301      	movs	r3, #1
 80029ea:	e000      	b.n	80029ee <HAL_TIM_PWM_Start+0xd2>
 80029ec:	2300      	movs	r3, #0
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a00:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a22      	ldr	r2, [pc, #136]	; (8002a90 <HAL_TIM_PWM_Start+0x174>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d022      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x136>
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a14:	d01d      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x136>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a1f      	ldr	r2, [pc, #124]	; (8002a98 <HAL_TIM_PWM_Start+0x17c>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d018      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x136>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1d      	ldr	r2, [pc, #116]	; (8002a9c <HAL_TIM_PWM_Start+0x180>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d013      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x136>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a1c      	ldr	r2, [pc, #112]	; (8002aa0 <HAL_TIM_PWM_Start+0x184>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d00e      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x136>
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a16      	ldr	r2, [pc, #88]	; (8002a94 <HAL_TIM_PWM_Start+0x178>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d009      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x136>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4a18      	ldr	r2, [pc, #96]	; (8002aa4 <HAL_TIM_PWM_Start+0x188>)
 8002a44:	4293      	cmp	r3, r2
 8002a46:	d004      	beq.n	8002a52 <HAL_TIM_PWM_Start+0x136>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a16      	ldr	r2, [pc, #88]	; (8002aa8 <HAL_TIM_PWM_Start+0x18c>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d111      	bne.n	8002a76 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689b      	ldr	r3, [r3, #8]
 8002a58:	f003 0307 	and.w	r3, r3, #7
 8002a5c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	2b06      	cmp	r3, #6
 8002a62:	d010      	beq.n	8002a86 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a74:	e007      	b.n	8002a86 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	681a      	ldr	r2, [r3, #0]
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	f042 0201 	orr.w	r2, r2, #1
 8002a84:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a86:	2300      	movs	r3, #0
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bd80      	pop	{r7, pc}
 8002a90:	40010000 	.word	0x40010000
 8002a94:	40010400 	.word	0x40010400
 8002a98:	40000400 	.word	0x40000400
 8002a9c:	40000800 	.word	0x40000800
 8002aa0:	40000c00 	.word	0x40000c00
 8002aa4:	40014000 	.word	0x40014000
 8002aa8:	40001800 	.word	0x40001800

08002aac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b086      	sub	sp, #24
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	60f8      	str	r0, [r7, #12]
 8002ab4:	60b9      	str	r1, [r7, #8]
 8002ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ac2:	2b01      	cmp	r3, #1
 8002ac4:	d101      	bne.n	8002aca <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002ac6:	2302      	movs	r3, #2
 8002ac8:	e0ae      	b.n	8002c28 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2b0c      	cmp	r3, #12
 8002ad6:	f200 809f 	bhi.w	8002c18 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002ada:	a201      	add	r2, pc, #4	; (adr r2, 8002ae0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002adc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ae0:	08002b15 	.word	0x08002b15
 8002ae4:	08002c19 	.word	0x08002c19
 8002ae8:	08002c19 	.word	0x08002c19
 8002aec:	08002c19 	.word	0x08002c19
 8002af0:	08002b55 	.word	0x08002b55
 8002af4:	08002c19 	.word	0x08002c19
 8002af8:	08002c19 	.word	0x08002c19
 8002afc:	08002c19 	.word	0x08002c19
 8002b00:	08002b97 	.word	0x08002b97
 8002b04:	08002c19 	.word	0x08002c19
 8002b08:	08002c19 	.word	0x08002c19
 8002b0c:	08002c19 	.word	0x08002c19
 8002b10:	08002bd7 	.word	0x08002bd7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	68b9      	ldr	r1, [r7, #8]
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	f000 f9f0 	bl	8002f00 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0208 	orr.w	r2, r2, #8
 8002b2e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	699a      	ldr	r2, [r3, #24]
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f022 0204 	bic.w	r2, r2, #4
 8002b3e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	6999      	ldr	r1, [r3, #24]
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	691a      	ldr	r2, [r3, #16]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	430a      	orrs	r2, r1
 8002b50:	619a      	str	r2, [r3, #24]
      break;
 8002b52:	e064      	b.n	8002c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	68b9      	ldr	r1, [r7, #8]
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	f000 fa40 	bl	8002fe0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	699a      	ldr	r2, [r3, #24]
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	699a      	ldr	r2, [r3, #24]
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	6999      	ldr	r1, [r3, #24]
 8002b86:	68bb      	ldr	r3, [r7, #8]
 8002b88:	691b      	ldr	r3, [r3, #16]
 8002b8a:	021a      	lsls	r2, r3, #8
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	430a      	orrs	r2, r1
 8002b92:	619a      	str	r2, [r3, #24]
      break;
 8002b94:	e043      	b.n	8002c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68b9      	ldr	r1, [r7, #8]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f000 fa95 	bl	80030cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	69da      	ldr	r2, [r3, #28]
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f042 0208 	orr.w	r2, r2, #8
 8002bb0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	69da      	ldr	r2, [r3, #28]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0204 	bic.w	r2, r2, #4
 8002bc0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	69d9      	ldr	r1, [r3, #28]
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	691a      	ldr	r2, [r3, #16]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	430a      	orrs	r2, r1
 8002bd2:	61da      	str	r2, [r3, #28]
      break;
 8002bd4:	e023      	b.n	8002c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	68b9      	ldr	r1, [r7, #8]
 8002bdc:	4618      	mov	r0, r3
 8002bde:	f000 fae9 	bl	80031b4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	69da      	ldr	r2, [r3, #28]
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bf0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	69da      	ldr	r2, [r3, #28]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	69d9      	ldr	r1, [r3, #28]
 8002c08:	68bb      	ldr	r3, [r7, #8]
 8002c0a:	691b      	ldr	r3, [r3, #16]
 8002c0c:	021a      	lsls	r2, r3, #8
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	430a      	orrs	r2, r1
 8002c14:	61da      	str	r2, [r3, #28]
      break;
 8002c16:	e002      	b.n	8002c1e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	75fb      	strb	r3, [r7, #23]
      break;
 8002c1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002c26:	7dfb      	ldrb	r3, [r7, #23]
}
 8002c28:	4618      	mov	r0, r3
 8002c2a:	3718      	adds	r7, #24
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	bd80      	pop	{r7, pc}

08002c30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d101      	bne.n	8002c4c <HAL_TIM_ConfigClockSource+0x1c>
 8002c48:	2302      	movs	r3, #2
 8002c4a:	e0b4      	b.n	8002db6 <HAL_TIM_ConfigClockSource+0x186>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	2201      	movs	r2, #1
 8002c50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002c6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c6c:	68bb      	ldr	r3, [r7, #8]
 8002c6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	68ba      	ldr	r2, [r7, #8]
 8002c7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002c7c:	683b      	ldr	r3, [r7, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c84:	d03e      	beq.n	8002d04 <HAL_TIM_ConfigClockSource+0xd4>
 8002c86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c8a:	f200 8087 	bhi.w	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
 8002c8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c92:	f000 8086 	beq.w	8002da2 <HAL_TIM_ConfigClockSource+0x172>
 8002c96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c9a:	d87f      	bhi.n	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
 8002c9c:	2b70      	cmp	r3, #112	; 0x70
 8002c9e:	d01a      	beq.n	8002cd6 <HAL_TIM_ConfigClockSource+0xa6>
 8002ca0:	2b70      	cmp	r3, #112	; 0x70
 8002ca2:	d87b      	bhi.n	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
 8002ca4:	2b60      	cmp	r3, #96	; 0x60
 8002ca6:	d050      	beq.n	8002d4a <HAL_TIM_ConfigClockSource+0x11a>
 8002ca8:	2b60      	cmp	r3, #96	; 0x60
 8002caa:	d877      	bhi.n	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
 8002cac:	2b50      	cmp	r3, #80	; 0x50
 8002cae:	d03c      	beq.n	8002d2a <HAL_TIM_ConfigClockSource+0xfa>
 8002cb0:	2b50      	cmp	r3, #80	; 0x50
 8002cb2:	d873      	bhi.n	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
 8002cb4:	2b40      	cmp	r3, #64	; 0x40
 8002cb6:	d058      	beq.n	8002d6a <HAL_TIM_ConfigClockSource+0x13a>
 8002cb8:	2b40      	cmp	r3, #64	; 0x40
 8002cba:	d86f      	bhi.n	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
 8002cbc:	2b30      	cmp	r3, #48	; 0x30
 8002cbe:	d064      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0x15a>
 8002cc0:	2b30      	cmp	r3, #48	; 0x30
 8002cc2:	d86b      	bhi.n	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
 8002cc4:	2b20      	cmp	r3, #32
 8002cc6:	d060      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0x15a>
 8002cc8:	2b20      	cmp	r3, #32
 8002cca:	d867      	bhi.n	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d05c      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0x15a>
 8002cd0:	2b10      	cmp	r3, #16
 8002cd2:	d05a      	beq.n	8002d8a <HAL_TIM_ConfigClockSource+0x15a>
 8002cd4:	e062      	b.n	8002d9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	6899      	ldr	r1, [r3, #8]
 8002cde:	683b      	ldr	r3, [r7, #0]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f000 fb35 	bl	8003354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002cf2:	68bb      	ldr	r3, [r7, #8]
 8002cf4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002cf8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	68ba      	ldr	r2, [r7, #8]
 8002d00:	609a      	str	r2, [r3, #8]
      break;
 8002d02:	e04f      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6818      	ldr	r0, [r3, #0]
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	6899      	ldr	r1, [r3, #8]
 8002d0c:	683b      	ldr	r3, [r7, #0]
 8002d0e:	685a      	ldr	r2, [r3, #4]
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	68db      	ldr	r3, [r3, #12]
 8002d14:	f000 fb1e 	bl	8003354 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	689a      	ldr	r2, [r3, #8]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d26:	609a      	str	r2, [r3, #8]
      break;
 8002d28:	e03c      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	6859      	ldr	r1, [r3, #4]
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	461a      	mov	r2, r3
 8002d38:	f000 fa92 	bl	8003260 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	2150      	movs	r1, #80	; 0x50
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 faeb 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 8002d48:	e02c      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	6818      	ldr	r0, [r3, #0]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	6859      	ldr	r1, [r3, #4]
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	68db      	ldr	r3, [r3, #12]
 8002d56:	461a      	mov	r2, r3
 8002d58:	f000 fab1 	bl	80032be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	2160      	movs	r1, #96	; 0x60
 8002d62:	4618      	mov	r0, r3
 8002d64:	f000 fadb 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 8002d68:	e01c      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6859      	ldr	r1, [r3, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	68db      	ldr	r3, [r3, #12]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f000 fa72 	bl	8003260 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	2140      	movs	r1, #64	; 0x40
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 facb 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 8002d88:	e00c      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681a      	ldr	r2, [r3, #0]
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4619      	mov	r1, r3
 8002d94:	4610      	mov	r0, r2
 8002d96:	f000 fac2 	bl	800331e <TIM_ITRx_SetConfig>
      break;
 8002d9a:	e003      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002da0:	e000      	b.n	8002da4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002da2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2201      	movs	r2, #1
 8002da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002db4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3710      	adds	r7, #16
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002dc0:	b480      	push	{r7}
 8002dc2:	b085      	sub	sp, #20
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
 8002dc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	4a40      	ldr	r2, [pc, #256]	; (8002ed4 <TIM_Base_SetConfig+0x114>)
 8002dd4:	4293      	cmp	r3, r2
 8002dd6:	d013      	beq.n	8002e00 <TIM_Base_SetConfig+0x40>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002dde:	d00f      	beq.n	8002e00 <TIM_Base_SetConfig+0x40>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4a3d      	ldr	r2, [pc, #244]	; (8002ed8 <TIM_Base_SetConfig+0x118>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d00b      	beq.n	8002e00 <TIM_Base_SetConfig+0x40>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a3c      	ldr	r2, [pc, #240]	; (8002edc <TIM_Base_SetConfig+0x11c>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d007      	beq.n	8002e00 <TIM_Base_SetConfig+0x40>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a3b      	ldr	r2, [pc, #236]	; (8002ee0 <TIM_Base_SetConfig+0x120>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d003      	beq.n	8002e00 <TIM_Base_SetConfig+0x40>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a3a      	ldr	r2, [pc, #232]	; (8002ee4 <TIM_Base_SetConfig+0x124>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d108      	bne.n	8002e12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	68fa      	ldr	r2, [r7, #12]
 8002e0e:	4313      	orrs	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a2f      	ldr	r2, [pc, #188]	; (8002ed4 <TIM_Base_SetConfig+0x114>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d02b      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e20:	d027      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a2c      	ldr	r2, [pc, #176]	; (8002ed8 <TIM_Base_SetConfig+0x118>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d023      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	4a2b      	ldr	r2, [pc, #172]	; (8002edc <TIM_Base_SetConfig+0x11c>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d01f      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a2a      	ldr	r2, [pc, #168]	; (8002ee0 <TIM_Base_SetConfig+0x120>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d01b      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a29      	ldr	r2, [pc, #164]	; (8002ee4 <TIM_Base_SetConfig+0x124>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d017      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a28      	ldr	r2, [pc, #160]	; (8002ee8 <TIM_Base_SetConfig+0x128>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d013      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	4a27      	ldr	r2, [pc, #156]	; (8002eec <TIM_Base_SetConfig+0x12c>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d00f      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	4a26      	ldr	r2, [pc, #152]	; (8002ef0 <TIM_Base_SetConfig+0x130>)
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d00b      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	4a25      	ldr	r2, [pc, #148]	; (8002ef4 <TIM_Base_SetConfig+0x134>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d007      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4a24      	ldr	r2, [pc, #144]	; (8002ef8 <TIM_Base_SetConfig+0x138>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d003      	beq.n	8002e72 <TIM_Base_SetConfig+0xb2>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4a23      	ldr	r2, [pc, #140]	; (8002efc <TIM_Base_SetConfig+0x13c>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d108      	bne.n	8002e84 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	68fa      	ldr	r2, [r7, #12]
 8002e80:	4313      	orrs	r3, r2
 8002e82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	695b      	ldr	r3, [r3, #20]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	68fa      	ldr	r2, [r7, #12]
 8002e96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	689a      	ldr	r2, [r3, #8]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	681a      	ldr	r2, [r3, #0]
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	4a0a      	ldr	r2, [pc, #40]	; (8002ed4 <TIM_Base_SetConfig+0x114>)
 8002eac:	4293      	cmp	r3, r2
 8002eae:	d003      	beq.n	8002eb8 <TIM_Base_SetConfig+0xf8>
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	4a0c      	ldr	r2, [pc, #48]	; (8002ee4 <TIM_Base_SetConfig+0x124>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d103      	bne.n	8002ec0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	691a      	ldr	r2, [r3, #16]
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	615a      	str	r2, [r3, #20]
}
 8002ec6:	bf00      	nop
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40010000 	.word	0x40010000
 8002ed8:	40000400 	.word	0x40000400
 8002edc:	40000800 	.word	0x40000800
 8002ee0:	40000c00 	.word	0x40000c00
 8002ee4:	40010400 	.word	0x40010400
 8002ee8:	40014000 	.word	0x40014000
 8002eec:	40014400 	.word	0x40014400
 8002ef0:	40014800 	.word	0x40014800
 8002ef4:	40001800 	.word	0x40001800
 8002ef8:	40001c00 	.word	0x40001c00
 8002efc:	40002000 	.word	0x40002000

08002f00 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b087      	sub	sp, #28
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
 8002f08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6a1b      	ldr	r3, [r3, #32]
 8002f0e:	f023 0201 	bic.w	r2, r3, #1
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	6a1b      	ldr	r3, [r3, #32]
 8002f1a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	f023 0303 	bic.w	r3, r3, #3
 8002f36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	68fa      	ldr	r2, [r7, #12]
 8002f3e:	4313      	orrs	r3, r2
 8002f40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	f023 0302 	bic.w	r3, r3, #2
 8002f48:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	697a      	ldr	r2, [r7, #20]
 8002f50:	4313      	orrs	r3, r2
 8002f52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	4a20      	ldr	r2, [pc, #128]	; (8002fd8 <TIM_OC1_SetConfig+0xd8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d003      	beq.n	8002f64 <TIM_OC1_SetConfig+0x64>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a1f      	ldr	r2, [pc, #124]	; (8002fdc <TIM_OC1_SetConfig+0xdc>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d10c      	bne.n	8002f7e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	f023 0308 	bic.w	r3, r3, #8
 8002f6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	68db      	ldr	r3, [r3, #12]
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	f023 0304 	bic.w	r3, r3, #4
 8002f7c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a15      	ldr	r2, [pc, #84]	; (8002fd8 <TIM_OC1_SetConfig+0xd8>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d003      	beq.n	8002f8e <TIM_OC1_SetConfig+0x8e>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a14      	ldr	r2, [pc, #80]	; (8002fdc <TIM_OC1_SetConfig+0xdc>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d111      	bne.n	8002fb2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002f94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002f9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	695b      	ldr	r3, [r3, #20]
 8002fa2:	693a      	ldr	r2, [r7, #16]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	699b      	ldr	r3, [r3, #24]
 8002fac:	693a      	ldr	r2, [r7, #16]
 8002fae:	4313      	orrs	r3, r2
 8002fb0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	693a      	ldr	r2, [r7, #16]
 8002fb6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685a      	ldr	r2, [r3, #4]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	697a      	ldr	r2, [r7, #20]
 8002fca:	621a      	str	r2, [r3, #32]
}
 8002fcc:	bf00      	nop
 8002fce:	371c      	adds	r7, #28
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	40010000 	.word	0x40010000
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b087      	sub	sp, #28
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
 8002fe8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
 8002fee:	f023 0210 	bic.w	r2, r3, #16
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685b      	ldr	r3, [r3, #4]
 8003000:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800300e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003016:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	021b      	lsls	r3, r3, #8
 800301e:	68fa      	ldr	r2, [r7, #12]
 8003020:	4313      	orrs	r3, r2
 8003022:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	f023 0320 	bic.w	r3, r3, #32
 800302a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	011b      	lsls	r3, r3, #4
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	4313      	orrs	r3, r2
 8003036:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a22      	ldr	r2, [pc, #136]	; (80030c4 <TIM_OC2_SetConfig+0xe4>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d003      	beq.n	8003048 <TIM_OC2_SetConfig+0x68>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	4a21      	ldr	r2, [pc, #132]	; (80030c8 <TIM_OC2_SetConfig+0xe8>)
 8003044:	4293      	cmp	r3, r2
 8003046:	d10d      	bne.n	8003064 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800304e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	68db      	ldr	r3, [r3, #12]
 8003054:	011b      	lsls	r3, r3, #4
 8003056:	697a      	ldr	r2, [r7, #20]
 8003058:	4313      	orrs	r3, r2
 800305a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800305c:	697b      	ldr	r3, [r7, #20]
 800305e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003062:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a17      	ldr	r2, [pc, #92]	; (80030c4 <TIM_OC2_SetConfig+0xe4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d003      	beq.n	8003074 <TIM_OC2_SetConfig+0x94>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a16      	ldr	r2, [pc, #88]	; (80030c8 <TIM_OC2_SetConfig+0xe8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d113      	bne.n	800309c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003074:	693b      	ldr	r3, [r7, #16]
 8003076:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800307a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800307c:	693b      	ldr	r3, [r7, #16]
 800307e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003082:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	695b      	ldr	r3, [r3, #20]
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	4313      	orrs	r3, r2
 800308e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	699b      	ldr	r3, [r3, #24]
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	693a      	ldr	r2, [r7, #16]
 8003098:	4313      	orrs	r3, r2
 800309a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	693a      	ldr	r2, [r7, #16]
 80030a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	68fa      	ldr	r2, [r7, #12]
 80030a6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685a      	ldr	r2, [r3, #4]
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	621a      	str	r2, [r3, #32]
}
 80030b6:	bf00      	nop
 80030b8:	371c      	adds	r7, #28
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40010000 	.word	0x40010000
 80030c8:	40010400 	.word	0x40010400

080030cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b087      	sub	sp, #28
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	6a1b      	ldr	r3, [r3, #32]
 80030da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6a1b      	ldr	r3, [r3, #32]
 80030e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	69db      	ldr	r3, [r3, #28]
 80030f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68fa      	ldr	r2, [r7, #12]
 800310a:	4313      	orrs	r3, r2
 800310c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800310e:	697b      	ldr	r3, [r7, #20]
 8003110:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003114:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	689b      	ldr	r3, [r3, #8]
 800311a:	021b      	lsls	r3, r3, #8
 800311c:	697a      	ldr	r2, [r7, #20]
 800311e:	4313      	orrs	r3, r2
 8003120:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a21      	ldr	r2, [pc, #132]	; (80031ac <TIM_OC3_SetConfig+0xe0>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d003      	beq.n	8003132 <TIM_OC3_SetConfig+0x66>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a20      	ldr	r2, [pc, #128]	; (80031b0 <TIM_OC3_SetConfig+0xe4>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d10d      	bne.n	800314e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003132:	697b      	ldr	r3, [r7, #20]
 8003134:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003138:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	68db      	ldr	r3, [r3, #12]
 800313e:	021b      	lsls	r3, r3, #8
 8003140:	697a      	ldr	r2, [r7, #20]
 8003142:	4313      	orrs	r3, r2
 8003144:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003146:	697b      	ldr	r3, [r7, #20]
 8003148:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800314c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	4a16      	ldr	r2, [pc, #88]	; (80031ac <TIM_OC3_SetConfig+0xe0>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d003      	beq.n	800315e <TIM_OC3_SetConfig+0x92>
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	4a15      	ldr	r2, [pc, #84]	; (80031b0 <TIM_OC3_SetConfig+0xe4>)
 800315a:	4293      	cmp	r3, r2
 800315c:	d113      	bne.n	8003186 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003166:	693b      	ldr	r3, [r7, #16]
 8003168:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800316c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	695b      	ldr	r3, [r3, #20]
 8003172:	011b      	lsls	r3, r3, #4
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	4313      	orrs	r3, r2
 8003178:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	011b      	lsls	r3, r3, #4
 8003180:	693a      	ldr	r2, [r7, #16]
 8003182:	4313      	orrs	r3, r2
 8003184:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	68fa      	ldr	r2, [r7, #12]
 8003190:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685a      	ldr	r2, [r3, #4]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	697a      	ldr	r2, [r7, #20]
 800319e:	621a      	str	r2, [r3, #32]
}
 80031a0:	bf00      	nop
 80031a2:	371c      	adds	r7, #28
 80031a4:	46bd      	mov	sp, r7
 80031a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031aa:	4770      	bx	lr
 80031ac:	40010000 	.word	0x40010000
 80031b0:	40010400 	.word	0x40010400

080031b4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b087      	sub	sp, #28
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80031fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	031b      	lsls	r3, r3, #12
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	4313      	orrs	r3, r2
 800320a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a12      	ldr	r2, [pc, #72]	; (8003258 <TIM_OC4_SetConfig+0xa4>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_OC4_SetConfig+0x68>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a11      	ldr	r2, [pc, #68]	; (800325c <TIM_OC4_SetConfig+0xa8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d109      	bne.n	8003230 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003222:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	695b      	ldr	r3, [r3, #20]
 8003228:	019b      	lsls	r3, r3, #6
 800322a:	697a      	ldr	r2, [r7, #20]
 800322c:	4313      	orrs	r3, r2
 800322e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	68fa      	ldr	r2, [r7, #12]
 800323a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	685a      	ldr	r2, [r3, #4]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	693a      	ldr	r2, [r7, #16]
 8003248:	621a      	str	r2, [r3, #32]
}
 800324a:	bf00      	nop
 800324c:	371c      	adds	r7, #28
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	40010000 	.word	0x40010000
 800325c:	40010400 	.word	0x40010400

08003260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f023 0201 	bic.w	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800328a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f023 030a 	bic.w	r3, r3, #10
 800329c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	621a      	str	r2, [r3, #32]
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032be:	b480      	push	{r7}
 80032c0:	b087      	sub	sp, #28
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	60f8      	str	r0, [r7, #12]
 80032c6:	60b9      	str	r1, [r7, #8]
 80032c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6a1b      	ldr	r3, [r3, #32]
 80032ce:	f023 0210 	bic.w	r2, r3, #16
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	699b      	ldr	r3, [r3, #24]
 80032da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	6a1b      	ldr	r3, [r3, #32]
 80032e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032e2:	697b      	ldr	r3, [r7, #20]
 80032e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	031b      	lsls	r3, r3, #12
 80032ee:	697a      	ldr	r2, [r7, #20]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	011b      	lsls	r3, r3, #4
 8003300:	693a      	ldr	r2, [r7, #16]
 8003302:	4313      	orrs	r3, r2
 8003304:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	697a      	ldr	r2, [r7, #20]
 800330a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	693a      	ldr	r2, [r7, #16]
 8003310:	621a      	str	r2, [r3, #32]
}
 8003312:	bf00      	nop
 8003314:	371c      	adds	r7, #28
 8003316:	46bd      	mov	sp, r7
 8003318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800331c:	4770      	bx	lr

0800331e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800331e:	b480      	push	{r7}
 8003320:	b085      	sub	sp, #20
 8003322:	af00      	add	r7, sp, #0
 8003324:	6078      	str	r0, [r7, #4]
 8003326:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003334:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003336:	683a      	ldr	r2, [r7, #0]
 8003338:	68fb      	ldr	r3, [r7, #12]
 800333a:	4313      	orrs	r3, r2
 800333c:	f043 0307 	orr.w	r3, r3, #7
 8003340:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	68fa      	ldr	r2, [r7, #12]
 8003346:	609a      	str	r2, [r3, #8]
}
 8003348:	bf00      	nop
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr

08003354 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003354:	b480      	push	{r7}
 8003356:	b087      	sub	sp, #28
 8003358:	af00      	add	r7, sp, #0
 800335a:	60f8      	str	r0, [r7, #12]
 800335c:	60b9      	str	r1, [r7, #8]
 800335e:	607a      	str	r2, [r7, #4]
 8003360:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	689b      	ldr	r3, [r3, #8]
 8003366:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800336e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	021a      	lsls	r2, r3, #8
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	431a      	orrs	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	4313      	orrs	r3, r2
 800337c:	697a      	ldr	r2, [r7, #20]
 800337e:	4313      	orrs	r3, r2
 8003380:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	697a      	ldr	r2, [r7, #20]
 8003386:	609a      	str	r2, [r3, #8]
}
 8003388:	bf00      	nop
 800338a:	371c      	adds	r7, #28
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr

08003394 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003394:	b480      	push	{r7}
 8003396:	b087      	sub	sp, #28
 8003398:	af00      	add	r7, sp, #0
 800339a:	60f8      	str	r0, [r7, #12]
 800339c:	60b9      	str	r1, [r7, #8]
 800339e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80033a0:	68bb      	ldr	r3, [r7, #8]
 80033a2:	f003 031f 	and.w	r3, r3, #31
 80033a6:	2201      	movs	r2, #1
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6a1a      	ldr	r2, [r3, #32]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	43db      	mvns	r3, r3
 80033b6:	401a      	ands	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	6a1a      	ldr	r2, [r3, #32]
 80033c0:	68bb      	ldr	r3, [r7, #8]
 80033c2:	f003 031f 	and.w	r3, r3, #31
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	fa01 f303 	lsl.w	r3, r1, r3
 80033cc:	431a      	orrs	r2, r3
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	621a      	str	r2, [r3, #32]
}
 80033d2:	bf00      	nop
 80033d4:	371c      	adds	r7, #28
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr
	...

080033e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b085      	sub	sp, #20
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	6078      	str	r0, [r7, #4]
 80033e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d101      	bne.n	80033f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033f4:	2302      	movs	r3, #2
 80033f6:	e05a      	b.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2201      	movs	r2, #1
 80033fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2202      	movs	r2, #2
 8003404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	689b      	ldr	r3, [r3, #8]
 8003416:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800341e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68fa      	ldr	r2, [r7, #12]
 8003426:	4313      	orrs	r3, r2
 8003428:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	68fa      	ldr	r2, [r7, #12]
 8003430:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	4a21      	ldr	r2, [pc, #132]	; (80034bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003438:	4293      	cmp	r3, r2
 800343a:	d022      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003444:	d01d      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	4a1d      	ldr	r2, [pc, #116]	; (80034c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800344c:	4293      	cmp	r3, r2
 800344e:	d018      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4a1b      	ldr	r2, [pc, #108]	; (80034c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003456:	4293      	cmp	r3, r2
 8003458:	d013      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4a1a      	ldr	r2, [pc, #104]	; (80034c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d00e      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a18      	ldr	r2, [pc, #96]	; (80034cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800346a:	4293      	cmp	r3, r2
 800346c:	d009      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d004      	beq.n	8003482 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d10c      	bne.n	800349c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003488:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	4313      	orrs	r3, r2
 8003492:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68ba      	ldr	r2, [r7, #8]
 800349a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2201      	movs	r2, #1
 80034a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80034ac:	2300      	movs	r3, #0
}
 80034ae:	4618      	mov	r0, r3
 80034b0:	3714      	adds	r7, #20
 80034b2:	46bd      	mov	sp, r7
 80034b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b8:	4770      	bx	lr
 80034ba:	bf00      	nop
 80034bc:	40010000 	.word	0x40010000
 80034c0:	40000400 	.word	0x40000400
 80034c4:	40000800 	.word	0x40000800
 80034c8:	40000c00 	.word	0x40000c00
 80034cc:	40010400 	.word	0x40010400
 80034d0:	40014000 	.word	0x40014000
 80034d4:	40001800 	.word	0x40001800

080034d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d101      	bne.n	80034ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	e03f      	b.n	800356a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d106      	bne.n	8003504 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034fe:	6878      	ldr	r0, [r7, #4]
 8003500:	f7fd fc0c 	bl	8000d1c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2224      	movs	r2, #36	; 0x24
 8003508:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68da      	ldr	r2, [r3, #12]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800351a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800351c:	6878      	ldr	r0, [r7, #4]
 800351e:	f000 ff69 	bl	80043f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003530:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	695a      	ldr	r2, [r3, #20]
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003540:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	68da      	ldr	r2, [r3, #12]
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003550:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2220      	movs	r2, #32
 800355c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2220      	movs	r2, #32
 8003564:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003568:	2300      	movs	r3, #0
}
 800356a:	4618      	mov	r0, r3
 800356c:	3708      	adds	r7, #8
 800356e:	46bd      	mov	sp, r7
 8003570:	bd80      	pop	{r7, pc}

08003572 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003572:	b580      	push	{r7, lr}
 8003574:	b08a      	sub	sp, #40	; 0x28
 8003576:	af02      	add	r7, sp, #8
 8003578:	60f8      	str	r0, [r7, #12]
 800357a:	60b9      	str	r1, [r7, #8]
 800357c:	603b      	str	r3, [r7, #0]
 800357e:	4613      	mov	r3, r2
 8003580:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b20      	cmp	r3, #32
 8003590:	d17c      	bne.n	800368c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b00      	cmp	r3, #0
 8003596:	d002      	beq.n	800359e <HAL_UART_Transmit+0x2c>
 8003598:	88fb      	ldrh	r3, [r7, #6]
 800359a:	2b00      	cmp	r3, #0
 800359c:	d101      	bne.n	80035a2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800359e:	2301      	movs	r3, #1
 80035a0:	e075      	b.n	800368e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	d101      	bne.n	80035b0 <HAL_UART_Transmit+0x3e>
 80035ac:	2302      	movs	r3, #2
 80035ae:	e06e      	b.n	800368e <HAL_UART_Transmit+0x11c>
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2200      	movs	r2, #0
 80035bc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2221      	movs	r2, #33	; 0x21
 80035c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80035c6:	f7fd fd89 	bl	80010dc <HAL_GetTick>
 80035ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	88fa      	ldrh	r2, [r7, #6]
 80035d0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	88fa      	ldrh	r2, [r7, #6]
 80035d6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	689b      	ldr	r3, [r3, #8]
 80035dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80035e0:	d108      	bne.n	80035f4 <HAL_UART_Transmit+0x82>
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d104      	bne.n	80035f4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ee:	68bb      	ldr	r3, [r7, #8]
 80035f0:	61bb      	str	r3, [r7, #24]
 80035f2:	e003      	b.n	80035fc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035f8:	2300      	movs	r3, #0
 80035fa:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003604:	e02a      	b.n	800365c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	9300      	str	r3, [sp, #0]
 800360a:	697b      	ldr	r3, [r7, #20]
 800360c:	2200      	movs	r2, #0
 800360e:	2180      	movs	r1, #128	; 0x80
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f000 fc21 	bl	8003e58 <UART_WaitOnFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e036      	b.n	800368e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003620:	69fb      	ldr	r3, [r7, #28]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d10b      	bne.n	800363e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	881b      	ldrh	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003634:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003636:	69bb      	ldr	r3, [r7, #24]
 8003638:	3302      	adds	r3, #2
 800363a:	61bb      	str	r3, [r7, #24]
 800363c:	e007      	b.n	800364e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	781a      	ldrb	r2, [r3, #0]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003648:	69fb      	ldr	r3, [r7, #28]
 800364a:	3301      	adds	r3, #1
 800364c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003652:	b29b      	uxth	r3, r3
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1cf      	bne.n	8003606 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	2200      	movs	r2, #0
 800366e:	2140      	movs	r1, #64	; 0x40
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fbf1 	bl	8003e58 <UART_WaitOnFlagUntilTimeout>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e006      	b.n	800368e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003688:	2300      	movs	r3, #0
 800368a:	e000      	b.n	800368e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800368c:	2302      	movs	r3, #2
  }
}
 800368e:	4618      	mov	r0, r3
 8003690:	3720      	adds	r7, #32
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	60f8      	str	r0, [r7, #12]
 800369e:	60b9      	str	r1, [r7, #8]
 80036a0:	4613      	mov	r3, r2
 80036a2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	2b20      	cmp	r3, #32
 80036ae:	d11d      	bne.n	80036ec <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80036b0:	68bb      	ldr	r3, [r7, #8]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d002      	beq.n	80036bc <HAL_UART_Receive_DMA+0x26>
 80036b6:	88fb      	ldrh	r3, [r7, #6]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e016      	b.n	80036ee <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036c6:	2b01      	cmp	r3, #1
 80036c8:	d101      	bne.n	80036ce <HAL_UART_Receive_DMA+0x38>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e00f      	b.n	80036ee <HAL_UART_Receive_DMA+0x58>
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2201      	movs	r2, #1
 80036d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2200      	movs	r2, #0
 80036da:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80036dc:	88fb      	ldrh	r3, [r7, #6]
 80036de:	461a      	mov	r2, r3
 80036e0:	68b9      	ldr	r1, [r7, #8]
 80036e2:	68f8      	ldr	r0, [r7, #12]
 80036e4:	f000 fc26 	bl	8003f34 <UART_Start_Receive_DMA>
 80036e8:	4603      	mov	r3, r0
 80036ea:	e000      	b.n	80036ee <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80036ec:	2302      	movs	r3, #2
  }
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3710      	adds	r7, #16
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
	...

080036f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b0ba      	sub	sp, #232	; 0xe8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	695b      	ldr	r3, [r3, #20]
 800371a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800371e:	2300      	movs	r3, #0
 8003720:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8003724:	2300      	movs	r3, #0
 8003726:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800372a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800372e:	f003 030f 	and.w	r3, r3, #15
 8003732:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8003736:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800373a:	2b00      	cmp	r3, #0
 800373c:	d10f      	bne.n	800375e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800373e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003742:	f003 0320 	and.w	r3, r3, #32
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_UART_IRQHandler+0x66>
 800374a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800374e:	f003 0320 	and.w	r3, r3, #32
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fd91 	bl	800427e <UART_Receive_IT>
      return;
 800375c:	e256      	b.n	8003c0c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800375e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003762:	2b00      	cmp	r3, #0
 8003764:	f000 80de 	beq.w	8003924 <HAL_UART_IRQHandler+0x22c>
 8003768:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800376c:	f003 0301 	and.w	r3, r3, #1
 8003770:	2b00      	cmp	r3, #0
 8003772:	d106      	bne.n	8003782 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003774:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003778:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800377c:	2b00      	cmp	r3, #0
 800377e:	f000 80d1 	beq.w	8003924 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d00b      	beq.n	80037a6 <HAL_UART_IRQHandler+0xae>
 800378e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003792:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003796:	2b00      	cmp	r3, #0
 8003798:	d005      	beq.n	80037a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379e:	f043 0201 	orr.w	r2, r3, #1
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037aa:	f003 0304 	and.w	r3, r3, #4
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d00b      	beq.n	80037ca <HAL_UART_IRQHandler+0xd2>
 80037b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d005      	beq.n	80037ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037c2:	f043 0202 	orr.w	r2, r3, #2
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80037ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ce:	f003 0302 	and.w	r3, r3, #2
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d00b      	beq.n	80037ee <HAL_UART_IRQHandler+0xf6>
 80037d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037da:	f003 0301 	and.w	r3, r3, #1
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d005      	beq.n	80037ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f043 0204 	orr.w	r2, r3, #4
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80037ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037f2:	f003 0308 	and.w	r3, r3, #8
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d011      	beq.n	800381e <HAL_UART_IRQHandler+0x126>
 80037fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037fe:	f003 0320 	and.w	r3, r3, #32
 8003802:	2b00      	cmp	r3, #0
 8003804:	d105      	bne.n	8003812 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003806:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d005      	beq.n	800381e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003816:	f043 0208 	orr.w	r2, r3, #8
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003822:	2b00      	cmp	r3, #0
 8003824:	f000 81ed 	beq.w	8003c02 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003828:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d008      	beq.n	8003846 <HAL_UART_IRQHandler+0x14e>
 8003834:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003838:	f003 0320 	and.w	r3, r3, #32
 800383c:	2b00      	cmp	r3, #0
 800383e:	d002      	beq.n	8003846 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003840:	6878      	ldr	r0, [r7, #4]
 8003842:	f000 fd1c 	bl	800427e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003850:	2b40      	cmp	r3, #64	; 0x40
 8003852:	bf0c      	ite	eq
 8003854:	2301      	moveq	r3, #1
 8003856:	2300      	movne	r3, #0
 8003858:	b2db      	uxtb	r3, r3
 800385a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003862:	f003 0308 	and.w	r3, r3, #8
 8003866:	2b00      	cmp	r3, #0
 8003868:	d103      	bne.n	8003872 <HAL_UART_IRQHandler+0x17a>
 800386a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800386e:	2b00      	cmp	r3, #0
 8003870:	d04f      	beq.n	8003912 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fc24 	bl	80040c0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003882:	2b40      	cmp	r3, #64	; 0x40
 8003884:	d141      	bne.n	800390a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	3314      	adds	r3, #20
 800388c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003890:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003894:	e853 3f00 	ldrex	r3, [r3]
 8003898:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800389c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80038a0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	3314      	adds	r3, #20
 80038ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80038b2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80038b6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80038be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80038ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d1d9      	bne.n	8003886 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d013      	beq.n	8003902 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038de:	4a7d      	ldr	r2, [pc, #500]	; (8003ad4 <HAL_UART_IRQHandler+0x3dc>)
 80038e0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fd feb0 	bl	800164c <HAL_DMA_Abort_IT>
 80038ec:	4603      	mov	r3, r0
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d016      	beq.n	8003920 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80038f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80038fc:	4610      	mov	r0, r2
 80038fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003900:	e00e      	b.n	8003920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 f99a 	bl	8003c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003908:	e00a      	b.n	8003920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f000 f996 	bl	8003c3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003910:	e006      	b.n	8003920 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 f992 	bl	8003c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2200      	movs	r2, #0
 800391c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800391e:	e170      	b.n	8003c02 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003920:	bf00      	nop
    return;
 8003922:	e16e      	b.n	8003c02 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003928:	2b01      	cmp	r3, #1
 800392a:	f040 814a 	bne.w	8003bc2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800392e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003932:	f003 0310 	and.w	r3, r3, #16
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 8143 	beq.w	8003bc2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800393c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003940:	f003 0310 	and.w	r3, r3, #16
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 813c 	beq.w	8003bc2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800394a:	2300      	movs	r3, #0
 800394c:	60bb      	str	r3, [r7, #8]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	60bb      	str	r3, [r7, #8]
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	60bb      	str	r3, [r7, #8]
 800395e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	695b      	ldr	r3, [r3, #20]
 8003966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800396a:	2b40      	cmp	r3, #64	; 0x40
 800396c:	f040 80b4 	bne.w	8003ad8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	685b      	ldr	r3, [r3, #4]
 8003978:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800397c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003980:	2b00      	cmp	r3, #0
 8003982:	f000 8140 	beq.w	8003c06 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800398a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800398e:	429a      	cmp	r2, r3
 8003990:	f080 8139 	bcs.w	8003c06 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800399a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a0:	69db      	ldr	r3, [r3, #28]
 80039a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80039a6:	f000 8088 	beq.w	8003aba <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	330c      	adds	r3, #12
 80039b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039b8:	e853 3f00 	ldrex	r3, [r3]
 80039bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80039c0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80039c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80039c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	330c      	adds	r3, #12
 80039d2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80039d6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80039da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039de:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80039e2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80039e6:	e841 2300 	strex	r3, r2, [r1]
 80039ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80039ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d1d9      	bne.n	80039aa <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	3314      	adds	r3, #20
 80039fc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a00:	e853 3f00 	ldrex	r3, [r3]
 8003a04:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003a06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a08:	f023 0301 	bic.w	r3, r3, #1
 8003a0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	3314      	adds	r3, #20
 8003a16:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003a1a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003a1e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a20:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003a22:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003a26:	e841 2300 	strex	r3, r2, [r1]
 8003a2a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003a2c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1e1      	bne.n	80039f6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	3314      	adds	r3, #20
 8003a38:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a3a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a3c:	e853 3f00 	ldrex	r3, [r3]
 8003a40:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003a42:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003a48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	3314      	adds	r3, #20
 8003a52:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003a56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003a58:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a5a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003a5c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003a5e:	e841 2300 	strex	r3, r2, [r1]
 8003a62:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003a64:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1e3      	bne.n	8003a32 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2220      	movs	r2, #32
 8003a6e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	330c      	adds	r3, #12
 8003a7e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a80:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a82:	e853 3f00 	ldrex	r3, [r3]
 8003a86:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003a8a:	f023 0310 	bic.w	r3, r3, #16
 8003a8e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	330c      	adds	r3, #12
 8003a98:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8003a9c:	65ba      	str	r2, [r7, #88]	; 0x58
 8003a9e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aa0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003aa2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003aa4:	e841 2300 	strex	r3, r2, [r1]
 8003aa8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d1e3      	bne.n	8003a78 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	f7fd fd59 	bl	800156c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	b29b      	uxth	r3, r3
 8003ac8:	4619      	mov	r1, r3
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f000 f8c0 	bl	8003c50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003ad0:	e099      	b.n	8003c06 <HAL_UART_IRQHandler+0x50e>
 8003ad2:	bf00      	nop
 8003ad4:	08004187 	.word	0x08004187
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	1ad3      	subs	r3, r2, r3
 8003ae4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003aec:	b29b      	uxth	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	f000 808b 	beq.w	8003c0a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8003af4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 8086 	beq.w	8003c0a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	330c      	adds	r3, #12
 8003b04:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b08:	e853 3f00 	ldrex	r3, [r3]
 8003b0c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b10:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003b14:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	330c      	adds	r3, #12
 8003b1e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8003b22:	647a      	str	r2, [r7, #68]	; 0x44
 8003b24:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b26:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003b28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003b2a:	e841 2300 	strex	r3, r2, [r1]
 8003b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003b30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d1e3      	bne.n	8003afe <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	3314      	adds	r3, #20
 8003b3c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b40:	e853 3f00 	ldrex	r3, [r3]
 8003b44:	623b      	str	r3, [r7, #32]
   return(result);
 8003b46:	6a3b      	ldr	r3, [r7, #32]
 8003b48:	f023 0301 	bic.w	r3, r3, #1
 8003b4c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3314      	adds	r3, #20
 8003b56:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003b5a:	633a      	str	r2, [r7, #48]	; 0x30
 8003b5c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b5e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b60:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b62:	e841 2300 	strex	r3, r2, [r1]
 8003b66:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003b68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d1e3      	bne.n	8003b36 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	2220      	movs	r2, #32
 8003b72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2200      	movs	r2, #0
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	330c      	adds	r3, #12
 8003b82:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b84:	693b      	ldr	r3, [r7, #16]
 8003b86:	e853 3f00 	ldrex	r3, [r3]
 8003b8a:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f023 0310 	bic.w	r3, r3, #16
 8003b92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	330c      	adds	r3, #12
 8003b9c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003ba0:	61fa      	str	r2, [r7, #28]
 8003ba2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	69b9      	ldr	r1, [r7, #24]
 8003ba6:	69fa      	ldr	r2, [r7, #28]
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	617b      	str	r3, [r7, #20]
   return(result);
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e3      	bne.n	8003b7c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003bb4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003bb8:	4619      	mov	r1, r3
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f000 f848 	bl	8003c50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003bc0:	e023      	b.n	8003c0a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003bc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d009      	beq.n	8003be2 <HAL_UART_IRQHandler+0x4ea>
 8003bce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fae7 	bl	80041ae <UART_Transmit_IT>
    return;
 8003be0:	e014      	b.n	8003c0c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003be6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d00e      	beq.n	8003c0c <HAL_UART_IRQHandler+0x514>
 8003bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003bf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d008      	beq.n	8003c0c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f000 fb27 	bl	800424e <UART_EndTransmit_IT>
    return;
 8003c00:	e004      	b.n	8003c0c <HAL_UART_IRQHandler+0x514>
    return;
 8003c02:	bf00      	nop
 8003c04:	e002      	b.n	8003c0c <HAL_UART_IRQHandler+0x514>
      return;
 8003c06:	bf00      	nop
 8003c08:	e000      	b.n	8003c0c <HAL_UART_IRQHandler+0x514>
      return;
 8003c0a:	bf00      	nop
  }
}
 8003c0c:	37e8      	adds	r7, #232	; 0xe8
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop

08003c14 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003c14:	b480      	push	{r7}
 8003c16:	b083      	sub	sp, #12
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003c1c:	bf00      	nop
 8003c1e:	370c      	adds	r7, #12
 8003c20:	46bd      	mov	sp, r7
 8003c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c26:	4770      	bx	lr

08003c28 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b083      	sub	sp, #12
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8003c30:	bf00      	nop
 8003c32:	370c      	adds	r7, #12
 8003c34:	46bd      	mov	sp, r7
 8003c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3a:	4770      	bx	lr

08003c3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b083      	sub	sp, #12
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003c44:	bf00      	nop
 8003c46:	370c      	adds	r7, #12
 8003c48:	46bd      	mov	sp, r7
 8003c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4e:	4770      	bx	lr

08003c50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003c50:	b480      	push	{r7}
 8003c52:	b083      	sub	sp, #12
 8003c54:	af00      	add	r7, sp, #0
 8003c56:	6078      	str	r0, [r7, #4]
 8003c58:	460b      	mov	r3, r1
 8003c5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003c5c:	bf00      	nop
 8003c5e:	370c      	adds	r7, #12
 8003c60:	46bd      	mov	sp, r7
 8003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c66:	4770      	bx	lr

08003c68 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b09c      	sub	sp, #112	; 0x70
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c74:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d172      	bne.n	8003d6a <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8003c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c86:	2200      	movs	r2, #0
 8003c88:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	330c      	adds	r3, #12
 8003c90:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c92:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c94:	e853 3f00 	ldrex	r3, [r3]
 8003c98:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003c9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ca0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	330c      	adds	r3, #12
 8003ca8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003caa:	65ba      	str	r2, [r7, #88]	; 0x58
 8003cac:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003cb0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003cb2:	e841 2300 	strex	r3, r2, [r1]
 8003cb6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003cb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d1e5      	bne.n	8003c8a <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	3314      	adds	r3, #20
 8003cc4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc8:	e853 3f00 	ldrex	r3, [r3]
 8003ccc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003cce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003cd0:	f023 0301 	bic.w	r3, r3, #1
 8003cd4:	667b      	str	r3, [r7, #100]	; 0x64
 8003cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	3314      	adds	r3, #20
 8003cdc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8003cde:	647a      	str	r2, [r7, #68]	; 0x44
 8003ce0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ce2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003ce4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003cec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d1e5      	bne.n	8003cbe <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cf2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	3314      	adds	r3, #20
 8003cf8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	e853 3f00 	ldrex	r3, [r3]
 8003d00:	623b      	str	r3, [r7, #32]
   return(result);
 8003d02:	6a3b      	ldr	r3, [r7, #32]
 8003d04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d08:	663b      	str	r3, [r7, #96]	; 0x60
 8003d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	3314      	adds	r3, #20
 8003d10:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d12:	633a      	str	r2, [r7, #48]	; 0x30
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003d18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003d1a:	e841 2300 	strex	r3, r2, [r1]
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d1e5      	bne.n	8003cf2 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003d26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d28:	2220      	movs	r2, #32
 8003d2a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d32:	2b01      	cmp	r3, #1
 8003d34:	d119      	bne.n	8003d6a <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	330c      	adds	r3, #12
 8003d3c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	e853 3f00 	ldrex	r3, [r3]
 8003d44:	60fb      	str	r3, [r7, #12]
   return(result);
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	f023 0310 	bic.w	r3, r3, #16
 8003d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	330c      	adds	r3, #12
 8003d54:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d56:	61fa      	str	r2, [r7, #28]
 8003d58:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d5a:	69b9      	ldr	r1, [r7, #24]
 8003d5c:	69fa      	ldr	r2, [r7, #28]
 8003d5e:	e841 2300 	strex	r3, r2, [r1]
 8003d62:	617b      	str	r3, [r7, #20]
   return(result);
 8003d64:	697b      	ldr	r3, [r7, #20]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d1e5      	bne.n	8003d36 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d106      	bne.n	8003d80 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003d72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003d76:	4619      	mov	r1, r3
 8003d78:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003d7a:	f7ff ff69 	bl	8003c50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003d7e:	e002      	b.n	8003d86 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003d80:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8003d82:	f7fc fc6b 	bl	800065c <HAL_UART_RxCpltCallback>
}
 8003d86:	bf00      	nop
 8003d88:	3770      	adds	r7, #112	; 0x70
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}

08003d8e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d108      	bne.n	8003db6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003da8:	085b      	lsrs	r3, r3, #1
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	4619      	mov	r1, r3
 8003dae:	68f8      	ldr	r0, [r7, #12]
 8003db0:	f7ff ff4e 	bl	8003c50 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003db4:	e002      	b.n	8003dbc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f7ff ff36 	bl	8003c28 <HAL_UART_RxHalfCpltCallback>
}
 8003dbc:	bf00      	nop
 8003dbe:	3710      	adds	r7, #16
 8003dc0:	46bd      	mov	sp, r7
 8003dc2:	bd80      	pop	{r7, pc}

08003dc4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b084      	sub	sp, #16
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dd4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	695b      	ldr	r3, [r3, #20]
 8003ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de0:	2b80      	cmp	r3, #128	; 0x80
 8003de2:	bf0c      	ite	eq
 8003de4:	2301      	moveq	r3, #1
 8003de6:	2300      	movne	r3, #0
 8003de8:	b2db      	uxtb	r3, r3
 8003dea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	2b21      	cmp	r3, #33	; 0x21
 8003df6:	d108      	bne.n	8003e0a <UART_DMAError+0x46>
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d005      	beq.n	8003e0a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2200      	movs	r2, #0
 8003e02:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8003e04:	68b8      	ldr	r0, [r7, #8]
 8003e06:	f000 f933 	bl	8004070 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	695b      	ldr	r3, [r3, #20]
 8003e10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e14:	2b40      	cmp	r3, #64	; 0x40
 8003e16:	bf0c      	ite	eq
 8003e18:	2301      	moveq	r3, #1
 8003e1a:	2300      	movne	r3, #0
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e26:	b2db      	uxtb	r3, r3
 8003e28:	2b22      	cmp	r3, #34	; 0x22
 8003e2a:	d108      	bne.n	8003e3e <UART_DMAError+0x7a>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d005      	beq.n	8003e3e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8003e32:	68bb      	ldr	r3, [r7, #8]
 8003e34:	2200      	movs	r2, #0
 8003e36:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003e38:	68b8      	ldr	r0, [r7, #8]
 8003e3a:	f000 f941 	bl	80040c0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e42:	f043 0210 	orr.w	r2, r3, #16
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e4a:	68b8      	ldr	r0, [r7, #8]
 8003e4c:	f7ff fef6 	bl	8003c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e50:	bf00      	nop
 8003e52:	3710      	adds	r7, #16
 8003e54:	46bd      	mov	sp, r7
 8003e56:	bd80      	pop	{r7, pc}

08003e58 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b090      	sub	sp, #64	; 0x40
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	603b      	str	r3, [r7, #0]
 8003e64:	4613      	mov	r3, r2
 8003e66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e68:	e050      	b.n	8003f0c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e70:	d04c      	beq.n	8003f0c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d007      	beq.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e78:	f7fd f930 	bl	80010dc <HAL_GetTick>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	1ad3      	subs	r3, r2, r3
 8003e82:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e84:	429a      	cmp	r2, r3
 8003e86:	d241      	bcs.n	8003f0c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	330c      	adds	r3, #12
 8003e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e92:	e853 3f00 	ldrex	r3, [r3]
 8003e96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e9e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	330c      	adds	r3, #12
 8003ea6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003ea8:	637a      	str	r2, [r7, #52]	; 0x34
 8003eaa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003eac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eb0:	e841 2300 	strex	r3, r2, [r1]
 8003eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e5      	bne.n	8003e88 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	3314      	adds	r3, #20
 8003ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	e853 3f00 	ldrex	r3, [r3]
 8003eca:	613b      	str	r3, [r7, #16]
   return(result);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f023 0301 	bic.w	r3, r3, #1
 8003ed2:	63bb      	str	r3, [r7, #56]	; 0x38
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	3314      	adds	r3, #20
 8003eda:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003edc:	623a      	str	r2, [r7, #32]
 8003ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ee0:	69f9      	ldr	r1, [r7, #28]
 8003ee2:	6a3a      	ldr	r2, [r7, #32]
 8003ee4:	e841 2300 	strex	r3, r2, [r1]
 8003ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8003eea:	69bb      	ldr	r3, [r7, #24]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d1e5      	bne.n	8003ebc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	2220      	movs	r2, #32
 8003ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2220      	movs	r2, #32
 8003efc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	e00f      	b.n	8003f2c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681a      	ldr	r2, [r3, #0]
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	4013      	ands	r3, r2
 8003f16:	68ba      	ldr	r2, [r7, #8]
 8003f18:	429a      	cmp	r2, r3
 8003f1a:	bf0c      	ite	eq
 8003f1c:	2301      	moveq	r3, #1
 8003f1e:	2300      	movne	r3, #0
 8003f20:	b2db      	uxtb	r3, r3
 8003f22:	461a      	mov	r2, r3
 8003f24:	79fb      	ldrb	r3, [r7, #7]
 8003f26:	429a      	cmp	r2, r3
 8003f28:	d09f      	beq.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003f2a:	2300      	movs	r3, #0
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3740      	adds	r7, #64	; 0x40
 8003f30:	46bd      	mov	sp, r7
 8003f32:	bd80      	pop	{r7, pc}

08003f34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b098      	sub	sp, #96	; 0x60
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	60f8      	str	r0, [r7, #12]
 8003f3c:	60b9      	str	r1, [r7, #8]
 8003f3e:	4613      	mov	r3, r2
 8003f40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8003f42:	68ba      	ldr	r2, [r7, #8]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	88fa      	ldrh	r2, [r7, #6]
 8003f4c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2222      	movs	r2, #34	; 0x22
 8003f58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f60:	4a40      	ldr	r2, [pc, #256]	; (8004064 <UART_Start_Receive_DMA+0x130>)
 8003f62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f68:	4a3f      	ldr	r2, [pc, #252]	; (8004068 <UART_Start_Receive_DMA+0x134>)
 8003f6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f70:	4a3e      	ldr	r2, [pc, #248]	; (800406c <UART_Start_Receive_DMA+0x138>)
 8003f72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f78:	2200      	movs	r2, #0
 8003f7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8003f7c:	f107 0308 	add.w	r3, r7, #8
 8003f80:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	3304      	adds	r3, #4
 8003f8c:	4619      	mov	r1, r3
 8003f8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	88fb      	ldrh	r3, [r7, #6]
 8003f94:	f7fd fa92 	bl	80014bc <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003f98:	2300      	movs	r3, #0
 8003f9a:	613b      	str	r3, [r7, #16]
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	613b      	str	r3, [r7, #16]
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	613b      	str	r3, [r7, #16]
 8003fac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	691b      	ldr	r3, [r3, #16]
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d019      	beq.n	8003ff2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	330c      	adds	r3, #12
 8003fc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003fce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	330c      	adds	r3, #12
 8003fdc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fde:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003fe0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003fe4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003fe6:	e841 2300 	strex	r3, r2, [r1]
 8003fea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8003fec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1e5      	bne.n	8003fbe <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	3314      	adds	r3, #20
 8003ff8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ffa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ffc:	e853 3f00 	ldrex	r3, [r3]
 8004000:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004004:	f043 0301 	orr.w	r3, r3, #1
 8004008:	657b      	str	r3, [r7, #84]	; 0x54
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	3314      	adds	r3, #20
 8004010:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004012:	63ba      	str	r2, [r7, #56]	; 0x38
 8004014:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004016:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004018:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800401a:	e841 2300 	strex	r3, r2, [r1]
 800401e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004020:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004022:	2b00      	cmp	r3, #0
 8004024:	d1e5      	bne.n	8003ff2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	3314      	adds	r3, #20
 800402c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	e853 3f00 	ldrex	r3, [r3]
 8004034:	617b      	str	r3, [r7, #20]
   return(result);
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800403c:	653b      	str	r3, [r7, #80]	; 0x50
 800403e:	68fb      	ldr	r3, [r7, #12]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	3314      	adds	r3, #20
 8004044:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004046:	627a      	str	r2, [r7, #36]	; 0x24
 8004048:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800404a:	6a39      	ldr	r1, [r7, #32]
 800404c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800404e:	e841 2300 	strex	r3, r2, [r1]
 8004052:	61fb      	str	r3, [r7, #28]
   return(result);
 8004054:	69fb      	ldr	r3, [r7, #28]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d1e5      	bne.n	8004026 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3760      	adds	r7, #96	; 0x60
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}
 8004064:	08003c69 	.word	0x08003c69
 8004068:	08003d8f 	.word	0x08003d8f
 800406c:	08003dc5 	.word	0x08003dc5

08004070 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004070:	b480      	push	{r7}
 8004072:	b089      	sub	sp, #36	; 0x24
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	330c      	adds	r3, #12
 800407e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	e853 3f00 	ldrex	r3, [r3]
 8004086:	60bb      	str	r3, [r7, #8]
   return(result);
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800408e:	61fb      	str	r3, [r7, #28]
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	330c      	adds	r3, #12
 8004096:	69fa      	ldr	r2, [r7, #28]
 8004098:	61ba      	str	r2, [r7, #24]
 800409a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800409c:	6979      	ldr	r1, [r7, #20]
 800409e:	69ba      	ldr	r2, [r7, #24]
 80040a0:	e841 2300 	strex	r3, r2, [r1]
 80040a4:	613b      	str	r3, [r7, #16]
   return(result);
 80040a6:	693b      	ldr	r3, [r7, #16]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d1e5      	bne.n	8004078 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2220      	movs	r2, #32
 80040b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 80040b4:	bf00      	nop
 80040b6:	3724      	adds	r7, #36	; 0x24
 80040b8:	46bd      	mov	sp, r7
 80040ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040be:	4770      	bx	lr

080040c0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040c0:	b480      	push	{r7}
 80040c2:	b095      	sub	sp, #84	; 0x54
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	330c      	adds	r3, #12
 80040ce:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040d2:	e853 3f00 	ldrex	r3, [r3]
 80040d6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80040d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040da:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80040de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	330c      	adds	r3, #12
 80040e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80040e8:	643a      	str	r2, [r7, #64]	; 0x40
 80040ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80040ee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80040f0:	e841 2300 	strex	r3, r2, [r1]
 80040f4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d1e5      	bne.n	80040c8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	3314      	adds	r3, #20
 8004102:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004104:	6a3b      	ldr	r3, [r7, #32]
 8004106:	e853 3f00 	ldrex	r3, [r3]
 800410a:	61fb      	str	r3, [r7, #28]
   return(result);
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f023 0301 	bic.w	r3, r3, #1
 8004112:	64bb      	str	r3, [r7, #72]	; 0x48
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3314      	adds	r3, #20
 800411a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800411c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800411e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004120:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004122:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004124:	e841 2300 	strex	r3, r2, [r1]
 8004128:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	2b00      	cmp	r3, #0
 800412e:	d1e5      	bne.n	80040fc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004134:	2b01      	cmp	r3, #1
 8004136:	d119      	bne.n	800416c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	330c      	adds	r3, #12
 800413e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	e853 3f00 	ldrex	r3, [r3]
 8004146:	60bb      	str	r3, [r7, #8]
   return(result);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	f023 0310 	bic.w	r3, r3, #16
 800414e:	647b      	str	r3, [r7, #68]	; 0x44
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	330c      	adds	r3, #12
 8004156:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004158:	61ba      	str	r2, [r7, #24]
 800415a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415c:	6979      	ldr	r1, [r7, #20]
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	e841 2300 	strex	r3, r2, [r1]
 8004164:	613b      	str	r3, [r7, #16]
   return(result);
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d1e5      	bne.n	8004138 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2220      	movs	r2, #32
 8004170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2200      	movs	r2, #0
 8004178:	631a      	str	r2, [r3, #48]	; 0x30
}
 800417a:	bf00      	nop
 800417c:	3754      	adds	r7, #84	; 0x54
 800417e:	46bd      	mov	sp, r7
 8004180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004184:	4770      	bx	lr

08004186 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004186:	b580      	push	{r7, lr}
 8004188:	b084      	sub	sp, #16
 800418a:	af00      	add	r7, sp, #0
 800418c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004192:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	2200      	movs	r2, #0
 8004198:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041a0:	68f8      	ldr	r0, [r7, #12]
 80041a2:	f7ff fd4b 	bl	8003c3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041a6:	bf00      	nop
 80041a8:	3710      	adds	r7, #16
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b085      	sub	sp, #20
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	2b21      	cmp	r3, #33	; 0x21
 80041c0:	d13e      	bne.n	8004240 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ca:	d114      	bne.n	80041f6 <UART_Transmit_IT+0x48>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d110      	bne.n	80041f6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6a1b      	ldr	r3, [r3, #32]
 80041d8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041e8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6a1b      	ldr	r3, [r3, #32]
 80041ee:	1c9a      	adds	r2, r3, #2
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	621a      	str	r2, [r3, #32]
 80041f4:	e008      	b.n	8004208 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	1c59      	adds	r1, r3, #1
 80041fc:	687a      	ldr	r2, [r7, #4]
 80041fe:	6211      	str	r1, [r2, #32]
 8004200:	781a      	ldrb	r2, [r3, #0]
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800420c:	b29b      	uxth	r3, r3
 800420e:	3b01      	subs	r3, #1
 8004210:	b29b      	uxth	r3, r3
 8004212:	687a      	ldr	r2, [r7, #4]
 8004214:	4619      	mov	r1, r3
 8004216:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10f      	bne.n	800423c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	68da      	ldr	r2, [r3, #12]
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800422a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800423a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800423c:	2300      	movs	r3, #0
 800423e:	e000      	b.n	8004242 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004240:	2302      	movs	r3, #2
  }
}
 8004242:	4618      	mov	r0, r3
 8004244:	3714      	adds	r7, #20
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800424e:	b580      	push	{r7, lr}
 8004250:	b082      	sub	sp, #8
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	68da      	ldr	r2, [r3, #12]
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004264:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2220      	movs	r2, #32
 800426a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800426e:	6878      	ldr	r0, [r7, #4]
 8004270:	f7ff fcd0 	bl	8003c14 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3708      	adds	r7, #8
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}

0800427e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800427e:	b580      	push	{r7, lr}
 8004280:	b08c      	sub	sp, #48	; 0x30
 8004282:	af00      	add	r7, sp, #0
 8004284:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b22      	cmp	r3, #34	; 0x22
 8004290:	f040 80ab 	bne.w	80043ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	689b      	ldr	r3, [r3, #8]
 8004298:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800429c:	d117      	bne.n	80042ce <UART_Receive_IT+0x50>
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d113      	bne.n	80042ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042a6:	2300      	movs	r3, #0
 80042a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	b29b      	uxth	r3, r3
 80042b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042bc:	b29a      	uxth	r2, r3
 80042be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042c6:	1c9a      	adds	r2, r3, #2
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	629a      	str	r2, [r3, #40]	; 0x28
 80042cc:	e026      	b.n	800431c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80042d4:	2300      	movs	r3, #0
 80042d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042e0:	d007      	beq.n	80042f2 <UART_Receive_IT+0x74>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	689b      	ldr	r3, [r3, #8]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d10a      	bne.n	8004300 <UART_Receive_IT+0x82>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d106      	bne.n	8004300 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	b2da      	uxtb	r2, r3
 80042fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042fc:	701a      	strb	r2, [r3, #0]
 80042fe:	e008      	b.n	8004312 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	b2db      	uxtb	r3, r3
 8004308:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800430c:	b2da      	uxtb	r2, r3
 800430e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004310:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004316:	1c5a      	adds	r2, r3, #1
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004320:	b29b      	uxth	r3, r3
 8004322:	3b01      	subs	r3, #1
 8004324:	b29b      	uxth	r3, r3
 8004326:	687a      	ldr	r2, [r7, #4]
 8004328:	4619      	mov	r1, r3
 800432a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800432c:	2b00      	cmp	r3, #0
 800432e:	d15a      	bne.n	80043e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	68da      	ldr	r2, [r3, #12]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f022 0220 	bic.w	r2, r2, #32
 800433e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68da      	ldr	r2, [r3, #12]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800434e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695a      	ldr	r2, [r3, #20]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f022 0201 	bic.w	r2, r2, #1
 800435e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800436c:	2b01      	cmp	r3, #1
 800436e:	d135      	bne.n	80043dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	2200      	movs	r2, #0
 8004374:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	330c      	adds	r3, #12
 800437c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437e:	697b      	ldr	r3, [r7, #20]
 8004380:	e853 3f00 	ldrex	r3, [r3]
 8004384:	613b      	str	r3, [r7, #16]
   return(result);
 8004386:	693b      	ldr	r3, [r7, #16]
 8004388:	f023 0310 	bic.w	r3, r3, #16
 800438c:	627b      	str	r3, [r7, #36]	; 0x24
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	330c      	adds	r3, #12
 8004394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004396:	623a      	str	r2, [r7, #32]
 8004398:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800439a:	69f9      	ldr	r1, [r7, #28]
 800439c:	6a3a      	ldr	r2, [r7, #32]
 800439e:	e841 2300 	strex	r3, r2, [r1]
 80043a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1e5      	bne.n	8004376 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b10      	cmp	r3, #16
 80043b6:	d10a      	bne.n	80043ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043b8:	2300      	movs	r3, #0
 80043ba:	60fb      	str	r3, [r7, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	60fb      	str	r3, [r7, #12]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	60fb      	str	r3, [r7, #12]
 80043cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80043d2:	4619      	mov	r1, r3
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f7ff fc3b 	bl	8003c50 <HAL_UARTEx_RxEventCallback>
 80043da:	e002      	b.n	80043e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043dc:	6878      	ldr	r0, [r7, #4]
 80043de:	f7fc f93d 	bl	800065c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80043e2:	2300      	movs	r3, #0
 80043e4:	e002      	b.n	80043ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80043e6:	2300      	movs	r3, #0
 80043e8:	e000      	b.n	80043ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80043ea:	2302      	movs	r3, #2
  }
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3730      	adds	r7, #48	; 0x30
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043f8:	b0c0      	sub	sp, #256	; 0x100
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	691b      	ldr	r3, [r3, #16]
 8004408:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800440c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004410:	68d9      	ldr	r1, [r3, #12]
 8004412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004416:	681a      	ldr	r2, [r3, #0]
 8004418:	ea40 0301 	orr.w	r3, r0, r1
 800441c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800441e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004422:	689a      	ldr	r2, [r3, #8]
 8004424:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004428:	691b      	ldr	r3, [r3, #16]
 800442a:	431a      	orrs	r2, r3
 800442c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004430:	695b      	ldr	r3, [r3, #20]
 8004432:	431a      	orrs	r2, r3
 8004434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	4313      	orrs	r3, r2
 800443c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	68db      	ldr	r3, [r3, #12]
 8004448:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800444c:	f021 010c 	bic.w	r1, r1, #12
 8004450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800445a:	430b      	orrs	r3, r1
 800445c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800445e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800446a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800446e:	6999      	ldr	r1, [r3, #24]
 8004470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	ea40 0301 	orr.w	r3, r0, r1
 800447a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800447c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004480:	681a      	ldr	r2, [r3, #0]
 8004482:	4b8f      	ldr	r3, [pc, #572]	; (80046c0 <UART_SetConfig+0x2cc>)
 8004484:	429a      	cmp	r2, r3
 8004486:	d005      	beq.n	8004494 <UART_SetConfig+0xa0>
 8004488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	4b8d      	ldr	r3, [pc, #564]	; (80046c4 <UART_SetConfig+0x2d0>)
 8004490:	429a      	cmp	r2, r3
 8004492:	d104      	bne.n	800449e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004494:	f7fe f986 	bl	80027a4 <HAL_RCC_GetPCLK2Freq>
 8004498:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800449c:	e003      	b.n	80044a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800449e:	f7fe f96d 	bl	800277c <HAL_RCC_GetPCLK1Freq>
 80044a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80044a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b0:	f040 810c 	bne.w	80046cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80044b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044b8:	2200      	movs	r2, #0
 80044ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80044be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80044c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80044c6:	4622      	mov	r2, r4
 80044c8:	462b      	mov	r3, r5
 80044ca:	1891      	adds	r1, r2, r2
 80044cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80044ce:	415b      	adcs	r3, r3
 80044d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80044d6:	4621      	mov	r1, r4
 80044d8:	eb12 0801 	adds.w	r8, r2, r1
 80044dc:	4629      	mov	r1, r5
 80044de:	eb43 0901 	adc.w	r9, r3, r1
 80044e2:	f04f 0200 	mov.w	r2, #0
 80044e6:	f04f 0300 	mov.w	r3, #0
 80044ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80044ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80044f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80044f6:	4690      	mov	r8, r2
 80044f8:	4699      	mov	r9, r3
 80044fa:	4623      	mov	r3, r4
 80044fc:	eb18 0303 	adds.w	r3, r8, r3
 8004500:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004504:	462b      	mov	r3, r5
 8004506:	eb49 0303 	adc.w	r3, r9, r3
 800450a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800450e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800451a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800451e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004522:	460b      	mov	r3, r1
 8004524:	18db      	adds	r3, r3, r3
 8004526:	653b      	str	r3, [r7, #80]	; 0x50
 8004528:	4613      	mov	r3, r2
 800452a:	eb42 0303 	adc.w	r3, r2, r3
 800452e:	657b      	str	r3, [r7, #84]	; 0x54
 8004530:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004534:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004538:	f7fb fea2 	bl	8000280 <__aeabi_uldivmod>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	4b61      	ldr	r3, [pc, #388]	; (80046c8 <UART_SetConfig+0x2d4>)
 8004542:	fba3 2302 	umull	r2, r3, r3, r2
 8004546:	095b      	lsrs	r3, r3, #5
 8004548:	011c      	lsls	r4, r3, #4
 800454a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800454e:	2200      	movs	r2, #0
 8004550:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004554:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004558:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800455c:	4642      	mov	r2, r8
 800455e:	464b      	mov	r3, r9
 8004560:	1891      	adds	r1, r2, r2
 8004562:	64b9      	str	r1, [r7, #72]	; 0x48
 8004564:	415b      	adcs	r3, r3
 8004566:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004568:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800456c:	4641      	mov	r1, r8
 800456e:	eb12 0a01 	adds.w	sl, r2, r1
 8004572:	4649      	mov	r1, r9
 8004574:	eb43 0b01 	adc.w	fp, r3, r1
 8004578:	f04f 0200 	mov.w	r2, #0
 800457c:	f04f 0300 	mov.w	r3, #0
 8004580:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004584:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004588:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800458c:	4692      	mov	sl, r2
 800458e:	469b      	mov	fp, r3
 8004590:	4643      	mov	r3, r8
 8004592:	eb1a 0303 	adds.w	r3, sl, r3
 8004596:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800459a:	464b      	mov	r3, r9
 800459c:	eb4b 0303 	adc.w	r3, fp, r3
 80045a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2200      	movs	r2, #0
 80045ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80045b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80045b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80045b8:	460b      	mov	r3, r1
 80045ba:	18db      	adds	r3, r3, r3
 80045bc:	643b      	str	r3, [r7, #64]	; 0x40
 80045be:	4613      	mov	r3, r2
 80045c0:	eb42 0303 	adc.w	r3, r2, r3
 80045c4:	647b      	str	r3, [r7, #68]	; 0x44
 80045c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80045ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80045ce:	f7fb fe57 	bl	8000280 <__aeabi_uldivmod>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4611      	mov	r1, r2
 80045d8:	4b3b      	ldr	r3, [pc, #236]	; (80046c8 <UART_SetConfig+0x2d4>)
 80045da:	fba3 2301 	umull	r2, r3, r3, r1
 80045de:	095b      	lsrs	r3, r3, #5
 80045e0:	2264      	movs	r2, #100	; 0x64
 80045e2:	fb02 f303 	mul.w	r3, r2, r3
 80045e6:	1acb      	subs	r3, r1, r3
 80045e8:	00db      	lsls	r3, r3, #3
 80045ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80045ee:	4b36      	ldr	r3, [pc, #216]	; (80046c8 <UART_SetConfig+0x2d4>)
 80045f0:	fba3 2302 	umull	r2, r3, r3, r2
 80045f4:	095b      	lsrs	r3, r3, #5
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80045fc:	441c      	add	r4, r3
 80045fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004602:	2200      	movs	r2, #0
 8004604:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004608:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800460c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004610:	4642      	mov	r2, r8
 8004612:	464b      	mov	r3, r9
 8004614:	1891      	adds	r1, r2, r2
 8004616:	63b9      	str	r1, [r7, #56]	; 0x38
 8004618:	415b      	adcs	r3, r3
 800461a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800461c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004620:	4641      	mov	r1, r8
 8004622:	1851      	adds	r1, r2, r1
 8004624:	6339      	str	r1, [r7, #48]	; 0x30
 8004626:	4649      	mov	r1, r9
 8004628:	414b      	adcs	r3, r1
 800462a:	637b      	str	r3, [r7, #52]	; 0x34
 800462c:	f04f 0200 	mov.w	r2, #0
 8004630:	f04f 0300 	mov.w	r3, #0
 8004634:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004638:	4659      	mov	r1, fp
 800463a:	00cb      	lsls	r3, r1, #3
 800463c:	4651      	mov	r1, sl
 800463e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004642:	4651      	mov	r1, sl
 8004644:	00ca      	lsls	r2, r1, #3
 8004646:	4610      	mov	r0, r2
 8004648:	4619      	mov	r1, r3
 800464a:	4603      	mov	r3, r0
 800464c:	4642      	mov	r2, r8
 800464e:	189b      	adds	r3, r3, r2
 8004650:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004654:	464b      	mov	r3, r9
 8004656:	460a      	mov	r2, r1
 8004658:	eb42 0303 	adc.w	r3, r2, r3
 800465c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800466c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004670:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004674:	460b      	mov	r3, r1
 8004676:	18db      	adds	r3, r3, r3
 8004678:	62bb      	str	r3, [r7, #40]	; 0x28
 800467a:	4613      	mov	r3, r2
 800467c:	eb42 0303 	adc.w	r3, r2, r3
 8004680:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004682:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004686:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800468a:	f7fb fdf9 	bl	8000280 <__aeabi_uldivmod>
 800468e:	4602      	mov	r2, r0
 8004690:	460b      	mov	r3, r1
 8004692:	4b0d      	ldr	r3, [pc, #52]	; (80046c8 <UART_SetConfig+0x2d4>)
 8004694:	fba3 1302 	umull	r1, r3, r3, r2
 8004698:	095b      	lsrs	r3, r3, #5
 800469a:	2164      	movs	r1, #100	; 0x64
 800469c:	fb01 f303 	mul.w	r3, r1, r3
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	3332      	adds	r3, #50	; 0x32
 80046a6:	4a08      	ldr	r2, [pc, #32]	; (80046c8 <UART_SetConfig+0x2d4>)
 80046a8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ac:	095b      	lsrs	r3, r3, #5
 80046ae:	f003 0207 	and.w	r2, r3, #7
 80046b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	4422      	add	r2, r4
 80046ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80046bc:	e105      	b.n	80048ca <UART_SetConfig+0x4d6>
 80046be:	bf00      	nop
 80046c0:	40011000 	.word	0x40011000
 80046c4:	40011400 	.word	0x40011400
 80046c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80046cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80046d0:	2200      	movs	r2, #0
 80046d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80046d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80046da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80046de:	4642      	mov	r2, r8
 80046e0:	464b      	mov	r3, r9
 80046e2:	1891      	adds	r1, r2, r2
 80046e4:	6239      	str	r1, [r7, #32]
 80046e6:	415b      	adcs	r3, r3
 80046e8:	627b      	str	r3, [r7, #36]	; 0x24
 80046ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80046ee:	4641      	mov	r1, r8
 80046f0:	1854      	adds	r4, r2, r1
 80046f2:	4649      	mov	r1, r9
 80046f4:	eb43 0501 	adc.w	r5, r3, r1
 80046f8:	f04f 0200 	mov.w	r2, #0
 80046fc:	f04f 0300 	mov.w	r3, #0
 8004700:	00eb      	lsls	r3, r5, #3
 8004702:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004706:	00e2      	lsls	r2, r4, #3
 8004708:	4614      	mov	r4, r2
 800470a:	461d      	mov	r5, r3
 800470c:	4643      	mov	r3, r8
 800470e:	18e3      	adds	r3, r4, r3
 8004710:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004714:	464b      	mov	r3, r9
 8004716:	eb45 0303 	adc.w	r3, r5, r3
 800471a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800471e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800472a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800472e:	f04f 0200 	mov.w	r2, #0
 8004732:	f04f 0300 	mov.w	r3, #0
 8004736:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800473a:	4629      	mov	r1, r5
 800473c:	008b      	lsls	r3, r1, #2
 800473e:	4621      	mov	r1, r4
 8004740:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004744:	4621      	mov	r1, r4
 8004746:	008a      	lsls	r2, r1, #2
 8004748:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800474c:	f7fb fd98 	bl	8000280 <__aeabi_uldivmod>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4b60      	ldr	r3, [pc, #384]	; (80048d8 <UART_SetConfig+0x4e4>)
 8004756:	fba3 2302 	umull	r2, r3, r3, r2
 800475a:	095b      	lsrs	r3, r3, #5
 800475c:	011c      	lsls	r4, r3, #4
 800475e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004762:	2200      	movs	r2, #0
 8004764:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004768:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800476c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004770:	4642      	mov	r2, r8
 8004772:	464b      	mov	r3, r9
 8004774:	1891      	adds	r1, r2, r2
 8004776:	61b9      	str	r1, [r7, #24]
 8004778:	415b      	adcs	r3, r3
 800477a:	61fb      	str	r3, [r7, #28]
 800477c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004780:	4641      	mov	r1, r8
 8004782:	1851      	adds	r1, r2, r1
 8004784:	6139      	str	r1, [r7, #16]
 8004786:	4649      	mov	r1, r9
 8004788:	414b      	adcs	r3, r1
 800478a:	617b      	str	r3, [r7, #20]
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004798:	4659      	mov	r1, fp
 800479a:	00cb      	lsls	r3, r1, #3
 800479c:	4651      	mov	r1, sl
 800479e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047a2:	4651      	mov	r1, sl
 80047a4:	00ca      	lsls	r2, r1, #3
 80047a6:	4610      	mov	r0, r2
 80047a8:	4619      	mov	r1, r3
 80047aa:	4603      	mov	r3, r0
 80047ac:	4642      	mov	r2, r8
 80047ae:	189b      	adds	r3, r3, r2
 80047b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80047b4:	464b      	mov	r3, r9
 80047b6:	460a      	mov	r2, r1
 80047b8:	eb42 0303 	adc.w	r3, r2, r3
 80047bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80047c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80047ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80047cc:	f04f 0200 	mov.w	r2, #0
 80047d0:	f04f 0300 	mov.w	r3, #0
 80047d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80047d8:	4649      	mov	r1, r9
 80047da:	008b      	lsls	r3, r1, #2
 80047dc:	4641      	mov	r1, r8
 80047de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047e2:	4641      	mov	r1, r8
 80047e4:	008a      	lsls	r2, r1, #2
 80047e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80047ea:	f7fb fd49 	bl	8000280 <__aeabi_uldivmod>
 80047ee:	4602      	mov	r2, r0
 80047f0:	460b      	mov	r3, r1
 80047f2:	4b39      	ldr	r3, [pc, #228]	; (80048d8 <UART_SetConfig+0x4e4>)
 80047f4:	fba3 1302 	umull	r1, r3, r3, r2
 80047f8:	095b      	lsrs	r3, r3, #5
 80047fa:	2164      	movs	r1, #100	; 0x64
 80047fc:	fb01 f303 	mul.w	r3, r1, r3
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	011b      	lsls	r3, r3, #4
 8004804:	3332      	adds	r3, #50	; 0x32
 8004806:	4a34      	ldr	r2, [pc, #208]	; (80048d8 <UART_SetConfig+0x4e4>)
 8004808:	fba2 2303 	umull	r2, r3, r2, r3
 800480c:	095b      	lsrs	r3, r3, #5
 800480e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004812:	441c      	add	r4, r3
 8004814:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004818:	2200      	movs	r2, #0
 800481a:	673b      	str	r3, [r7, #112]	; 0x70
 800481c:	677a      	str	r2, [r7, #116]	; 0x74
 800481e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004822:	4642      	mov	r2, r8
 8004824:	464b      	mov	r3, r9
 8004826:	1891      	adds	r1, r2, r2
 8004828:	60b9      	str	r1, [r7, #8]
 800482a:	415b      	adcs	r3, r3
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004832:	4641      	mov	r1, r8
 8004834:	1851      	adds	r1, r2, r1
 8004836:	6039      	str	r1, [r7, #0]
 8004838:	4649      	mov	r1, r9
 800483a:	414b      	adcs	r3, r1
 800483c:	607b      	str	r3, [r7, #4]
 800483e:	f04f 0200 	mov.w	r2, #0
 8004842:	f04f 0300 	mov.w	r3, #0
 8004846:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800484a:	4659      	mov	r1, fp
 800484c:	00cb      	lsls	r3, r1, #3
 800484e:	4651      	mov	r1, sl
 8004850:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004854:	4651      	mov	r1, sl
 8004856:	00ca      	lsls	r2, r1, #3
 8004858:	4610      	mov	r0, r2
 800485a:	4619      	mov	r1, r3
 800485c:	4603      	mov	r3, r0
 800485e:	4642      	mov	r2, r8
 8004860:	189b      	adds	r3, r3, r2
 8004862:	66bb      	str	r3, [r7, #104]	; 0x68
 8004864:	464b      	mov	r3, r9
 8004866:	460a      	mov	r2, r1
 8004868:	eb42 0303 	adc.w	r3, r2, r3
 800486c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800486e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	2200      	movs	r2, #0
 8004876:	663b      	str	r3, [r7, #96]	; 0x60
 8004878:	667a      	str	r2, [r7, #100]	; 0x64
 800487a:	f04f 0200 	mov.w	r2, #0
 800487e:	f04f 0300 	mov.w	r3, #0
 8004882:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004886:	4649      	mov	r1, r9
 8004888:	008b      	lsls	r3, r1, #2
 800488a:	4641      	mov	r1, r8
 800488c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004890:	4641      	mov	r1, r8
 8004892:	008a      	lsls	r2, r1, #2
 8004894:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004898:	f7fb fcf2 	bl	8000280 <__aeabi_uldivmod>
 800489c:	4602      	mov	r2, r0
 800489e:	460b      	mov	r3, r1
 80048a0:	4b0d      	ldr	r3, [pc, #52]	; (80048d8 <UART_SetConfig+0x4e4>)
 80048a2:	fba3 1302 	umull	r1, r3, r3, r2
 80048a6:	095b      	lsrs	r3, r3, #5
 80048a8:	2164      	movs	r1, #100	; 0x64
 80048aa:	fb01 f303 	mul.w	r3, r1, r3
 80048ae:	1ad3      	subs	r3, r2, r3
 80048b0:	011b      	lsls	r3, r3, #4
 80048b2:	3332      	adds	r3, #50	; 0x32
 80048b4:	4a08      	ldr	r2, [pc, #32]	; (80048d8 <UART_SetConfig+0x4e4>)
 80048b6:	fba2 2303 	umull	r2, r3, r2, r3
 80048ba:	095b      	lsrs	r3, r3, #5
 80048bc:	f003 020f 	and.w	r2, r3, #15
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4422      	add	r2, r4
 80048c8:	609a      	str	r2, [r3, #8]
}
 80048ca:	bf00      	nop
 80048cc:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80048d0:	46bd      	mov	sp, r7
 80048d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048d6:	bf00      	nop
 80048d8:	51eb851f 	.word	0x51eb851f

080048dc <__errno>:
 80048dc:	4b01      	ldr	r3, [pc, #4]	; (80048e4 <__errno+0x8>)
 80048de:	6818      	ldr	r0, [r3, #0]
 80048e0:	4770      	bx	lr
 80048e2:	bf00      	nop
 80048e4:	20000010 	.word	0x20000010

080048e8 <__libc_init_array>:
 80048e8:	b570      	push	{r4, r5, r6, lr}
 80048ea:	4d0d      	ldr	r5, [pc, #52]	; (8004920 <__libc_init_array+0x38>)
 80048ec:	4c0d      	ldr	r4, [pc, #52]	; (8004924 <__libc_init_array+0x3c>)
 80048ee:	1b64      	subs	r4, r4, r5
 80048f0:	10a4      	asrs	r4, r4, #2
 80048f2:	2600      	movs	r6, #0
 80048f4:	42a6      	cmp	r6, r4
 80048f6:	d109      	bne.n	800490c <__libc_init_array+0x24>
 80048f8:	4d0b      	ldr	r5, [pc, #44]	; (8004928 <__libc_init_array+0x40>)
 80048fa:	4c0c      	ldr	r4, [pc, #48]	; (800492c <__libc_init_array+0x44>)
 80048fc:	f000 fc8e 	bl	800521c <_init>
 8004900:	1b64      	subs	r4, r4, r5
 8004902:	10a4      	asrs	r4, r4, #2
 8004904:	2600      	movs	r6, #0
 8004906:	42a6      	cmp	r6, r4
 8004908:	d105      	bne.n	8004916 <__libc_init_array+0x2e>
 800490a:	bd70      	pop	{r4, r5, r6, pc}
 800490c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004910:	4798      	blx	r3
 8004912:	3601      	adds	r6, #1
 8004914:	e7ee      	b.n	80048f4 <__libc_init_array+0xc>
 8004916:	f855 3b04 	ldr.w	r3, [r5], #4
 800491a:	4798      	blx	r3
 800491c:	3601      	adds	r6, #1
 800491e:	e7f2      	b.n	8004906 <__libc_init_array+0x1e>
 8004920:	080052b4 	.word	0x080052b4
 8004924:	080052b4 	.word	0x080052b4
 8004928:	080052b4 	.word	0x080052b4
 800492c:	080052b8 	.word	0x080052b8

08004930 <memset>:
 8004930:	4402      	add	r2, r0
 8004932:	4603      	mov	r3, r0
 8004934:	4293      	cmp	r3, r2
 8004936:	d100      	bne.n	800493a <memset+0xa>
 8004938:	4770      	bx	lr
 800493a:	f803 1b01 	strb.w	r1, [r3], #1
 800493e:	e7f9      	b.n	8004934 <memset+0x4>

08004940 <_vsiprintf_r>:
 8004940:	b500      	push	{lr}
 8004942:	b09b      	sub	sp, #108	; 0x6c
 8004944:	9100      	str	r1, [sp, #0]
 8004946:	9104      	str	r1, [sp, #16]
 8004948:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800494c:	9105      	str	r1, [sp, #20]
 800494e:	9102      	str	r1, [sp, #8]
 8004950:	4905      	ldr	r1, [pc, #20]	; (8004968 <_vsiprintf_r+0x28>)
 8004952:	9103      	str	r1, [sp, #12]
 8004954:	4669      	mov	r1, sp
 8004956:	f000 f86f 	bl	8004a38 <_svfiprintf_r>
 800495a:	9b00      	ldr	r3, [sp, #0]
 800495c:	2200      	movs	r2, #0
 800495e:	701a      	strb	r2, [r3, #0]
 8004960:	b01b      	add	sp, #108	; 0x6c
 8004962:	f85d fb04 	ldr.w	pc, [sp], #4
 8004966:	bf00      	nop
 8004968:	ffff0208 	.word	0xffff0208

0800496c <vsiprintf>:
 800496c:	4613      	mov	r3, r2
 800496e:	460a      	mov	r2, r1
 8004970:	4601      	mov	r1, r0
 8004972:	4802      	ldr	r0, [pc, #8]	; (800497c <vsiprintf+0x10>)
 8004974:	6800      	ldr	r0, [r0, #0]
 8004976:	f7ff bfe3 	b.w	8004940 <_vsiprintf_r>
 800497a:	bf00      	nop
 800497c:	20000010 	.word	0x20000010

08004980 <__ssputs_r>:
 8004980:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004984:	688e      	ldr	r6, [r1, #8]
 8004986:	429e      	cmp	r6, r3
 8004988:	4682      	mov	sl, r0
 800498a:	460c      	mov	r4, r1
 800498c:	4690      	mov	r8, r2
 800498e:	461f      	mov	r7, r3
 8004990:	d838      	bhi.n	8004a04 <__ssputs_r+0x84>
 8004992:	898a      	ldrh	r2, [r1, #12]
 8004994:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004998:	d032      	beq.n	8004a00 <__ssputs_r+0x80>
 800499a:	6825      	ldr	r5, [r4, #0]
 800499c:	6909      	ldr	r1, [r1, #16]
 800499e:	eba5 0901 	sub.w	r9, r5, r1
 80049a2:	6965      	ldr	r5, [r4, #20]
 80049a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80049ac:	3301      	adds	r3, #1
 80049ae:	444b      	add	r3, r9
 80049b0:	106d      	asrs	r5, r5, #1
 80049b2:	429d      	cmp	r5, r3
 80049b4:	bf38      	it	cc
 80049b6:	461d      	movcc	r5, r3
 80049b8:	0553      	lsls	r3, r2, #21
 80049ba:	d531      	bpl.n	8004a20 <__ssputs_r+0xa0>
 80049bc:	4629      	mov	r1, r5
 80049be:	f000 fb63 	bl	8005088 <_malloc_r>
 80049c2:	4606      	mov	r6, r0
 80049c4:	b950      	cbnz	r0, 80049dc <__ssputs_r+0x5c>
 80049c6:	230c      	movs	r3, #12
 80049c8:	f8ca 3000 	str.w	r3, [sl]
 80049cc:	89a3      	ldrh	r3, [r4, #12]
 80049ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049d2:	81a3      	strh	r3, [r4, #12]
 80049d4:	f04f 30ff 	mov.w	r0, #4294967295
 80049d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049dc:	6921      	ldr	r1, [r4, #16]
 80049de:	464a      	mov	r2, r9
 80049e0:	f000 fabe 	bl	8004f60 <memcpy>
 80049e4:	89a3      	ldrh	r3, [r4, #12]
 80049e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049ee:	81a3      	strh	r3, [r4, #12]
 80049f0:	6126      	str	r6, [r4, #16]
 80049f2:	6165      	str	r5, [r4, #20]
 80049f4:	444e      	add	r6, r9
 80049f6:	eba5 0509 	sub.w	r5, r5, r9
 80049fa:	6026      	str	r6, [r4, #0]
 80049fc:	60a5      	str	r5, [r4, #8]
 80049fe:	463e      	mov	r6, r7
 8004a00:	42be      	cmp	r6, r7
 8004a02:	d900      	bls.n	8004a06 <__ssputs_r+0x86>
 8004a04:	463e      	mov	r6, r7
 8004a06:	6820      	ldr	r0, [r4, #0]
 8004a08:	4632      	mov	r2, r6
 8004a0a:	4641      	mov	r1, r8
 8004a0c:	f000 fab6 	bl	8004f7c <memmove>
 8004a10:	68a3      	ldr	r3, [r4, #8]
 8004a12:	1b9b      	subs	r3, r3, r6
 8004a14:	60a3      	str	r3, [r4, #8]
 8004a16:	6823      	ldr	r3, [r4, #0]
 8004a18:	4433      	add	r3, r6
 8004a1a:	6023      	str	r3, [r4, #0]
 8004a1c:	2000      	movs	r0, #0
 8004a1e:	e7db      	b.n	80049d8 <__ssputs_r+0x58>
 8004a20:	462a      	mov	r2, r5
 8004a22:	f000 fba5 	bl	8005170 <_realloc_r>
 8004a26:	4606      	mov	r6, r0
 8004a28:	2800      	cmp	r0, #0
 8004a2a:	d1e1      	bne.n	80049f0 <__ssputs_r+0x70>
 8004a2c:	6921      	ldr	r1, [r4, #16]
 8004a2e:	4650      	mov	r0, sl
 8004a30:	f000 fabe 	bl	8004fb0 <_free_r>
 8004a34:	e7c7      	b.n	80049c6 <__ssputs_r+0x46>
	...

08004a38 <_svfiprintf_r>:
 8004a38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a3c:	4698      	mov	r8, r3
 8004a3e:	898b      	ldrh	r3, [r1, #12]
 8004a40:	061b      	lsls	r3, r3, #24
 8004a42:	b09d      	sub	sp, #116	; 0x74
 8004a44:	4607      	mov	r7, r0
 8004a46:	460d      	mov	r5, r1
 8004a48:	4614      	mov	r4, r2
 8004a4a:	d50e      	bpl.n	8004a6a <_svfiprintf_r+0x32>
 8004a4c:	690b      	ldr	r3, [r1, #16]
 8004a4e:	b963      	cbnz	r3, 8004a6a <_svfiprintf_r+0x32>
 8004a50:	2140      	movs	r1, #64	; 0x40
 8004a52:	f000 fb19 	bl	8005088 <_malloc_r>
 8004a56:	6028      	str	r0, [r5, #0]
 8004a58:	6128      	str	r0, [r5, #16]
 8004a5a:	b920      	cbnz	r0, 8004a66 <_svfiprintf_r+0x2e>
 8004a5c:	230c      	movs	r3, #12
 8004a5e:	603b      	str	r3, [r7, #0]
 8004a60:	f04f 30ff 	mov.w	r0, #4294967295
 8004a64:	e0d1      	b.n	8004c0a <_svfiprintf_r+0x1d2>
 8004a66:	2340      	movs	r3, #64	; 0x40
 8004a68:	616b      	str	r3, [r5, #20]
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a6e:	2320      	movs	r3, #32
 8004a70:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a74:	f8cd 800c 	str.w	r8, [sp, #12]
 8004a78:	2330      	movs	r3, #48	; 0x30
 8004a7a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004c24 <_svfiprintf_r+0x1ec>
 8004a7e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a82:	f04f 0901 	mov.w	r9, #1
 8004a86:	4623      	mov	r3, r4
 8004a88:	469a      	mov	sl, r3
 8004a8a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004a8e:	b10a      	cbz	r2, 8004a94 <_svfiprintf_r+0x5c>
 8004a90:	2a25      	cmp	r2, #37	; 0x25
 8004a92:	d1f9      	bne.n	8004a88 <_svfiprintf_r+0x50>
 8004a94:	ebba 0b04 	subs.w	fp, sl, r4
 8004a98:	d00b      	beq.n	8004ab2 <_svfiprintf_r+0x7a>
 8004a9a:	465b      	mov	r3, fp
 8004a9c:	4622      	mov	r2, r4
 8004a9e:	4629      	mov	r1, r5
 8004aa0:	4638      	mov	r0, r7
 8004aa2:	f7ff ff6d 	bl	8004980 <__ssputs_r>
 8004aa6:	3001      	adds	r0, #1
 8004aa8:	f000 80aa 	beq.w	8004c00 <_svfiprintf_r+0x1c8>
 8004aac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aae:	445a      	add	r2, fp
 8004ab0:	9209      	str	r2, [sp, #36]	; 0x24
 8004ab2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	f000 80a2 	beq.w	8004c00 <_svfiprintf_r+0x1c8>
 8004abc:	2300      	movs	r3, #0
 8004abe:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ac6:	f10a 0a01 	add.w	sl, sl, #1
 8004aca:	9304      	str	r3, [sp, #16]
 8004acc:	9307      	str	r3, [sp, #28]
 8004ace:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ad2:	931a      	str	r3, [sp, #104]	; 0x68
 8004ad4:	4654      	mov	r4, sl
 8004ad6:	2205      	movs	r2, #5
 8004ad8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004adc:	4851      	ldr	r0, [pc, #324]	; (8004c24 <_svfiprintf_r+0x1ec>)
 8004ade:	f7fb fb7f 	bl	80001e0 <memchr>
 8004ae2:	9a04      	ldr	r2, [sp, #16]
 8004ae4:	b9d8      	cbnz	r0, 8004b1e <_svfiprintf_r+0xe6>
 8004ae6:	06d0      	lsls	r0, r2, #27
 8004ae8:	bf44      	itt	mi
 8004aea:	2320      	movmi	r3, #32
 8004aec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004af0:	0711      	lsls	r1, r2, #28
 8004af2:	bf44      	itt	mi
 8004af4:	232b      	movmi	r3, #43	; 0x2b
 8004af6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004afa:	f89a 3000 	ldrb.w	r3, [sl]
 8004afe:	2b2a      	cmp	r3, #42	; 0x2a
 8004b00:	d015      	beq.n	8004b2e <_svfiprintf_r+0xf6>
 8004b02:	9a07      	ldr	r2, [sp, #28]
 8004b04:	4654      	mov	r4, sl
 8004b06:	2000      	movs	r0, #0
 8004b08:	f04f 0c0a 	mov.w	ip, #10
 8004b0c:	4621      	mov	r1, r4
 8004b0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b12:	3b30      	subs	r3, #48	; 0x30
 8004b14:	2b09      	cmp	r3, #9
 8004b16:	d94e      	bls.n	8004bb6 <_svfiprintf_r+0x17e>
 8004b18:	b1b0      	cbz	r0, 8004b48 <_svfiprintf_r+0x110>
 8004b1a:	9207      	str	r2, [sp, #28]
 8004b1c:	e014      	b.n	8004b48 <_svfiprintf_r+0x110>
 8004b1e:	eba0 0308 	sub.w	r3, r0, r8
 8004b22:	fa09 f303 	lsl.w	r3, r9, r3
 8004b26:	4313      	orrs	r3, r2
 8004b28:	9304      	str	r3, [sp, #16]
 8004b2a:	46a2      	mov	sl, r4
 8004b2c:	e7d2      	b.n	8004ad4 <_svfiprintf_r+0x9c>
 8004b2e:	9b03      	ldr	r3, [sp, #12]
 8004b30:	1d19      	adds	r1, r3, #4
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	9103      	str	r1, [sp, #12]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	bfbb      	ittet	lt
 8004b3a:	425b      	neglt	r3, r3
 8004b3c:	f042 0202 	orrlt.w	r2, r2, #2
 8004b40:	9307      	strge	r3, [sp, #28]
 8004b42:	9307      	strlt	r3, [sp, #28]
 8004b44:	bfb8      	it	lt
 8004b46:	9204      	strlt	r2, [sp, #16]
 8004b48:	7823      	ldrb	r3, [r4, #0]
 8004b4a:	2b2e      	cmp	r3, #46	; 0x2e
 8004b4c:	d10c      	bne.n	8004b68 <_svfiprintf_r+0x130>
 8004b4e:	7863      	ldrb	r3, [r4, #1]
 8004b50:	2b2a      	cmp	r3, #42	; 0x2a
 8004b52:	d135      	bne.n	8004bc0 <_svfiprintf_r+0x188>
 8004b54:	9b03      	ldr	r3, [sp, #12]
 8004b56:	1d1a      	adds	r2, r3, #4
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	9203      	str	r2, [sp, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	bfb8      	it	lt
 8004b60:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b64:	3402      	adds	r4, #2
 8004b66:	9305      	str	r3, [sp, #20]
 8004b68:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004c34 <_svfiprintf_r+0x1fc>
 8004b6c:	7821      	ldrb	r1, [r4, #0]
 8004b6e:	2203      	movs	r2, #3
 8004b70:	4650      	mov	r0, sl
 8004b72:	f7fb fb35 	bl	80001e0 <memchr>
 8004b76:	b140      	cbz	r0, 8004b8a <_svfiprintf_r+0x152>
 8004b78:	2340      	movs	r3, #64	; 0x40
 8004b7a:	eba0 000a 	sub.w	r0, r0, sl
 8004b7e:	fa03 f000 	lsl.w	r0, r3, r0
 8004b82:	9b04      	ldr	r3, [sp, #16]
 8004b84:	4303      	orrs	r3, r0
 8004b86:	3401      	adds	r4, #1
 8004b88:	9304      	str	r3, [sp, #16]
 8004b8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b8e:	4826      	ldr	r0, [pc, #152]	; (8004c28 <_svfiprintf_r+0x1f0>)
 8004b90:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b94:	2206      	movs	r2, #6
 8004b96:	f7fb fb23 	bl	80001e0 <memchr>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	d038      	beq.n	8004c10 <_svfiprintf_r+0x1d8>
 8004b9e:	4b23      	ldr	r3, [pc, #140]	; (8004c2c <_svfiprintf_r+0x1f4>)
 8004ba0:	bb1b      	cbnz	r3, 8004bea <_svfiprintf_r+0x1b2>
 8004ba2:	9b03      	ldr	r3, [sp, #12]
 8004ba4:	3307      	adds	r3, #7
 8004ba6:	f023 0307 	bic.w	r3, r3, #7
 8004baa:	3308      	adds	r3, #8
 8004bac:	9303      	str	r3, [sp, #12]
 8004bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb0:	4433      	add	r3, r6
 8004bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004bb4:	e767      	b.n	8004a86 <_svfiprintf_r+0x4e>
 8004bb6:	fb0c 3202 	mla	r2, ip, r2, r3
 8004bba:	460c      	mov	r4, r1
 8004bbc:	2001      	movs	r0, #1
 8004bbe:	e7a5      	b.n	8004b0c <_svfiprintf_r+0xd4>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	3401      	adds	r4, #1
 8004bc4:	9305      	str	r3, [sp, #20]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	f04f 0c0a 	mov.w	ip, #10
 8004bcc:	4620      	mov	r0, r4
 8004bce:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bd2:	3a30      	subs	r2, #48	; 0x30
 8004bd4:	2a09      	cmp	r2, #9
 8004bd6:	d903      	bls.n	8004be0 <_svfiprintf_r+0x1a8>
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d0c5      	beq.n	8004b68 <_svfiprintf_r+0x130>
 8004bdc:	9105      	str	r1, [sp, #20]
 8004bde:	e7c3      	b.n	8004b68 <_svfiprintf_r+0x130>
 8004be0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004be4:	4604      	mov	r4, r0
 8004be6:	2301      	movs	r3, #1
 8004be8:	e7f0      	b.n	8004bcc <_svfiprintf_r+0x194>
 8004bea:	ab03      	add	r3, sp, #12
 8004bec:	9300      	str	r3, [sp, #0]
 8004bee:	462a      	mov	r2, r5
 8004bf0:	4b0f      	ldr	r3, [pc, #60]	; (8004c30 <_svfiprintf_r+0x1f8>)
 8004bf2:	a904      	add	r1, sp, #16
 8004bf4:	4638      	mov	r0, r7
 8004bf6:	f3af 8000 	nop.w
 8004bfa:	1c42      	adds	r2, r0, #1
 8004bfc:	4606      	mov	r6, r0
 8004bfe:	d1d6      	bne.n	8004bae <_svfiprintf_r+0x176>
 8004c00:	89ab      	ldrh	r3, [r5, #12]
 8004c02:	065b      	lsls	r3, r3, #25
 8004c04:	f53f af2c 	bmi.w	8004a60 <_svfiprintf_r+0x28>
 8004c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c0a:	b01d      	add	sp, #116	; 0x74
 8004c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c10:	ab03      	add	r3, sp, #12
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	462a      	mov	r2, r5
 8004c16:	4b06      	ldr	r3, [pc, #24]	; (8004c30 <_svfiprintf_r+0x1f8>)
 8004c18:	a904      	add	r1, sp, #16
 8004c1a:	4638      	mov	r0, r7
 8004c1c:	f000 f87a 	bl	8004d14 <_printf_i>
 8004c20:	e7eb      	b.n	8004bfa <_svfiprintf_r+0x1c2>
 8004c22:	bf00      	nop
 8004c24:	08005278 	.word	0x08005278
 8004c28:	08005282 	.word	0x08005282
 8004c2c:	00000000 	.word	0x00000000
 8004c30:	08004981 	.word	0x08004981
 8004c34:	0800527e 	.word	0x0800527e

08004c38 <_printf_common>:
 8004c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c3c:	4616      	mov	r6, r2
 8004c3e:	4699      	mov	r9, r3
 8004c40:	688a      	ldr	r2, [r1, #8]
 8004c42:	690b      	ldr	r3, [r1, #16]
 8004c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	bfb8      	it	lt
 8004c4c:	4613      	movlt	r3, r2
 8004c4e:	6033      	str	r3, [r6, #0]
 8004c50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c54:	4607      	mov	r7, r0
 8004c56:	460c      	mov	r4, r1
 8004c58:	b10a      	cbz	r2, 8004c5e <_printf_common+0x26>
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	6033      	str	r3, [r6, #0]
 8004c5e:	6823      	ldr	r3, [r4, #0]
 8004c60:	0699      	lsls	r1, r3, #26
 8004c62:	bf42      	ittt	mi
 8004c64:	6833      	ldrmi	r3, [r6, #0]
 8004c66:	3302      	addmi	r3, #2
 8004c68:	6033      	strmi	r3, [r6, #0]
 8004c6a:	6825      	ldr	r5, [r4, #0]
 8004c6c:	f015 0506 	ands.w	r5, r5, #6
 8004c70:	d106      	bne.n	8004c80 <_printf_common+0x48>
 8004c72:	f104 0a19 	add.w	sl, r4, #25
 8004c76:	68e3      	ldr	r3, [r4, #12]
 8004c78:	6832      	ldr	r2, [r6, #0]
 8004c7a:	1a9b      	subs	r3, r3, r2
 8004c7c:	42ab      	cmp	r3, r5
 8004c7e:	dc26      	bgt.n	8004cce <_printf_common+0x96>
 8004c80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004c84:	1e13      	subs	r3, r2, #0
 8004c86:	6822      	ldr	r2, [r4, #0]
 8004c88:	bf18      	it	ne
 8004c8a:	2301      	movne	r3, #1
 8004c8c:	0692      	lsls	r2, r2, #26
 8004c8e:	d42b      	bmi.n	8004ce8 <_printf_common+0xb0>
 8004c90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c94:	4649      	mov	r1, r9
 8004c96:	4638      	mov	r0, r7
 8004c98:	47c0      	blx	r8
 8004c9a:	3001      	adds	r0, #1
 8004c9c:	d01e      	beq.n	8004cdc <_printf_common+0xa4>
 8004c9e:	6823      	ldr	r3, [r4, #0]
 8004ca0:	68e5      	ldr	r5, [r4, #12]
 8004ca2:	6832      	ldr	r2, [r6, #0]
 8004ca4:	f003 0306 	and.w	r3, r3, #6
 8004ca8:	2b04      	cmp	r3, #4
 8004caa:	bf08      	it	eq
 8004cac:	1aad      	subeq	r5, r5, r2
 8004cae:	68a3      	ldr	r3, [r4, #8]
 8004cb0:	6922      	ldr	r2, [r4, #16]
 8004cb2:	bf0c      	ite	eq
 8004cb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cb8:	2500      	movne	r5, #0
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	bfc4      	itt	gt
 8004cbe:	1a9b      	subgt	r3, r3, r2
 8004cc0:	18ed      	addgt	r5, r5, r3
 8004cc2:	2600      	movs	r6, #0
 8004cc4:	341a      	adds	r4, #26
 8004cc6:	42b5      	cmp	r5, r6
 8004cc8:	d11a      	bne.n	8004d00 <_printf_common+0xc8>
 8004cca:	2000      	movs	r0, #0
 8004ccc:	e008      	b.n	8004ce0 <_printf_common+0xa8>
 8004cce:	2301      	movs	r3, #1
 8004cd0:	4652      	mov	r2, sl
 8004cd2:	4649      	mov	r1, r9
 8004cd4:	4638      	mov	r0, r7
 8004cd6:	47c0      	blx	r8
 8004cd8:	3001      	adds	r0, #1
 8004cda:	d103      	bne.n	8004ce4 <_printf_common+0xac>
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004ce4:	3501      	adds	r5, #1
 8004ce6:	e7c6      	b.n	8004c76 <_printf_common+0x3e>
 8004ce8:	18e1      	adds	r1, r4, r3
 8004cea:	1c5a      	adds	r2, r3, #1
 8004cec:	2030      	movs	r0, #48	; 0x30
 8004cee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004cf2:	4422      	add	r2, r4
 8004cf4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004cf8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004cfc:	3302      	adds	r3, #2
 8004cfe:	e7c7      	b.n	8004c90 <_printf_common+0x58>
 8004d00:	2301      	movs	r3, #1
 8004d02:	4622      	mov	r2, r4
 8004d04:	4649      	mov	r1, r9
 8004d06:	4638      	mov	r0, r7
 8004d08:	47c0      	blx	r8
 8004d0a:	3001      	adds	r0, #1
 8004d0c:	d0e6      	beq.n	8004cdc <_printf_common+0xa4>
 8004d0e:	3601      	adds	r6, #1
 8004d10:	e7d9      	b.n	8004cc6 <_printf_common+0x8e>
	...

08004d14 <_printf_i>:
 8004d14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004d18:	7e0f      	ldrb	r7, [r1, #24]
 8004d1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004d1c:	2f78      	cmp	r7, #120	; 0x78
 8004d1e:	4691      	mov	r9, r2
 8004d20:	4680      	mov	r8, r0
 8004d22:	460c      	mov	r4, r1
 8004d24:	469a      	mov	sl, r3
 8004d26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004d2a:	d807      	bhi.n	8004d3c <_printf_i+0x28>
 8004d2c:	2f62      	cmp	r7, #98	; 0x62
 8004d2e:	d80a      	bhi.n	8004d46 <_printf_i+0x32>
 8004d30:	2f00      	cmp	r7, #0
 8004d32:	f000 80d8 	beq.w	8004ee6 <_printf_i+0x1d2>
 8004d36:	2f58      	cmp	r7, #88	; 0x58
 8004d38:	f000 80a3 	beq.w	8004e82 <_printf_i+0x16e>
 8004d3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004d44:	e03a      	b.n	8004dbc <_printf_i+0xa8>
 8004d46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004d4a:	2b15      	cmp	r3, #21
 8004d4c:	d8f6      	bhi.n	8004d3c <_printf_i+0x28>
 8004d4e:	a101      	add	r1, pc, #4	; (adr r1, 8004d54 <_printf_i+0x40>)
 8004d50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004d54:	08004dad 	.word	0x08004dad
 8004d58:	08004dc1 	.word	0x08004dc1
 8004d5c:	08004d3d 	.word	0x08004d3d
 8004d60:	08004d3d 	.word	0x08004d3d
 8004d64:	08004d3d 	.word	0x08004d3d
 8004d68:	08004d3d 	.word	0x08004d3d
 8004d6c:	08004dc1 	.word	0x08004dc1
 8004d70:	08004d3d 	.word	0x08004d3d
 8004d74:	08004d3d 	.word	0x08004d3d
 8004d78:	08004d3d 	.word	0x08004d3d
 8004d7c:	08004d3d 	.word	0x08004d3d
 8004d80:	08004ecd 	.word	0x08004ecd
 8004d84:	08004df1 	.word	0x08004df1
 8004d88:	08004eaf 	.word	0x08004eaf
 8004d8c:	08004d3d 	.word	0x08004d3d
 8004d90:	08004d3d 	.word	0x08004d3d
 8004d94:	08004eef 	.word	0x08004eef
 8004d98:	08004d3d 	.word	0x08004d3d
 8004d9c:	08004df1 	.word	0x08004df1
 8004da0:	08004d3d 	.word	0x08004d3d
 8004da4:	08004d3d 	.word	0x08004d3d
 8004da8:	08004eb7 	.word	0x08004eb7
 8004dac:	682b      	ldr	r3, [r5, #0]
 8004dae:	1d1a      	adds	r2, r3, #4
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	602a      	str	r2, [r5, #0]
 8004db4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004db8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dbc:	2301      	movs	r3, #1
 8004dbe:	e0a3      	b.n	8004f08 <_printf_i+0x1f4>
 8004dc0:	6820      	ldr	r0, [r4, #0]
 8004dc2:	6829      	ldr	r1, [r5, #0]
 8004dc4:	0606      	lsls	r6, r0, #24
 8004dc6:	f101 0304 	add.w	r3, r1, #4
 8004dca:	d50a      	bpl.n	8004de2 <_printf_i+0xce>
 8004dcc:	680e      	ldr	r6, [r1, #0]
 8004dce:	602b      	str	r3, [r5, #0]
 8004dd0:	2e00      	cmp	r6, #0
 8004dd2:	da03      	bge.n	8004ddc <_printf_i+0xc8>
 8004dd4:	232d      	movs	r3, #45	; 0x2d
 8004dd6:	4276      	negs	r6, r6
 8004dd8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004ddc:	485e      	ldr	r0, [pc, #376]	; (8004f58 <_printf_i+0x244>)
 8004dde:	230a      	movs	r3, #10
 8004de0:	e019      	b.n	8004e16 <_printf_i+0x102>
 8004de2:	680e      	ldr	r6, [r1, #0]
 8004de4:	602b      	str	r3, [r5, #0]
 8004de6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dea:	bf18      	it	ne
 8004dec:	b236      	sxthne	r6, r6
 8004dee:	e7ef      	b.n	8004dd0 <_printf_i+0xbc>
 8004df0:	682b      	ldr	r3, [r5, #0]
 8004df2:	6820      	ldr	r0, [r4, #0]
 8004df4:	1d19      	adds	r1, r3, #4
 8004df6:	6029      	str	r1, [r5, #0]
 8004df8:	0601      	lsls	r1, r0, #24
 8004dfa:	d501      	bpl.n	8004e00 <_printf_i+0xec>
 8004dfc:	681e      	ldr	r6, [r3, #0]
 8004dfe:	e002      	b.n	8004e06 <_printf_i+0xf2>
 8004e00:	0646      	lsls	r6, r0, #25
 8004e02:	d5fb      	bpl.n	8004dfc <_printf_i+0xe8>
 8004e04:	881e      	ldrh	r6, [r3, #0]
 8004e06:	4854      	ldr	r0, [pc, #336]	; (8004f58 <_printf_i+0x244>)
 8004e08:	2f6f      	cmp	r7, #111	; 0x6f
 8004e0a:	bf0c      	ite	eq
 8004e0c:	2308      	moveq	r3, #8
 8004e0e:	230a      	movne	r3, #10
 8004e10:	2100      	movs	r1, #0
 8004e12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004e16:	6865      	ldr	r5, [r4, #4]
 8004e18:	60a5      	str	r5, [r4, #8]
 8004e1a:	2d00      	cmp	r5, #0
 8004e1c:	bfa2      	ittt	ge
 8004e1e:	6821      	ldrge	r1, [r4, #0]
 8004e20:	f021 0104 	bicge.w	r1, r1, #4
 8004e24:	6021      	strge	r1, [r4, #0]
 8004e26:	b90e      	cbnz	r6, 8004e2c <_printf_i+0x118>
 8004e28:	2d00      	cmp	r5, #0
 8004e2a:	d04d      	beq.n	8004ec8 <_printf_i+0x1b4>
 8004e2c:	4615      	mov	r5, r2
 8004e2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004e32:	fb03 6711 	mls	r7, r3, r1, r6
 8004e36:	5dc7      	ldrb	r7, [r0, r7]
 8004e38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004e3c:	4637      	mov	r7, r6
 8004e3e:	42bb      	cmp	r3, r7
 8004e40:	460e      	mov	r6, r1
 8004e42:	d9f4      	bls.n	8004e2e <_printf_i+0x11a>
 8004e44:	2b08      	cmp	r3, #8
 8004e46:	d10b      	bne.n	8004e60 <_printf_i+0x14c>
 8004e48:	6823      	ldr	r3, [r4, #0]
 8004e4a:	07de      	lsls	r6, r3, #31
 8004e4c:	d508      	bpl.n	8004e60 <_printf_i+0x14c>
 8004e4e:	6923      	ldr	r3, [r4, #16]
 8004e50:	6861      	ldr	r1, [r4, #4]
 8004e52:	4299      	cmp	r1, r3
 8004e54:	bfde      	ittt	le
 8004e56:	2330      	movle	r3, #48	; 0x30
 8004e58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e60:	1b52      	subs	r2, r2, r5
 8004e62:	6122      	str	r2, [r4, #16]
 8004e64:	f8cd a000 	str.w	sl, [sp]
 8004e68:	464b      	mov	r3, r9
 8004e6a:	aa03      	add	r2, sp, #12
 8004e6c:	4621      	mov	r1, r4
 8004e6e:	4640      	mov	r0, r8
 8004e70:	f7ff fee2 	bl	8004c38 <_printf_common>
 8004e74:	3001      	adds	r0, #1
 8004e76:	d14c      	bne.n	8004f12 <_printf_i+0x1fe>
 8004e78:	f04f 30ff 	mov.w	r0, #4294967295
 8004e7c:	b004      	add	sp, #16
 8004e7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e82:	4835      	ldr	r0, [pc, #212]	; (8004f58 <_printf_i+0x244>)
 8004e84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004e88:	6829      	ldr	r1, [r5, #0]
 8004e8a:	6823      	ldr	r3, [r4, #0]
 8004e8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004e90:	6029      	str	r1, [r5, #0]
 8004e92:	061d      	lsls	r5, r3, #24
 8004e94:	d514      	bpl.n	8004ec0 <_printf_i+0x1ac>
 8004e96:	07df      	lsls	r7, r3, #31
 8004e98:	bf44      	itt	mi
 8004e9a:	f043 0320 	orrmi.w	r3, r3, #32
 8004e9e:	6023      	strmi	r3, [r4, #0]
 8004ea0:	b91e      	cbnz	r6, 8004eaa <_printf_i+0x196>
 8004ea2:	6823      	ldr	r3, [r4, #0]
 8004ea4:	f023 0320 	bic.w	r3, r3, #32
 8004ea8:	6023      	str	r3, [r4, #0]
 8004eaa:	2310      	movs	r3, #16
 8004eac:	e7b0      	b.n	8004e10 <_printf_i+0xfc>
 8004eae:	6823      	ldr	r3, [r4, #0]
 8004eb0:	f043 0320 	orr.w	r3, r3, #32
 8004eb4:	6023      	str	r3, [r4, #0]
 8004eb6:	2378      	movs	r3, #120	; 0x78
 8004eb8:	4828      	ldr	r0, [pc, #160]	; (8004f5c <_printf_i+0x248>)
 8004eba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004ebe:	e7e3      	b.n	8004e88 <_printf_i+0x174>
 8004ec0:	0659      	lsls	r1, r3, #25
 8004ec2:	bf48      	it	mi
 8004ec4:	b2b6      	uxthmi	r6, r6
 8004ec6:	e7e6      	b.n	8004e96 <_printf_i+0x182>
 8004ec8:	4615      	mov	r5, r2
 8004eca:	e7bb      	b.n	8004e44 <_printf_i+0x130>
 8004ecc:	682b      	ldr	r3, [r5, #0]
 8004ece:	6826      	ldr	r6, [r4, #0]
 8004ed0:	6961      	ldr	r1, [r4, #20]
 8004ed2:	1d18      	adds	r0, r3, #4
 8004ed4:	6028      	str	r0, [r5, #0]
 8004ed6:	0635      	lsls	r5, r6, #24
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	d501      	bpl.n	8004ee0 <_printf_i+0x1cc>
 8004edc:	6019      	str	r1, [r3, #0]
 8004ede:	e002      	b.n	8004ee6 <_printf_i+0x1d2>
 8004ee0:	0670      	lsls	r0, r6, #25
 8004ee2:	d5fb      	bpl.n	8004edc <_printf_i+0x1c8>
 8004ee4:	8019      	strh	r1, [r3, #0]
 8004ee6:	2300      	movs	r3, #0
 8004ee8:	6123      	str	r3, [r4, #16]
 8004eea:	4615      	mov	r5, r2
 8004eec:	e7ba      	b.n	8004e64 <_printf_i+0x150>
 8004eee:	682b      	ldr	r3, [r5, #0]
 8004ef0:	1d1a      	adds	r2, r3, #4
 8004ef2:	602a      	str	r2, [r5, #0]
 8004ef4:	681d      	ldr	r5, [r3, #0]
 8004ef6:	6862      	ldr	r2, [r4, #4]
 8004ef8:	2100      	movs	r1, #0
 8004efa:	4628      	mov	r0, r5
 8004efc:	f7fb f970 	bl	80001e0 <memchr>
 8004f00:	b108      	cbz	r0, 8004f06 <_printf_i+0x1f2>
 8004f02:	1b40      	subs	r0, r0, r5
 8004f04:	6060      	str	r0, [r4, #4]
 8004f06:	6863      	ldr	r3, [r4, #4]
 8004f08:	6123      	str	r3, [r4, #16]
 8004f0a:	2300      	movs	r3, #0
 8004f0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f10:	e7a8      	b.n	8004e64 <_printf_i+0x150>
 8004f12:	6923      	ldr	r3, [r4, #16]
 8004f14:	462a      	mov	r2, r5
 8004f16:	4649      	mov	r1, r9
 8004f18:	4640      	mov	r0, r8
 8004f1a:	47d0      	blx	sl
 8004f1c:	3001      	adds	r0, #1
 8004f1e:	d0ab      	beq.n	8004e78 <_printf_i+0x164>
 8004f20:	6823      	ldr	r3, [r4, #0]
 8004f22:	079b      	lsls	r3, r3, #30
 8004f24:	d413      	bmi.n	8004f4e <_printf_i+0x23a>
 8004f26:	68e0      	ldr	r0, [r4, #12]
 8004f28:	9b03      	ldr	r3, [sp, #12]
 8004f2a:	4298      	cmp	r0, r3
 8004f2c:	bfb8      	it	lt
 8004f2e:	4618      	movlt	r0, r3
 8004f30:	e7a4      	b.n	8004e7c <_printf_i+0x168>
 8004f32:	2301      	movs	r3, #1
 8004f34:	4632      	mov	r2, r6
 8004f36:	4649      	mov	r1, r9
 8004f38:	4640      	mov	r0, r8
 8004f3a:	47d0      	blx	sl
 8004f3c:	3001      	adds	r0, #1
 8004f3e:	d09b      	beq.n	8004e78 <_printf_i+0x164>
 8004f40:	3501      	adds	r5, #1
 8004f42:	68e3      	ldr	r3, [r4, #12]
 8004f44:	9903      	ldr	r1, [sp, #12]
 8004f46:	1a5b      	subs	r3, r3, r1
 8004f48:	42ab      	cmp	r3, r5
 8004f4a:	dcf2      	bgt.n	8004f32 <_printf_i+0x21e>
 8004f4c:	e7eb      	b.n	8004f26 <_printf_i+0x212>
 8004f4e:	2500      	movs	r5, #0
 8004f50:	f104 0619 	add.w	r6, r4, #25
 8004f54:	e7f5      	b.n	8004f42 <_printf_i+0x22e>
 8004f56:	bf00      	nop
 8004f58:	08005289 	.word	0x08005289
 8004f5c:	0800529a 	.word	0x0800529a

08004f60 <memcpy>:
 8004f60:	440a      	add	r2, r1
 8004f62:	4291      	cmp	r1, r2
 8004f64:	f100 33ff 	add.w	r3, r0, #4294967295
 8004f68:	d100      	bne.n	8004f6c <memcpy+0xc>
 8004f6a:	4770      	bx	lr
 8004f6c:	b510      	push	{r4, lr}
 8004f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f72:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f76:	4291      	cmp	r1, r2
 8004f78:	d1f9      	bne.n	8004f6e <memcpy+0xe>
 8004f7a:	bd10      	pop	{r4, pc}

08004f7c <memmove>:
 8004f7c:	4288      	cmp	r0, r1
 8004f7e:	b510      	push	{r4, lr}
 8004f80:	eb01 0402 	add.w	r4, r1, r2
 8004f84:	d902      	bls.n	8004f8c <memmove+0x10>
 8004f86:	4284      	cmp	r4, r0
 8004f88:	4623      	mov	r3, r4
 8004f8a:	d807      	bhi.n	8004f9c <memmove+0x20>
 8004f8c:	1e43      	subs	r3, r0, #1
 8004f8e:	42a1      	cmp	r1, r4
 8004f90:	d008      	beq.n	8004fa4 <memmove+0x28>
 8004f92:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004f96:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004f9a:	e7f8      	b.n	8004f8e <memmove+0x12>
 8004f9c:	4402      	add	r2, r0
 8004f9e:	4601      	mov	r1, r0
 8004fa0:	428a      	cmp	r2, r1
 8004fa2:	d100      	bne.n	8004fa6 <memmove+0x2a>
 8004fa4:	bd10      	pop	{r4, pc}
 8004fa6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004faa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004fae:	e7f7      	b.n	8004fa0 <memmove+0x24>

08004fb0 <_free_r>:
 8004fb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004fb2:	2900      	cmp	r1, #0
 8004fb4:	d044      	beq.n	8005040 <_free_r+0x90>
 8004fb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004fba:	9001      	str	r0, [sp, #4]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	f1a1 0404 	sub.w	r4, r1, #4
 8004fc2:	bfb8      	it	lt
 8004fc4:	18e4      	addlt	r4, r4, r3
 8004fc6:	f000 f913 	bl	80051f0 <__malloc_lock>
 8004fca:	4a1e      	ldr	r2, [pc, #120]	; (8005044 <_free_r+0x94>)
 8004fcc:	9801      	ldr	r0, [sp, #4]
 8004fce:	6813      	ldr	r3, [r2, #0]
 8004fd0:	b933      	cbnz	r3, 8004fe0 <_free_r+0x30>
 8004fd2:	6063      	str	r3, [r4, #4]
 8004fd4:	6014      	str	r4, [r2, #0]
 8004fd6:	b003      	add	sp, #12
 8004fd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fdc:	f000 b90e 	b.w	80051fc <__malloc_unlock>
 8004fe0:	42a3      	cmp	r3, r4
 8004fe2:	d908      	bls.n	8004ff6 <_free_r+0x46>
 8004fe4:	6825      	ldr	r5, [r4, #0]
 8004fe6:	1961      	adds	r1, r4, r5
 8004fe8:	428b      	cmp	r3, r1
 8004fea:	bf01      	itttt	eq
 8004fec:	6819      	ldreq	r1, [r3, #0]
 8004fee:	685b      	ldreq	r3, [r3, #4]
 8004ff0:	1949      	addeq	r1, r1, r5
 8004ff2:	6021      	streq	r1, [r4, #0]
 8004ff4:	e7ed      	b.n	8004fd2 <_free_r+0x22>
 8004ff6:	461a      	mov	r2, r3
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	b10b      	cbz	r3, 8005000 <_free_r+0x50>
 8004ffc:	42a3      	cmp	r3, r4
 8004ffe:	d9fa      	bls.n	8004ff6 <_free_r+0x46>
 8005000:	6811      	ldr	r1, [r2, #0]
 8005002:	1855      	adds	r5, r2, r1
 8005004:	42a5      	cmp	r5, r4
 8005006:	d10b      	bne.n	8005020 <_free_r+0x70>
 8005008:	6824      	ldr	r4, [r4, #0]
 800500a:	4421      	add	r1, r4
 800500c:	1854      	adds	r4, r2, r1
 800500e:	42a3      	cmp	r3, r4
 8005010:	6011      	str	r1, [r2, #0]
 8005012:	d1e0      	bne.n	8004fd6 <_free_r+0x26>
 8005014:	681c      	ldr	r4, [r3, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	6053      	str	r3, [r2, #4]
 800501a:	4421      	add	r1, r4
 800501c:	6011      	str	r1, [r2, #0]
 800501e:	e7da      	b.n	8004fd6 <_free_r+0x26>
 8005020:	d902      	bls.n	8005028 <_free_r+0x78>
 8005022:	230c      	movs	r3, #12
 8005024:	6003      	str	r3, [r0, #0]
 8005026:	e7d6      	b.n	8004fd6 <_free_r+0x26>
 8005028:	6825      	ldr	r5, [r4, #0]
 800502a:	1961      	adds	r1, r4, r5
 800502c:	428b      	cmp	r3, r1
 800502e:	bf04      	itt	eq
 8005030:	6819      	ldreq	r1, [r3, #0]
 8005032:	685b      	ldreq	r3, [r3, #4]
 8005034:	6063      	str	r3, [r4, #4]
 8005036:	bf04      	itt	eq
 8005038:	1949      	addeq	r1, r1, r5
 800503a:	6021      	streq	r1, [r4, #0]
 800503c:	6054      	str	r4, [r2, #4]
 800503e:	e7ca      	b.n	8004fd6 <_free_r+0x26>
 8005040:	b003      	add	sp, #12
 8005042:	bd30      	pop	{r4, r5, pc}
 8005044:	200002d0 	.word	0x200002d0

08005048 <sbrk_aligned>:
 8005048:	b570      	push	{r4, r5, r6, lr}
 800504a:	4e0e      	ldr	r6, [pc, #56]	; (8005084 <sbrk_aligned+0x3c>)
 800504c:	460c      	mov	r4, r1
 800504e:	6831      	ldr	r1, [r6, #0]
 8005050:	4605      	mov	r5, r0
 8005052:	b911      	cbnz	r1, 800505a <sbrk_aligned+0x12>
 8005054:	f000 f8bc 	bl	80051d0 <_sbrk_r>
 8005058:	6030      	str	r0, [r6, #0]
 800505a:	4621      	mov	r1, r4
 800505c:	4628      	mov	r0, r5
 800505e:	f000 f8b7 	bl	80051d0 <_sbrk_r>
 8005062:	1c43      	adds	r3, r0, #1
 8005064:	d00a      	beq.n	800507c <sbrk_aligned+0x34>
 8005066:	1cc4      	adds	r4, r0, #3
 8005068:	f024 0403 	bic.w	r4, r4, #3
 800506c:	42a0      	cmp	r0, r4
 800506e:	d007      	beq.n	8005080 <sbrk_aligned+0x38>
 8005070:	1a21      	subs	r1, r4, r0
 8005072:	4628      	mov	r0, r5
 8005074:	f000 f8ac 	bl	80051d0 <_sbrk_r>
 8005078:	3001      	adds	r0, #1
 800507a:	d101      	bne.n	8005080 <sbrk_aligned+0x38>
 800507c:	f04f 34ff 	mov.w	r4, #4294967295
 8005080:	4620      	mov	r0, r4
 8005082:	bd70      	pop	{r4, r5, r6, pc}
 8005084:	200002d4 	.word	0x200002d4

08005088 <_malloc_r>:
 8005088:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800508c:	1ccd      	adds	r5, r1, #3
 800508e:	f025 0503 	bic.w	r5, r5, #3
 8005092:	3508      	adds	r5, #8
 8005094:	2d0c      	cmp	r5, #12
 8005096:	bf38      	it	cc
 8005098:	250c      	movcc	r5, #12
 800509a:	2d00      	cmp	r5, #0
 800509c:	4607      	mov	r7, r0
 800509e:	db01      	blt.n	80050a4 <_malloc_r+0x1c>
 80050a0:	42a9      	cmp	r1, r5
 80050a2:	d905      	bls.n	80050b0 <_malloc_r+0x28>
 80050a4:	230c      	movs	r3, #12
 80050a6:	603b      	str	r3, [r7, #0]
 80050a8:	2600      	movs	r6, #0
 80050aa:	4630      	mov	r0, r6
 80050ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80050b0:	4e2e      	ldr	r6, [pc, #184]	; (800516c <_malloc_r+0xe4>)
 80050b2:	f000 f89d 	bl	80051f0 <__malloc_lock>
 80050b6:	6833      	ldr	r3, [r6, #0]
 80050b8:	461c      	mov	r4, r3
 80050ba:	bb34      	cbnz	r4, 800510a <_malloc_r+0x82>
 80050bc:	4629      	mov	r1, r5
 80050be:	4638      	mov	r0, r7
 80050c0:	f7ff ffc2 	bl	8005048 <sbrk_aligned>
 80050c4:	1c43      	adds	r3, r0, #1
 80050c6:	4604      	mov	r4, r0
 80050c8:	d14d      	bne.n	8005166 <_malloc_r+0xde>
 80050ca:	6834      	ldr	r4, [r6, #0]
 80050cc:	4626      	mov	r6, r4
 80050ce:	2e00      	cmp	r6, #0
 80050d0:	d140      	bne.n	8005154 <_malloc_r+0xcc>
 80050d2:	6823      	ldr	r3, [r4, #0]
 80050d4:	4631      	mov	r1, r6
 80050d6:	4638      	mov	r0, r7
 80050d8:	eb04 0803 	add.w	r8, r4, r3
 80050dc:	f000 f878 	bl	80051d0 <_sbrk_r>
 80050e0:	4580      	cmp	r8, r0
 80050e2:	d13a      	bne.n	800515a <_malloc_r+0xd2>
 80050e4:	6821      	ldr	r1, [r4, #0]
 80050e6:	3503      	adds	r5, #3
 80050e8:	1a6d      	subs	r5, r5, r1
 80050ea:	f025 0503 	bic.w	r5, r5, #3
 80050ee:	3508      	adds	r5, #8
 80050f0:	2d0c      	cmp	r5, #12
 80050f2:	bf38      	it	cc
 80050f4:	250c      	movcc	r5, #12
 80050f6:	4629      	mov	r1, r5
 80050f8:	4638      	mov	r0, r7
 80050fa:	f7ff ffa5 	bl	8005048 <sbrk_aligned>
 80050fe:	3001      	adds	r0, #1
 8005100:	d02b      	beq.n	800515a <_malloc_r+0xd2>
 8005102:	6823      	ldr	r3, [r4, #0]
 8005104:	442b      	add	r3, r5
 8005106:	6023      	str	r3, [r4, #0]
 8005108:	e00e      	b.n	8005128 <_malloc_r+0xa0>
 800510a:	6822      	ldr	r2, [r4, #0]
 800510c:	1b52      	subs	r2, r2, r5
 800510e:	d41e      	bmi.n	800514e <_malloc_r+0xc6>
 8005110:	2a0b      	cmp	r2, #11
 8005112:	d916      	bls.n	8005142 <_malloc_r+0xba>
 8005114:	1961      	adds	r1, r4, r5
 8005116:	42a3      	cmp	r3, r4
 8005118:	6025      	str	r5, [r4, #0]
 800511a:	bf18      	it	ne
 800511c:	6059      	strne	r1, [r3, #4]
 800511e:	6863      	ldr	r3, [r4, #4]
 8005120:	bf08      	it	eq
 8005122:	6031      	streq	r1, [r6, #0]
 8005124:	5162      	str	r2, [r4, r5]
 8005126:	604b      	str	r3, [r1, #4]
 8005128:	4638      	mov	r0, r7
 800512a:	f104 060b 	add.w	r6, r4, #11
 800512e:	f000 f865 	bl	80051fc <__malloc_unlock>
 8005132:	f026 0607 	bic.w	r6, r6, #7
 8005136:	1d23      	adds	r3, r4, #4
 8005138:	1af2      	subs	r2, r6, r3
 800513a:	d0b6      	beq.n	80050aa <_malloc_r+0x22>
 800513c:	1b9b      	subs	r3, r3, r6
 800513e:	50a3      	str	r3, [r4, r2]
 8005140:	e7b3      	b.n	80050aa <_malloc_r+0x22>
 8005142:	6862      	ldr	r2, [r4, #4]
 8005144:	42a3      	cmp	r3, r4
 8005146:	bf0c      	ite	eq
 8005148:	6032      	streq	r2, [r6, #0]
 800514a:	605a      	strne	r2, [r3, #4]
 800514c:	e7ec      	b.n	8005128 <_malloc_r+0xa0>
 800514e:	4623      	mov	r3, r4
 8005150:	6864      	ldr	r4, [r4, #4]
 8005152:	e7b2      	b.n	80050ba <_malloc_r+0x32>
 8005154:	4634      	mov	r4, r6
 8005156:	6876      	ldr	r6, [r6, #4]
 8005158:	e7b9      	b.n	80050ce <_malloc_r+0x46>
 800515a:	230c      	movs	r3, #12
 800515c:	603b      	str	r3, [r7, #0]
 800515e:	4638      	mov	r0, r7
 8005160:	f000 f84c 	bl	80051fc <__malloc_unlock>
 8005164:	e7a1      	b.n	80050aa <_malloc_r+0x22>
 8005166:	6025      	str	r5, [r4, #0]
 8005168:	e7de      	b.n	8005128 <_malloc_r+0xa0>
 800516a:	bf00      	nop
 800516c:	200002d0 	.word	0x200002d0

08005170 <_realloc_r>:
 8005170:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005174:	4680      	mov	r8, r0
 8005176:	4614      	mov	r4, r2
 8005178:	460e      	mov	r6, r1
 800517a:	b921      	cbnz	r1, 8005186 <_realloc_r+0x16>
 800517c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005180:	4611      	mov	r1, r2
 8005182:	f7ff bf81 	b.w	8005088 <_malloc_r>
 8005186:	b92a      	cbnz	r2, 8005194 <_realloc_r+0x24>
 8005188:	f7ff ff12 	bl	8004fb0 <_free_r>
 800518c:	4625      	mov	r5, r4
 800518e:	4628      	mov	r0, r5
 8005190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005194:	f000 f838 	bl	8005208 <_malloc_usable_size_r>
 8005198:	4284      	cmp	r4, r0
 800519a:	4607      	mov	r7, r0
 800519c:	d802      	bhi.n	80051a4 <_realloc_r+0x34>
 800519e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80051a2:	d812      	bhi.n	80051ca <_realloc_r+0x5a>
 80051a4:	4621      	mov	r1, r4
 80051a6:	4640      	mov	r0, r8
 80051a8:	f7ff ff6e 	bl	8005088 <_malloc_r>
 80051ac:	4605      	mov	r5, r0
 80051ae:	2800      	cmp	r0, #0
 80051b0:	d0ed      	beq.n	800518e <_realloc_r+0x1e>
 80051b2:	42bc      	cmp	r4, r7
 80051b4:	4622      	mov	r2, r4
 80051b6:	4631      	mov	r1, r6
 80051b8:	bf28      	it	cs
 80051ba:	463a      	movcs	r2, r7
 80051bc:	f7ff fed0 	bl	8004f60 <memcpy>
 80051c0:	4631      	mov	r1, r6
 80051c2:	4640      	mov	r0, r8
 80051c4:	f7ff fef4 	bl	8004fb0 <_free_r>
 80051c8:	e7e1      	b.n	800518e <_realloc_r+0x1e>
 80051ca:	4635      	mov	r5, r6
 80051cc:	e7df      	b.n	800518e <_realloc_r+0x1e>
	...

080051d0 <_sbrk_r>:
 80051d0:	b538      	push	{r3, r4, r5, lr}
 80051d2:	4d06      	ldr	r5, [pc, #24]	; (80051ec <_sbrk_r+0x1c>)
 80051d4:	2300      	movs	r3, #0
 80051d6:	4604      	mov	r4, r0
 80051d8:	4608      	mov	r0, r1
 80051da:	602b      	str	r3, [r5, #0]
 80051dc:	f7fb fb9a 	bl	8000914 <_sbrk>
 80051e0:	1c43      	adds	r3, r0, #1
 80051e2:	d102      	bne.n	80051ea <_sbrk_r+0x1a>
 80051e4:	682b      	ldr	r3, [r5, #0]
 80051e6:	b103      	cbz	r3, 80051ea <_sbrk_r+0x1a>
 80051e8:	6023      	str	r3, [r4, #0]
 80051ea:	bd38      	pop	{r3, r4, r5, pc}
 80051ec:	200002d8 	.word	0x200002d8

080051f0 <__malloc_lock>:
 80051f0:	4801      	ldr	r0, [pc, #4]	; (80051f8 <__malloc_lock+0x8>)
 80051f2:	f000 b811 	b.w	8005218 <__retarget_lock_acquire_recursive>
 80051f6:	bf00      	nop
 80051f8:	200002dc 	.word	0x200002dc

080051fc <__malloc_unlock>:
 80051fc:	4801      	ldr	r0, [pc, #4]	; (8005204 <__malloc_unlock+0x8>)
 80051fe:	f000 b80c 	b.w	800521a <__retarget_lock_release_recursive>
 8005202:	bf00      	nop
 8005204:	200002dc 	.word	0x200002dc

08005208 <_malloc_usable_size_r>:
 8005208:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800520c:	1f18      	subs	r0, r3, #4
 800520e:	2b00      	cmp	r3, #0
 8005210:	bfbc      	itt	lt
 8005212:	580b      	ldrlt	r3, [r1, r0]
 8005214:	18c0      	addlt	r0, r0, r3
 8005216:	4770      	bx	lr

08005218 <__retarget_lock_acquire_recursive>:
 8005218:	4770      	bx	lr

0800521a <__retarget_lock_release_recursive>:
 800521a:	4770      	bx	lr

0800521c <_init>:
 800521c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800521e:	bf00      	nop
 8005220:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005222:	bc08      	pop	{r3}
 8005224:	469e      	mov	lr, r3
 8005226:	4770      	bx	lr

08005228 <_fini>:
 8005228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800522a:	bf00      	nop
 800522c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800522e:	bc08      	pop	{r3}
 8005230:	469e      	mov	lr, r3
 8005232:	4770      	bx	lr
